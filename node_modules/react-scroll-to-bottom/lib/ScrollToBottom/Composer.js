"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

var _EventSpy = _interopRequireDefault(require("../EventSpy"));

var _FunctionContext = _interopRequireDefault(require("./FunctionContext"));

var _InternalContext = _interopRequireDefault(require("./InternalContext"));

var _SpineTo = _interopRequireDefault(require("../SpineTo"));

var _StateContext = _interopRequireDefault(require("./StateContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var MIN_CHECK_INTERVAL = 17; // 1 frame

var NEAR_END_THRESHOLD = 1;
var SCROLL_DECISION_DURATION = 34; // 2 frames

function setImmediateInterval(fn, ms) {
  fn();
  return setInterval(fn, ms);
}

function computeViewState(_ref) {
  var mode = _ref.stateContext.mode,
      _ref$target = _ref.target,
      offsetHeight = _ref$target.offsetHeight,
      scrollHeight = _ref$target.scrollHeight,
      scrollTop = _ref$target.scrollTop;
  var atBottom = scrollHeight - scrollTop - offsetHeight < NEAR_END_THRESHOLD;
  var atTop = scrollTop < NEAR_END_THRESHOLD;
  var atEnd = mode === 'top' ? atTop : atBottom;
  return {
    atBottom: atBottom,
    atEnd: atEnd,
    atStart: !atEnd,
    atTop: atTop
  };
}

var Composer =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Composer, _React$Component);

  function Composer(props) {
    var _this;

    _classCallCheck(this, Composer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Composer).call(this, props));
    _this.handleScroll = _this.handleScroll.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.handleScrollEnd = _this.handleScrollEnd.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this._ignoreScrollEventBefore = 0;
    _this.state = {
      functionContext: {
        scrollTo: function scrollTo(scrollTop) {
          return _this.setState(function (_ref2) {
            var stateContext = _ref2.stateContext;
            return {
              scrollTop: scrollTop,
              stateContext: (0, _simpleUpdateIn.default)(stateContext, ['animating'], function () {
                return true;
              })
            };
          });
        },
        scrollToBottom: function scrollToBottom() {
          return _this.state.functionContext.scrollTo('100%');
        },
        scrollToEnd: function scrollToEnd() {
          var _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this)),
              _assertThisInitialize2 = _assertThisInitialize.state,
              functionContext = _assertThisInitialize2.functionContext,
              stateContext = _assertThisInitialize2.stateContext;

          stateContext.mode === 'top' ? functionContext.scrollToTop() : functionContext.scrollToBottom();
        },
        scrollToStart: function scrollToStart() {
          var _assertThisInitialize3 = _assertThisInitialized(_assertThisInitialized(_this)),
              _assertThisInitialize4 = _assertThisInitialize3.state,
              functionContext = _assertThisInitialize4.functionContext,
              stateContext = _assertThisInitialize4.stateContext;

          stateContext.mode === 'top' ? functionContext.scrollToBottom() : functionContext.scrollToTop();
        },
        scrollToTop: function scrollToTop() {
          return _this.state.functionContext.scrollTo(0);
        }
      },
      internalContext: {
        setTarget: function setTarget(target) {
          return _this.setState(function () {
            return {
              target: target
            };
          });
        }
      },
      scrollTop: props.mode === 'top' ? 0 : '100%',
      stateContext: {
        animating: false,
        atBottom: true,
        atEnd: true,
        atTop: true,
        mode: props.mode,
        sticky: true
      },
      target: null
    };
    return _this;
  }

  _createClass(Composer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.enableWorker();
    }
  }, {
    key: "disableWorker",
    value: function disableWorker() {
      clearInterval(this._stickyCheckTimeout);
    }
  }, {
    key: "enableWorker",
    value: function enableWorker() {
      var _this2 = this;

      clearInterval(this._stickyCheckTimeout);
      var stickyButNotAtEndSince = false;
      this._stickyCheckTimeout = setImmediateInterval(function () {
        var state = _this2.state;
        var sticky = state.stateContext.sticky,
            target = state.target;

        if (sticky && target && !computeViewState(state).atEnd) {
          if (!stickyButNotAtEndSince) {
            stickyButNotAtEndSince = Date.now();
          } else if (Date.now() - stickyButNotAtEndSince > SCROLL_DECISION_DURATION) {
            // Quirks: In Firefox, after user scroll down, Firefox do two things:
            //         1. Set to a new "scrollTop"
            //         2. Fire "scroll" event
            //         For what we observed, #1 is fired about 20ms before #2. There is a chance that this stickyCheckTimeout is being scheduled between 1 and 2.
            //         That means, if we just look at #1 to decide if we should scroll, we will always scroll, in oppose to the user's intention.
            // Repro: Open Firefox, set checkInterval to a lower number, and try to scroll by dragging the scroll handler. It will jump back.
            state.functionContext.scrollToEnd();
            stickyButNotAtEndSince = false;
          }
        } else {
          stickyButNotAtEndSince = false;
        }
      }, Math.max(MIN_CHECK_INTERVAL, this.props.checkInterval) || MIN_CHECK_INTERVAL);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.disableWorker();
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this.setState(function (_ref3) {
        var stateContext = _ref3.stateContext;
        return {
          stateContext: _objectSpread({}, stateContext, {
            mode: nextProps.mode === 'top' ? 'top' : 'bottom'
          })
        };
      });
    }
  }, {
    key: "handleScroll",
    value: function handleScroll(_ref4) {
      var _this3 = this;

      var timeStampLow = _ref4.timeStampLow;

      // Currently, there are no reliable way to check if the "scroll" event is trigger due to
      // user gesture, programmatic scrolling, or Chrome-synthesized "scroll" event to compensate size change.
      // Thus, we use our best-effort to guess if it is triggered by user gesture, and disable sticky if it is heading towards the start direction.
      if (timeStampLow <= this._ignoreScrollEventBefore) {
        // Since we debounce "scroll" event, this handler might be called after spineTo.onEnd (a.k.a. artificial scrolling).
        // We should ignore debounced event fired after scrollEnd, because without skipping them, the userInitiatedScroll calculated below will not be accurate.
        // Thus, on a fast machine, adding elements super fast will lose the "stickiness".
        return;
      }

      this.disableWorker();
      this.setState(function (state) {
        var target = state.target;

        if (target) {
          var scrollTop = state.scrollTop,
              stateContext = state.stateContext;

          var _computeViewState = computeViewState(state),
              atBottom = _computeViewState.atBottom,
              atEnd = _computeViewState.atEnd,
              atStart = _computeViewState.atStart,
              atTop = _computeViewState.atTop;

          var nextStateContext = stateContext;
          nextStateContext = (0, _simpleUpdateIn.default)(nextStateContext, ['atBottom'], function () {
            return atBottom;
          });
          nextStateContext = (0, _simpleUpdateIn.default)(nextStateContext, ['atEnd'], function () {
            return atEnd;
          });
          nextStateContext = (0, _simpleUpdateIn.default)(nextStateContext, ['atStart'], function () {
            return atStart;
          });
          nextStateContext = (0, _simpleUpdateIn.default)(nextStateContext, ['atTop'], function () {
            return atTop;
          }); // Sticky means:
          // - If it is scrolled programatically, we are still in sticky mode
          // - If it is scrolled by the user, then sticky means if we are at the end

          nextStateContext = (0, _simpleUpdateIn.default)(nextStateContext, ['sticky'], function () {
            return stateContext.animating ? true : atEnd;
          }); // If no scrollTop is set (not in programmatic scrolling mode), we should set "animating" to false
          // "animating" is used to calculate the "sticky" property

          if (scrollTop === null) {
            nextStateContext = (0, _simpleUpdateIn.default)(nextStateContext, ['animating'], function () {
              return false;
            });
          }

          if (stateContext !== nextStateContext) {
            return {
              stateContext: nextStateContext
            };
          }
        }
      }, function () {
        _this3.state.stateContext.sticky && _this3.enableWorker();
      });
    }
  }, {
    key: "handleScrollEnd",
    value: function handleScrollEnd() {
      // We should ignore debouncing handleScroll that emit before this time
      this._ignoreScrollEventBefore = Date.now();
      this.setState(function () {
        return {
          scrollTop: null
        };
      });
    }
  }, {
    key: "render",
    value: function render() {
      var handleScroll = this.handleScroll,
          handleScrollEnd = this.handleScrollEnd,
          _this$props = this.props,
          children = _this$props.children,
          debounce = _this$props.debounce,
          _this$state = this.state,
          functionContext = _this$state.functionContext,
          internalContext = _this$state.internalContext,
          scrollTop = _this$state.scrollTop,
          stateContext = _this$state.stateContext,
          target = _this$state.target;
      return _react.default.createElement(_InternalContext.default.Provider, {
        value: internalContext
      }, _react.default.createElement(_FunctionContext.default.Provider, {
        value: functionContext
      }, _react.default.createElement(_StateContext.default.Provider, {
        value: stateContext
      }, children, target && _react.default.createElement(_EventSpy.default, {
        debounce: debounce,
        name: "scroll",
        onEvent: handleScroll,
        target: target
      }), target && scrollTop !== null && _react.default.createElement(_SpineTo.default, {
        name: "scrollTop",
        onEnd: handleScrollEnd,
        target: target,
        value: scrollTop
      }))));
    }
  }]);

  return Composer;
}(_react.default.Component);

exports.default = Composer;
Composer.defaultProps = {
  checkInterval: 100,
  debounce: 17
};
Composer.propTypes = {
  checkInterval: _propTypes.default.number,
  debounce: _propTypes.default.number
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,