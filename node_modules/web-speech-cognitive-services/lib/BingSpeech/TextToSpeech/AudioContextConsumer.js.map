{"version":3,"sources":["../../../src/BingSpeech/TextToSpeech/AudioContextConsumer.js"],"names":["audioContext","suspend","playingUtterance","emit","resume","queue","AudioContext","Error","utterance","shift","play","close","stop"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;4BACU;AACN,WAAKA,YAAL,IAAqB,KAAKA,YAAL,CAAkBC,OAAlB,EAArB;AACA,WAAKC,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,OAA3B,CAAzB;AACD;;;6BAEQ;AACP,WAAKH,YAAL,IAAqB,KAAKA,YAAL,CAAkBI,MAAlB,EAArB;AACA,WAAKF,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,QAA3B,CAAzB;AACD;;;;;;iDAEWE,K;;;;;;AAASC,gBAAAA,Y,QAAAA,Y;;qBACf,KAAKN,Y;;;;;sBACD,IAAIO,KAAJ,CAAU,iBAAV,C;;;;;;sBAMEC,SAAS,GAAGH,KAAK,CAACI,KAAN,E;;;;;AAClB,qBAAKP,gBAAL,GAAwBM,SAAxB;;uBAEMA,SAAS,CAACE,IAAV,CAAe,KAAKV,YAAL,KAAsB,KAAKA,YAAL,GAAoB,IAAIM,YAAJ,EAA1C,CAAf,C;;;AAEN,qBAAKJ,gBAAL,GAAwB,IAAxB;;;;;;;uBAGI,KAAKF,Y;;;;;;;;;;AAAgB,qBAAKA,YAAL,CAAkBW,KAAlB,E;;;;;;;;;;;;;;;;;;;2BAIxB;AACL,WAAKT,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBU,IAAtB,EAAzB;;AAEA,UAAI,KAAKZ,YAAT,EAAuB;AACrB;AACA;AAEA;AACA;AACA,aAAKA,YAAL,CAAkBW,KAAlB;AACA,aAAKX,YAAL,GAAoB,IAApB;AACD;AACF","sourcesContent":["export default class {\n  pause() {\n    this.audioContext && this.audioContext.suspend();\n    this.playingUtterance && this.playingUtterance.emit('pause');\n  }\n\n  resume() {\n    this.audioContext && this.audioContext.resume();\n    this.playingUtterance && this.playingUtterance.emit('resume');\n  }\n\n  async start(queue, { AudioContext }) {\n    if (this.audioContext) {\n      throw new Error('already started');\n    }\n\n    let utterance;\n\n    try {\n      while ((utterance = queue.shift())) {\n        this.playingUtterance = utterance;\n\n        await utterance.play(this.audioContext || (this.audioContext = new AudioContext()));\n\n        this.playingUtterance = null;\n      }\n    } finally {\n      await this.audioContext && this.audioContext.close();\n    }\n  }\n\n  stop() {\n    this.playingUtterance && this.playingUtterance.stop();\n\n    if (this.audioContext) {\n      // Play -> Pause -> Cancel (stop)\n      // This would generate these events: \"start\", \"pause\", \"end\"\n\n      // Without this code, the \"end\" event will not emit until resume() is called\n      // Cancelling an unstarted utterance will not emit any \"start\" or \"end\" event\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n  }\n}\n"],"file":"AudioContextConsumer.js"}