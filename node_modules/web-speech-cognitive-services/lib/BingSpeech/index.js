"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
Object.defineProperty(exports, "createSpeechRecognitionPonyfill", {
  enumerable: true,
  get: function get() {
    return _createSpeechRecognitionPonyfill.default;
  }
});
Object.defineProperty(exports, "createSpeechSynthesisPonyfill", {
  enumerable: true,
  get: function get() {
    return _createSpeechSynthesisPonyfill.default;
  }
});
Object.defineProperty(exports, "fetchAuthorizationToken", {
  enumerable: true,
  get: function get() {
    return _fetchAuthorizationToken.default;
  }
});

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _createSpeechRecognitionPonyfill = _interopRequireDefault(require("./SpeechToText/createSpeechRecognitionPonyfill"));

var _createSpeechSynthesisPonyfill = _interopRequireDefault(require("./TextToSpeech/createSpeechSynthesisPonyfill"));

var _fetchAuthorizationToken = _interopRequireDefault(require("./fetchAuthorizationToken"));

function _default() {
  return _ref.apply(this, arguments);
}

function _ref() {
  _ref = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee() {
    var _args = arguments;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.t0 = _objectSpread2.default;
            _context.t1 = {};
            _context.next = 4;
            return _createSpeechRecognitionPonyfill.default.apply(void 0, _args);

          case 4:
            _context.t2 = _context.sent;
            _context.next = 7;
            return _createSpeechSynthesisPonyfill.default.apply(void 0, _args);

          case 7:
            _context.t3 = _context.sent;
            _context.next = 10;
            return (0, _context.t0)(_context.t1, _context.t2, _context.t3);

          case 10:
            return _context.abrupt("return", _context.sent);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _ref.apply(this, arguments);
}
//# sourceMappingURL=index.js.map