{"version":3,"sources":["../../../src/BingSpeech/SpeechToText/createSpeechRecognitionPonyfill.js"],"names":["buildSpeechResult","transcript","confidence","isFinal","result","results","type","bingSpeechPromisify","fn","sink","CognitiveSpeech","Sink","then","Resolve","Reject","Promise","err","message","authorizationToken","subscriptionKey","textNormalization","console","warn","window","navigator","mediaDevices","getUserMedia","SpeechRecognition","_lang","document","documentElement","getAttribute","language","readyState","createRecognizer","mode","RecognitionMode","Interactive","osPlatform","userAgent","osName","appName","osVersion","appVersion","deviceManufacturer","deviceModel","deviceVersion","config","RecognizerConfig","SpeechConfig","Context","OS","Device","SpeechResultFormat","Detailed","fetchToken","CreateRecognizer","CognitiveTokenAuthentication","recognizer","AudioSource","TurnOff","_aborted","event","emit","subType","lang","toPromise","eventListener","promises","speechContext","grammars","createSpeechContext","Recognize","JSON","stringify","recognitionTriggered","emitCognitiveServices","race","listeningStarted","recognitionEnded","Name","Status","RecognitionCompletionStatus","AudioSourceError","error","connectingToService","recognitionStarted","ConnectError","getSpeechHypothesisPromise","speechEndDetected","speechHypothesis","gotFirstHypothesis","Result","Text","speechDetailedPhrase","recognitionResult","RecognitionStatus","Success","best","NBest","ITN","Lexical","MaskedITN","Display","Confidence","NoMatch","InitialSilenceTimeout","_grammars","nextGrammars","SpeechGrammarList","Error","nextLang","nextContinuous","nextInterimResults","nextMaxAlternatives","nextServiceURI","DOMEventEmitter","events","ConnectingToServiceEvent","EventAsPromise","ListeningStartedEvent","RecognitionEndedEvent","RecognitionStartedEvent","RecognitionTriggeredEvent","SpeechDetailedPhraseEvent","SpeechEndDetectedEvent","SpeechHypothesisEvent","SpeechSimplePhraseEvent","SpeechStartDetectedEvent","upcoming","speechSimplePhrase","speechStartDetected","name","eventAsPromise","call"],"mappings":"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","sourcesContent":["import * as CognitiveSpeech from 'microsoft-speech-browser-sdk';\nimport EventAsPromise from 'event-as-promise';\nimport memoize from 'memoize-one';\n\nimport DOMEventEmitter from '../Util/DOMEventEmitter';\nimport fetchAuthorizationToken from '../fetchAuthorizationToken';\nimport SpeechGrammarList from './SpeechGrammarList';\n\nfunction buildSpeechResult(transcript, confidence, isFinal) {\n  const result = [{ confidence, transcript }];\n\n  result.isFinal = isFinal;\n\n  return { results: [result], type: 'result' };\n}\n\nfunction bingSpeechPromisify(fn) {\n  return () => {\n    try {\n      const sink = new CognitiveSpeech.Sink();\n\n      fn().then(sink.Resolve, sink.Reject);\n\n      return new CognitiveSpeech.Promise(sink);\n    } catch (err) {\n      sink.Reject(err.message);\n    }\n  };\n}\n\nexport default ({\n  authorizationToken,\n  subscriptionKey,\n  textNormalization\n}) => {\n  if (!authorizationToken && !subscriptionKey) {\n    console.warn('Either authorization token or subscription key must be specified');\n\n    return {};\n  } else if (!window.navigator.mediaDevices || !window.navigator.mediaDevices.getUserMedia) {\n    console.warn('This browser does not support WebRTC and it will not work with Cognitive Services Speech Services.');\n\n    return {};\n  }\n\n  class SpeechRecognition extends DOMEventEmitter {\n    constructor() {\n      super([\n        'audiostart',\n        'soundstart',\n        'speechstart',\n        'speechend',\n        'soundend',\n        'audioend',\n        'result',\n        'nomatch',\n        'error',\n        'start',\n        'end',\n        'cognitiveservices'\n      ]);\n\n      this._lang = typeof window !== 'undefined' ? (window.document.documentElement.getAttribute('lang') || window.navigator.language) : 'en-US';\n\n      this.readyState = 0;\n\n      this.createRecognizer = memoize((\n        language,\n        mode = CognitiveSpeech.RecognitionMode.Interactive,\n        osPlatform = window.navigator.userAgent,\n        osName = window.navigator.appName,\n        osVersion = window.navigator.appVersion,\n        deviceManufacturer = 'microsoft-speech-browser-sdk',\n        deviceModel = 'web-speech-cognitive-services',\n        deviceVersion = VERSION\n      ) => {\n        const config = new CognitiveSpeech.RecognizerConfig(\n          new CognitiveSpeech.SpeechConfig(\n            new CognitiveSpeech.Context(\n              new CognitiveSpeech.OS(\n                osPlatform,\n                osName,\n                osVersion\n              ),\n              new CognitiveSpeech.Device(\n                deviceManufacturer,\n                deviceModel,\n                deviceVersion\n              )\n            )\n          ),\n          mode,\n          language,\n          CognitiveSpeech.SpeechResultFormat.Detailed\n        );\n\n        let fetchToken;\n\n        if (authorizationToken) {\n          fetchToken = bingSpeechPromisify(async () => typeof authorizationToken === 'function' ? await authorizationToken() : authorizationToken);\n        } else if (subscriptionKey) {\n          fetchToken = bingSpeechPromisify(async () => fetchAuthorizationToken(subscriptionKey));\n        }\n\n        return CognitiveSpeech.CreateRecognizer(config, new CognitiveSpeech.CognitiveTokenAuthentication(fetchToken, fetchToken));\n      });\n    }\n\n    get grammars() { return this._grammars; }\n    set grammars(nextGrammars) {\n      if (nextGrammars && !(nextGrammars instanceof SpeechGrammarList)) {\n        throw new Error('must be instance of SpeechGrammarList from \"web-speech-cognitive-services\"');\n      }\n\n      this._grammars = nextGrammars;\n    }\n\n    get lang() { return this._lang; }\n    set lang(nextLang) { this._lang = nextLang; }\n\n    get continuous() { return false; }\n    set continuous(nextContinuous) { nextContinuous && console.warn(`Bing Speech: Cannot set continuous to ${ nextContinuous }, this feature is not supported.`); }\n\n    get interimResults() { return true; }\n    set interimResults(nextInterimResults) { !nextInterimResults && console.warn(`Bing Speech: Cannot set interimResults to ${ nextInterimResults }, this feature is not supported.`); }\n\n    get maxAlternatives() { return 1; }\n    set maxAlternatives(nextMaxAlternatives) { nextMaxAlternatives !== 1 && console.warn(`Bing Speech: Cannot set maxAlternatives to ${ nextMaxAlternatives }, this feature is not supported.`); }\n\n    get serviceURI() { return null; }\n    set serviceURI(nextServiceURI) { nextServiceURI && console.warn(`Bing Speech: Cannot set serviceURI to ${ nextServiceURI }, this feature is not supported.`); }\n\n    abort() {\n      // TODO: Should redesign how to stop a recognition session\n      //       After abort is called, we should not saw it is a \"success\", \"silent\", or \"no match\"\n      const { AudioSource } = this.recognizer || {};\n\n      AudioSource && AudioSource.TurnOff();\n\n      this._aborted = true;\n    }\n\n    emitCognitiveServices(type, event) {\n      this.emit('cognitiveservices', {\n        ...event,\n        subType: type\n      });\n    }\n\n    stop() {\n      // TODO: Support stop\n\n      const { AudioSource } = this.recognizer || {};\n\n      AudioSource && AudioSource.TurnOff();\n    }\n\n    async start() {\n      const recognizer = this.recognizer = this.createRecognizer(\n        this.lang,\n        this.osPlatform || window.navigator.userAgent,\n        this.osName || window.navigator.appName,\n        this.osVersion || window.navigator.appVersion,\n        this.deviceManufacturer || 'web-speech-cognitive-services',\n        this.deviceModel || 'web-speech-cognitive-services',\n        this.deviceVersion || VERSION\n      );\n\n      const { eventListener, ...promises } = toPromise();\n\n      const speechContext = this.grammars && this.grammars.createSpeechContext();\n\n      recognizer.Recognize(eventListener, speechContext && JSON.stringify(speechContext));\n      this._aborted = false;\n\n      const recognitionTriggered = await promises.recognitionTriggered;\n\n      this.emitCognitiveServices('recognitionTriggered', recognitionTriggered);\n\n      let error;\n\n      const listeningStarted = await Promise.race([\n        promises.listeningStarted,\n        promises.recognitionEnded\n      ]);\n\n      this.emitCognitiveServices(listeningStarted.Name === 'RecognitionEndedEvent' ? 'recognitionEnded' : ' listeningStarted', listeningStarted);\n\n      if (listeningStarted.Name === 'RecognitionEndedEvent') {\n        // Possibly not authorized to use microphone\n        if (listeningStarted.Status === CognitiveSpeech.RecognitionCompletionStatus.AudioSourceError) {\n          error = 'not-allowed';\n        } else {\n          error = CognitiveSpeech.RecognitionCompletionStatus[listeningStarted.Status];\n        }\n      } else {\n        this.emit('start');\n\n        const connectingToService = await promises.connectingToService;\n\n        this.emitCognitiveServices('connectingToService', connectingToService);\n\n        const recognitionStarted = await Promise.race([\n          promises.recognitionStarted,\n          promises.recognitionEnded\n        ]);\n\n        this.emitCognitiveServices(\n          recognitionStarted.Name === 'RecognitionEndedEvent' ? 'recognitionEnded' : 'recognitionStarted',\n          recognitionStarted\n        );\n\n        this.emit('audiostart');\n\n        if (recognitionStarted.Name === 'RecognitionEndedEvent') {\n          // Possibly network error\n          if (recognitionStarted.Status === CognitiveSpeech.RecognitionCompletionStatus.ConnectError) {\n            error = 'network';\n          } else {\n            error = CognitiveSpeech.RecognitionCompletionStatus[recognitionStarted.Status];\n          }\n        } else {\n          let gotFirstHypothesis;\n\n          for (;;) {\n            const speechHypothesis = await Promise.race([\n              promises.getSpeechHypothesisPromise(),\n              promises.speechEndDetected\n            ]);\n\n            this.emitCognitiveServices(\n              speechHypothesis.Name === 'SpeechEndDetectedEvent' ? 'speechEndDetected' : 'speechHypothesis',\n              speechHypothesis\n            );\n\n            if (speechHypothesis.Name === 'SpeechEndDetectedEvent') {\n              break;\n            }\n\n            if (!gotFirstHypothesis) {\n              gotFirstHypothesis = true;\n              this.emit('soundstart');\n              this.emit('speechstart');\n            }\n\n            this.emit('result', buildSpeechResult(speechHypothesis.Result.Text, .5, false));\n          }\n\n          if (gotFirstHypothesis) {\n            this.emit('speechend');\n            this.emit('soundend');\n          }\n        }\n\n        this.emit('audioend');\n\n        if (this._aborted) {\n          error = 'aborted';\n\n          const recognitionEnded = await promises.recognitionEnded;\n\n          this.emitCognitiveServices('recognitionEnded', recognitionEnded);\n        } else {\n          const speechDetailedPhrase = await Promise.race([\n            promises.speechDetailedPhrase,\n            promises.recognitionEnded\n          ]);\n\n          this.emitCognitiveServices(\n            speechDetailedPhrase.Name === 'RecognitionEndedEvent' ? 'recognitionEnded' : 'speechDetailedPhrase',\n            speechDetailedPhrase\n          );\n\n          if (speechDetailedPhrase.Name !== 'RecognitionEndedEvent') {\n            const recognitionResult = CognitiveSpeech.RecognitionStatus[speechDetailedPhrase.Result.RecognitionStatus];\n\n            if (recognitionResult === CognitiveSpeech.RecognitionStatus.Success) {\n              // TODO: [P2] Support maxAlternatives\n              const best = speechDetailedPhrase.Result.NBest[0];\n\n              this.emit(\n                'result',\n                buildSpeechResult(\n                  textNormalization === 'itn' ?\n                    best.ITN\n                  : textNormalization === 'lexical' ?\n                    best.Lexical\n                  : textNormalization === 'maskeditn' ?\n                    best.MaskedITN\n                  :\n                    best.Display,\n                  best.Confidence,\n                  true\n                )\n              );\n            } else if (recognitionResult !== CognitiveSpeech.RecognitionStatus.NoMatch) {\n              // Possibly silent or muted\n              if (recognitionResult === CognitiveSpeech.RecognitionStatus.InitialSilenceTimeout) {\n                error = 'no-speech';\n              } else {\n                error = speechDetailedPhrase.Result.RecognitionStatus;\n              }\n            }\n\n            const recognitionEnded = await promises.recognitionEnded;\n\n            this.emitCognitiveServices('recognitionEnded', recognitionEnded);\n          }\n        }\n      }\n\n      error && this.emit('error', { error });\n      this.emit('end');\n    }\n  }\n\n  return {\n    SpeechGrammarList,\n    SpeechRecognition\n  };\n}\n\nfunction toPromise() {\n  const events = {\n    ConnectingToServiceEvent: new EventAsPromise(),\n    ListeningStartedEvent: new EventAsPromise(),\n    RecognitionEndedEvent: new EventAsPromise(),\n    RecognitionStartedEvent: new EventAsPromise(),\n    RecognitionTriggeredEvent: new EventAsPromise(),\n    SpeechDetailedPhraseEvent: new EventAsPromise(),\n    SpeechEndDetectedEvent: new EventAsPromise(),\n    SpeechHypothesisEvent: new EventAsPromise(),\n    SpeechSimplePhraseEvent: new EventAsPromise(),\n    SpeechStartDetectedEvent: new EventAsPromise()\n  };\n\n  return {\n    connectingToService: events.ConnectingToServiceEvent.upcoming(),\n    listeningStarted: events.ListeningStartedEvent.upcoming(),\n    recognitionEnded: events.RecognitionEndedEvent.upcoming(),\n    recognitionStarted: events.RecognitionStartedEvent.upcoming(),\n    recognitionTriggered: events.RecognitionTriggeredEvent.upcoming(),\n    speechDetailedPhrase: events.SpeechDetailedPhraseEvent.upcoming(),\n    speechEndDetected: events.SpeechEndDetectedEvent.upcoming(),\n    getSpeechHypothesisPromise: () => events.SpeechHypothesisEvent.upcoming(),\n    speechSimplePhrase: events.SpeechSimplePhraseEvent.upcoming(),\n    speechStartDetected: events.SpeechStartDetectedEvent.upcoming(),\n    eventListener: event => {\n      const { Name: name } = event;\n      const eventAsPromise = events[name];\n\n      if (eventAsPromise) {\n        eventAsPromise.eventListener.call(null, event);\n      } else {\n        console.warn(`Unexpected event \\\"${ name }\\\" from Cognitive Services, please file a bug to https://github.com/compulim/web-speech-cognitive-services`);\n      }\n    }\n  };\n}\n"],"file":"createSpeechRecognitionPonyfill.js"}