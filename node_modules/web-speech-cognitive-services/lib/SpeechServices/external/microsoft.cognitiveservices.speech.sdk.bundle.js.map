{"version":3,"sources":["webpack:/webpack/bootstrap 0e2ea1186289b12c3b9d","webpack:///src/sdk/Exports.ts","webpack:///src/common/Exports.ts","webpack:///src/common.speech/Exports.ts","webpack:///src/common/Error.ts","webpack:///src/sdk/Contracts.ts","webpack:///src/common/Guid.ts","webpack:///src/common.browser/Exports.ts","webpack:///src/common/PlatformEvent.ts","webpack:///src/common.speech/TranslationStatus.ts","webpack:///src/common.speech/IAuthentication.ts","webpack:///src/common.speech/RecognitionEvents.ts","webpack:///src/common/ConnectionMessage.ts","webpack:///src/common/EventSource.ts","webpack:///src/common/InMemoryStorage.ts","webpack:///src/common/List.ts","webpack:///src/common/Promise.ts","webpack:///src/common/Queue.ts","webpack:///src/sdk/Audio/AudioInputStream.ts","webpack:///src/sdk/Audio/AudioStreamFormat.ts","webpack:///src/common.speech/SpeechConnectionFactory.ts","webpack:///src/common.browser/WebsocketMessageAdapter.ts","webpack:///bundleApp.js","webpack:///microsoft.cognitiveservices.speech.sdk.ts","webpack:///src/common.browser/ConsoleLoggingListener.ts","webpack:///src/common/AudioSourceEvents.ts","webpack:///src/common/ConnectionEvents.ts","webpack:///src/common/ConnectionOpenResponse.ts","webpack:///src/common/Events.ts","webpack:///src/common/IConnection.ts","webpack:///src/common/RawWebsocketMessage.ts","webpack:///src/common/RiffPcmEncoder.ts","webpack:///src/common/Storage.ts","webpack:///src/common/Stream.ts","webpack:///src/common.browser/LocalStorage.ts","webpack:///src/common.browser/MicAudioSource.ts","webpack:///src/sdk/Audio/AudioConfig.ts","webpack:///src/sdk/CancellationReason.ts","webpack:///src/sdk/Audio/PullAudioInputStreamCallback.ts","webpack:///src/sdk/KeywordRecognitionModel.ts","webpack:///src/sdk/SessionEventArgs.ts","webpack:///src/sdk/RecognitionEventArgs.ts","webpack:///src/sdk/OutputFormat.ts","webpack:///src/sdk/IntentRecognitionEventArgs.ts","webpack:///src/sdk/RecognitionResult.ts","webpack:///src/sdk/SpeechRecognitionResult.ts","webpack:///src/sdk/IntentRecognitionResult.ts","webpack:///src/sdk/LanguageUnderstandingModel.ts","webpack:///src/sdk/SpeechRecognitionEventArgs.ts","webpack:///src/sdk/SpeechRecognitionCanceledEventArgs.ts","webpack:///src/sdk/TranslationRecognitionEventArgs.ts","webpack:///src/sdk/TranslationSynthesisEventArgs.ts","webpack:///src/sdk/TranslationRecognitionResult.ts","webpack:///src/sdk/TranslationSynthesisResult.ts","webpack:///src/sdk/ResultReason.ts","webpack:///src/sdk/SpeechConfig.ts","webpack:///src/common.speech/CognitiveSubscriptionKeyAuthentication.ts","webpack:///src/common.speech/CognitiveTokenAuthentication.ts","webpack:///src/common.speech/IntentConnectionFactory.ts","webpack:///src/common.speech/ServiceRecognizerBase.ts","webpack:///src/common.speech/SpeechConnectionMessage.Internal.ts","webpack:///src/common.speech/RecognizerConfig.ts","webpack:///src/common.speech/WebsocketMessageFormatter.ts","webpack:///src/common.speech/QueryParameterNames.ts","webpack:///src/common.speech/TranslationConnectionFactory.ts","webpack:///src/common.speech/EnumTranslation.ts","webpack:///src/common.speech/ServiceMessages/Enums.ts","webpack:///src/common.speech/ServiceMessages/TranslationSynthesisEnd.ts","webpack:///src/common.speech/ServiceMessages/TranslationHypothesis.ts","webpack:///src/common.speech/ServiceMessages/TranslationPhrase.ts","webpack:///src/common.speech/TranslationServiceRecognizer.ts","webpack:///src/common.speech/ServiceMessages/SpeechDetected.ts","webpack:///src/common.speech/ServiceMessages/SpeechHypothesis.ts","webpack:///src/common.speech/SpeechServiceRecognizer.ts","webpack:///src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts","webpack:///src/common.speech/ServiceMessages/SimpleSpeechPhrase.ts","webpack:///src/common.speech/AddedLmIntent.ts","webpack:///src/common.speech/IntentServiceRecognizer.ts","webpack:///src/common.speech/ServiceMessages/IntentResponse.ts","webpack:///src/common.speech/RequestSession.ts","webpack:///src/common.speech/ServiceTelemetryListener.Internal.ts","webpack:///src/sdk/SpeechTranslationConfig.ts","webpack:///src/sdk/PropertyCollection.ts","webpack:///src/sdk/PropertyId.ts","webpack:///src/sdk/Recognizer.ts","webpack:///src/sdk/SpeechRecognizer.ts","webpack:///src/sdk/IntentRecognizer.ts","webpack:///src/sdk/TranslationRecognizer.ts","webpack:///src/sdk/Translations.ts","webpack:///src/sdk/NoMatchReason.ts","webpack:///src/sdk/NoMatchDetails.ts","webpack:///src/sdk/TranslationRecognitionCanceledEventArgs.ts","webpack:///src/sdk/IntentRecognitionCanceledEventArgs.ts","webpack:///src/sdk/CancellationDetails.ts","webpack:///src/sdk/CancellationErrorCodes.ts","webpack:///src/common.browser/FileAudioSource.ts","webpack:///src/common.browser/OpusRecorder.ts","webpack:///src/common.browser/PCMRecorder.ts","webpack:///src/common.browser/SessionStorage.ts","webpack:///src/common.browser/Timer.ts","webpack:///src/common.browser/WebsocketConnection.ts"],"names":[],"mappings":"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","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0e2ea1186289b12c3b9d","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nexport { AudioConfig } from \"./Audio/AudioConfig\";\r\nexport { AudioStreamFormat } from \"./Audio/AudioStreamFormat\";\r\nexport { AudioInputStream, PullAudioInputStream, PushAudioInputStream } from \"./Audio/AudioInputStream\";\r\nexport { CancellationReason } from \"./CancellationReason\";\r\nexport { PullAudioInputStreamCallback } from \"./Audio/PullAudioInputStreamCallback\";\r\nexport { KeywordRecognitionModel } from \"./KeywordRecognitionModel\";\r\nexport { SessionEventArgs } from \"./SessionEventArgs\";\r\nexport { RecognitionEventArgs } from \"./RecognitionEventArgs\";\r\nexport { OutputFormat } from \"./OutputFormat\";\r\nexport { IntentRecognitionEventArgs } from \"./IntentRecognitionEventArgs\";\r\nexport { RecognitionResult } from \"./RecognitionResult\";\r\nexport { SpeechRecognitionResult } from \"./SpeechRecognitionResult\";\r\nexport { IntentRecognitionResult } from \"./IntentRecognitionResult\";\r\nexport { LanguageUnderstandingModel } from \"./LanguageUnderstandingModel\";\r\nexport { SpeechRecognitionEventArgs } from \"./SpeechRecognitionEventArgs\";\r\nexport { SpeechRecognitionCanceledEventArgs } from \"./SpeechRecognitionCanceledEventArgs\";\r\nexport { TranslationRecognitionEventArgs } from \"./TranslationRecognitionEventArgs\";\r\nexport { TranslationSynthesisEventArgs } from \"./TranslationSynthesisEventArgs\";\r\nexport { TranslationRecognitionResult } from \"./TranslationRecognitionResult\";\r\nexport { TranslationSynthesisResult } from \"./TranslationSynthesisResult\";\r\nexport { ResultReason } from \"./ResultReason\";\r\nexport { SpeechConfig } from \"./SpeechConfig\";\r\nexport { SpeechTranslationConfig } from \"./SpeechTranslationConfig\";\r\nexport { PropertyCollection } from \"./PropertyCollection\";\r\nexport { PropertyId } from \"./PropertyId\";\r\nexport { Recognizer } from \"./Recognizer\";\r\nexport { SpeechRecognizer } from \"./SpeechRecognizer\";\r\nexport { IntentRecognizer } from \"./IntentRecognizer\";\r\nexport { TranslationRecognizer } from \"./TranslationRecognizer\";\r\nexport { Translations } from \"./Translations\";\r\nexport { NoMatchReason } from \"./NoMatchReason\";\r\nexport { NoMatchDetails } from \"./NoMatchDetails\";\r\nexport { TranslationRecognitionCanceledEventArgs } from \"./TranslationRecognitionCanceledEventArgs\";\r\nexport { IntentRecognitionCanceledEventArgs } from \"./IntentRecognitionCanceledEventArgs\";\r\nexport { CancellationDetails } from \"./CancellationDetails\";\r\nexport { CancellationErrorCode } from \"./CancellationErrorCodes\";\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/Exports.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nexport * from \"./AudioSourceEvents\";\r\nexport * from \"./ConnectionEvents\";\r\nexport * from \"./ConnectionMessage\";\r\nexport * from \"./ConnectionOpenResponse\";\r\nexport * from \"./Error\";\r\nexport * from \"./Events\";\r\nexport * from \"./EventSource\";\r\nexport * from \"./Guid\";\r\nexport * from \"./IAudioSource\";\r\nexport * from \"./IConnection\";\r\nexport * from \"./IDetachable\";\r\nexport * from \"./IDictionary\";\r\nexport * from \"./IDisposable\";\r\nexport * from \"./IEventSource\";\r\nexport * from \"./IKeyValueStorage\";\r\nexport * from \"./InMemoryStorage\";\r\nexport * from \"./ITimer\";\r\nexport * from \"./IWebsocketMessageFormatter\";\r\nexport * from \"./List\";\r\nexport * from \"./PlatformEvent\";\r\nexport * from \"./Promise\";\r\nexport * from \"./Queue\";\r\nexport * from \"./RawWebsocketMessage\";\r\nexport * from \"./RiffPcmEncoder\";\r\nexport * from \"./Storage\";\r\nexport * from \"./Stream\";\r\nexport { TranslationStatus } from \"../common.speech/TranslationStatus\";\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/Exports.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n// IMPORTANT - Dont publish internal modules.\r\n\r\nexport * from \"./CognitiveSubscriptionKeyAuthentication\";\r\nexport * from \"./CognitiveTokenAuthentication\";\r\nexport * from \"./IAuthentication\";\r\nexport * from \"./IConnectionFactory\";\r\nexport * from \"./IntentConnectionFactory\";\r\nexport * from \"./RecognitionEvents\";\r\nexport * from \"./ServiceRecognizerBase\";\r\nexport * from \"./RecognizerConfig\";\r\nexport * from \"./SpeechServiceInterfaces\";\r\nexport * from \"./WebsocketMessageFormatter\";\r\nexport * from \"./SpeechConnectionFactory\";\r\nexport * from \"./TranslationConnectionFactory\";\r\nexport * from \"./EnumTranslation\";\r\nexport * from \"./ServiceMessages/Enums\";\r\nexport * from \"./ServiceMessages/TranslationSynthesisEnd\";\r\nexport * from \"./ServiceMessages/TranslationHypothesis\";\r\nexport * from \"./ServiceMessages/TranslationPhrase\";\r\nexport * from \"./TranslationServiceRecognizer\";\r\nexport * from \"./ServiceMessages/SpeechDetected\";\r\nexport * from \"./ServiceMessages/SpeechHypothesis\";\r\nexport * from \"./SpeechServiceRecognizer\";\r\nexport * from \"./ServiceMessages/DetailedSpeechPhrase\";\r\nexport * from \"./ServiceMessages/SimpleSpeechPhrase\";\r\nexport * from \"./AddedLmIntent\";\r\nexport * from \"./IntentServiceRecognizer\";\r\nexport * from \"./ServiceMessages/IntentResponse\";\r\nexport * from \"./RequestSession\";\r\n\r\nexport const OutputFormatPropertyName: string = \"OutputFormat\";\r\nexport const CancellationErrorCodePropertyName: string = \"CancellationErrorCode\";\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/Exports.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class ArgumentNullError\r\n * @extends {Error}\r\n */\r\nexport class ArgumentNullError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ArgumentNullError.\r\n     *\r\n     * @param {string} argumentName - Name of the argument that is null\r\n     *\r\n     * @memberOf ArgumentNullError\r\n     */\r\n    public constructor(argumentName: string) {\r\n        super(argumentName);\r\n        this.name = \"ArgumentNull\";\r\n        this.message = argumentName;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an invalid operation is performed in the code.\r\n *\r\n * @export\r\n * @class InvalidOperationError\r\n * @extends {Error}\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class InvalidOperationError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of InvalidOperationError.\r\n     *\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf InvalidOperationError\r\n     */\r\n    public constructor(error: string) {\r\n        super(error);\r\n        this.name = \"InvalidOperation\";\r\n        this.message = error;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an object is disposed.\r\n *\r\n * @export\r\n * @class ObjectDisposedError\r\n * @extends {Error}\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ObjectDisposedError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ObjectDisposedError.\r\n     *\r\n     * @param {string} objectName - The object that is disposed\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf ObjectDisposedError\r\n     */\r\n    public constructor(objectName: string, error?: string) {\r\n        super(error);\r\n        this.name = objectName + \"ObjectDisposed\";\r\n        this.message = error;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/Error.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * @class Contracts\r\n * @private\r\n */\r\nexport class Contracts {\r\n    public static throwIfNullOrUndefined(param: any, name: string): void {\r\n        if (param === undefined || param === null) {\r\n            throw new Error(\"throwIfNullOrUndefined:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNull(param: any, name: string): void {\r\n        if (param === null) {\r\n            throw new Error(\"throwIfNull:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrWhitespace(param: string, name: string): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).trim().length < 1) {\r\n            throw new Error(\"throwIfNullOrWhitespace:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfDisposed(isDisposed: boolean): void {\r\n        if (isDisposed) {\r\n            throw new Error(\"the object is already disposed\");\r\n        }\r\n    }\r\n\r\n    public static throwIfArrayEmptyOrWhitespace(array: string[], name: string): void {\r\n        Contracts.throwIfNullOrUndefined(array, name);\r\n\r\n        if (array.length === 0) {\r\n            throw new Error(\"throwIfArrayEmptyOrWhitespace:\" + name);\r\n        }\r\n\r\n        for (const item of array) {\r\n            Contracts.throwIfNullOrWhitespace(item, name);\r\n        }\r\n    }\r\n\r\n    public static throwIfFileDoesNotExist(param: any, name: string): void {\r\n        Contracts.throwIfNullOrWhitespace(param, name);\r\n\r\n        // TODO check for file existence.\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/Contracts.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nconst CreateGuid: () => string = (): string => {\r\n    let d = new Date().getTime();\r\n    const guid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c: string) => {\r\n        const r = (d + Math.random() * 16) % 16 | 0;\r\n        d = Math.floor(d / 16);\r\n        return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\r\n    });\r\n\r\n    return guid;\r\n};\r\n\r\nconst CreateNoDashGuid: () => string = (): string => {\r\n    return CreateGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\r\n};\r\n\r\nexport { CreateGuid, CreateNoDashGuid };\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/Guid.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nexport * from \"./ConsoleLoggingListener\";\r\nexport * from \"./IRecorder\";\r\nexport * from \"./LocalStorage\";\r\nexport * from \"./MicAudioSource\";\r\nexport * from \"./FileAudioSource\";\r\nexport * from \"./OpusRecorder\";\r\nexport * from \"./PCMRecorder\";\r\nexport * from \"./SessionStorage\";\r\nexport * from \"./Timer\";\r\nexport * from \"./WebsocketConnection\";\r\nexport * from \"./WebsocketMessageAdapter\";\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/Exports.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { CreateNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum EventType {\r\n    Debug,\r\n    Info,\r\n    Warning,\r\n    Error,\r\n}\r\n\r\nexport class PlatformEvent {\r\n    private name: string;\r\n    private eventId: string;\r\n    private eventTime: string;\r\n    private eventType: EventType;\r\n    private metadata: IStringDictionary<string>;\r\n\r\n    constructor(eventName: string, eventType: EventType) {\r\n        this.name = eventName;\r\n        this.eventId = CreateNoDashGuid();\r\n        this.eventTime = new Date().toISOString();\r\n        this.eventType = eventType;\r\n        this.metadata = { };\r\n    }\r\n\r\n    public get Name(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public get EventId(): string {\r\n        return this.eventId;\r\n    }\r\n\r\n    public get EventTime(): string {\r\n        return this.eventTime;\r\n    }\r\n\r\n    public get EventType(): EventType {\r\n        return this.eventType;\r\n    }\r\n\r\n    public get Metadata(): IStringDictionary<string> {\r\n        return this.metadata;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/PlatformEvent.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Defines translation status.\r\n * @class TranslationStatus\r\n */\r\nexport enum TranslationStatus {\r\n    /**\r\n     * @member TranslationStatus.Success\r\n     */\r\n    Success = 0,\r\n\r\n    /**\r\n     * @member TranslationStatus.Error\r\n     */\r\n    Error,\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/TranslationStatus.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { Promise } from \"../common/Exports\";\r\n\r\nexport interface IAuthentication {\r\n    Fetch(authFetchEventId: string): Promise<AuthInfo>;\r\n    FetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\r\n}\r\n\r\nexport class AuthInfo {\r\n    private headerName: string;\r\n    private token: string;\r\n\r\n    public constructor(headerName: string, token: string) {\r\n        this.headerName = headerName;\r\n        this.token = token;\r\n    }\r\n\r\n    public get HeaderName(): string {\r\n        return this.headerName;\r\n    }\r\n\r\n    public get Token(): string {\r\n        return this.token;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/IAuthentication.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    EventType,\r\n    PlatformEvent,\r\n} from \"../common/Exports\";\r\n\r\nexport class SpeechRecognitionEvent extends PlatformEvent {\r\n    private requestId: string;\r\n    private sessionId: string;\r\n\r\n    constructor(eventName: string, requestId: string, sessionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.requestId = requestId;\r\n        this.sessionId = sessionId;\r\n    }\r\n\r\n    public get RequestId(): string {\r\n        return this.requestId;\r\n    }\r\n\r\n    public get SessionId(): string {\r\n        return this.sessionId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n\r\n    constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"RecognitionTriggeredEvent\", requestId, sessionId);\r\n\r\n        this.audioSourceId = audioSourceId;\r\n        this.audioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get AudioSourceId(): string {\r\n        return this.audioSourceId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n\r\n    constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"ListeningStartedEvent\", requestId, sessionId);\r\n        this.audioSourceId = audioSourceId;\r\n        this.audioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get AudioSourceId(): string {\r\n        return this.audioSourceId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\r\n    private authFetchEventid: string;\r\n\r\n    constructor(requestId: string, authFetchEventid: string, sessionId: string) {\r\n        super(\"ConnectingToServiceEvent\", requestId, sessionId);\r\n        this.authFetchEventid = authFetchEventid;\r\n    }\r\n\r\n    public get AuthFetchEventid(): string {\r\n        return this.authFetchEventid;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n    private authFetchEventId: string;\r\n\r\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, sessionId: string) {\r\n        super(\"RecognitionStartedEvent\", requestId, sessionId);\r\n\r\n        this.audioSourceId = audioSourceId;\r\n        this.audioNodeId = audioNodeId;\r\n        this.authFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get AudioSourceId(): string {\r\n        return this.audioSourceId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n\r\n    public get AuthFetchEventId(): string {\r\n        return this.authFetchEventId;\r\n    }\r\n}\r\n\r\nexport enum RecognitionCompletionStatus {\r\n    Success,\r\n    AudioSourceError,\r\n    AudioSourceTimeout,\r\n    AuthTokenFetchError,\r\n    AuthTokenFetchTimeout,\r\n    UnAuthorized,\r\n    ConnectTimeout,\r\n    ConnectError,\r\n    ClientRecognitionActivityTimeout,\r\n    UnknownError,\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n    private authFetchEventId: string;\r\n    private serviceTag: string;\r\n    private status: RecognitionCompletionStatus;\r\n    private error: string;\r\n\r\n    constructor(\r\n        requestId: string,\r\n        audioSourceId: string,\r\n        audioNodeId: string,\r\n        authFetchEventId: string,\r\n        sessionId: string,\r\n        serviceTag: string,\r\n        status: RecognitionCompletionStatus,\r\n        error: string) {\r\n\r\n        super(\"RecognitionEndedEvent\", requestId, sessionId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\r\n\r\n        this.audioSourceId = audioSourceId;\r\n        this.audioNodeId = audioNodeId;\r\n        this.authFetchEventId = authFetchEventId;\r\n        this.status = status;\r\n        this.error = error;\r\n        this.serviceTag = serviceTag;\r\n    }\r\n\r\n    public get AudioSourceId(): string {\r\n        return this.audioSourceId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n\r\n    public get AuthFetchEventId(): string {\r\n        return this.authFetchEventId;\r\n    }\r\n\r\n    public get ServiceTag(): string {\r\n        return this.serviceTag;\r\n    }\r\n\r\n    public get Status(): RecognitionCompletionStatus {\r\n        return this.status;\r\n    }\r\n\r\n    public get Error(): string {\r\n        return this.error;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/RecognitionEvents.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { CreateNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private messageType: MessageType;\r\n    private headers: IStringDictionary<string>;\r\n    private body: any = null;\r\n\r\n    private id: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.messageType = messageType;\r\n        this.body = body;\r\n        this.headers = headers ? headers : {};\r\n        this.id = id ? id : CreateNoDashGuid();\r\n    }\r\n\r\n    public get MessageType(): MessageType {\r\n        return this.messageType;\r\n    }\r\n\r\n    public get Headers(): any {\r\n        return this.headers;\r\n    }\r\n\r\n    public get Body(): any {\r\n        return this.body;\r\n    }\r\n\r\n    public get TextBody(): string {\r\n        if (this.messageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.body as string;\r\n    }\r\n\r\n    public get BinaryBody(): ArrayBuffer {\r\n        if (this.messageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.body;\r\n    }\r\n\r\n    public get Id(): string {\r\n        return this.id;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/ConnectionMessage.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { CreateNoDashGuid } from \"./Guid\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IEventListener, IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private eventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private metadata: IStringDictionary<string>;\r\n    private isDisposed: boolean = false;\r\n\r\n    constructor(metadata?: IStringDictionary<string>) {\r\n        this.metadata = metadata;\r\n    }\r\n\r\n    public OnEvent = (event: TEvent): void => {\r\n        if (this.IsDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.Metadata) {\r\n            for (const paramName in this.Metadata) {\r\n                if (paramName) {\r\n                    if (event.Metadata) {\r\n                        if (!event.Metadata[paramName]) {\r\n                            event.Metadata[paramName] = this.Metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.eventListeners) {\r\n            if (eventId && this.eventListeners[eventId]) {\r\n                this.eventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public Attach = (onEventCallback: (event: TEvent) => void): IDetachable => {\r\n        const id = CreateNoDashGuid();\r\n        this.eventListeners[id] = onEventCallback;\r\n        return {\r\n            Detach: () => {\r\n                delete this.eventListeners[id];\r\n            },\r\n        };\r\n    }\r\n\r\n    public AttachListener = (listener: IEventListener<TEvent>): IDetachable => {\r\n        return this.Attach(listener.OnEvent);\r\n    }\r\n\r\n    public IsDisposed = (): boolean => {\r\n        return this.isDisposed;\r\n    }\r\n\r\n    public Dispose = (): void => {\r\n        this.eventListeners = null;\r\n        this.isDisposed = true;\r\n    }\r\n\r\n    public get Metadata(): IStringDictionary<string> {\r\n        return this.metadata;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/EventSource.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError } from \"./Error\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IKeyValueStorage } from \"./IKeyValueStorage\";\r\n\r\nexport class InMemoryStorage implements IKeyValueStorage {\r\n\r\n    private store: IStringDictionary<string> = {};\r\n\r\n    public Get = (key: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        return this.store[key];\r\n    }\r\n\r\n    public GetOrAdd = (key: string, valueToAdd: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        if (this.store[key] === undefined) {\r\n            this.store[key] = valueToAdd;\r\n        }\r\n\r\n        return this.store[key];\r\n    }\r\n\r\n    public Set = (key: string, value: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        this.store[key] = value;\r\n    }\r\n\r\n    public Remove = (key: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        if (this.store[key] !== undefined) {\r\n            delete this.store[key];\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/InMemoryStorage.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IDisposable } from \"./IDisposable\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    Get(itemIndex: number): TItem;\r\n    First(): TItem;\r\n    Last(): TItem;\r\n\r\n    Add(item: TItem): void;\r\n    InsertAt(index: number, item: TItem): void;\r\n\r\n    RemoveFirst(): TItem;\r\n    RemoveLast(): TItem;\r\n    RemoveAt(index: number): TItem;\r\n    Remove(index: number, count: number): TItem[];\r\n    Clear(): void;\r\n\r\n    Length(): number;\r\n\r\n    OnAdded(addedCallback: () => void): IDetachable;\r\n    OnRemoved(removedCallback: () => void): IDetachable;\r\n    OnDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    Join(seperator?: string): string;\r\n\r\n    ToArray(): TItem[];\r\n\r\n    Any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    All(callback: (item: TItem) => boolean): boolean;\r\n    ForEach(callback: (item: TItem, index: number) => void): void;\r\n    Select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    Where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    OrderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    OrderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    Clone(): List<TItem>;\r\n    Concat(list: List<TItem>): List<TItem>;\r\n    ConcatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private list: TItem[];\r\n    private subscriptionIdCounter: number = 0;\r\n    private addSubscriptions: IStringDictionary<() => void> = {};\r\n    private removeSubscriptions: IStringDictionary<() => void> = {};\r\n    private disposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private disposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.list = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.list.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public Get = (itemIndex: number): TItem => {\r\n        this.ThrowIfDisposed();\r\n        return this.list[itemIndex];\r\n    }\r\n\r\n    public First = (): TItem => {\r\n        return this.Get(0);\r\n    }\r\n\r\n    public Last = (): TItem => {\r\n        return this.Get(this.Length() - 1);\r\n    }\r\n\r\n    public Add = (item: TItem): void => {\r\n        this.ThrowIfDisposed();\r\n        this.InsertAt(this.list.length, item);\r\n    }\r\n\r\n    public InsertAt = (index: number, item: TItem): void => {\r\n        this.ThrowIfDisposed();\r\n        if (index === 0) {\r\n            this.list.unshift(item);\r\n        } else if (index === this.list.length) {\r\n            this.list.push(item);\r\n        } else {\r\n            this.list.splice(index, 0, item);\r\n        }\r\n        this.TriggerSubscriptions(this.addSubscriptions);\r\n    }\r\n\r\n    public RemoveFirst = (): TItem => {\r\n        this.ThrowIfDisposed();\r\n        return this.RemoveAt(0);\r\n    }\r\n\r\n    public RemoveLast = (): TItem => {\r\n        this.ThrowIfDisposed();\r\n        return this.RemoveAt(this.Length() - 1);\r\n    }\r\n\r\n    public RemoveAt = (index: number): TItem => {\r\n        this.ThrowIfDisposed();\r\n        return this.Remove(index, 1)[0];\r\n    }\r\n\r\n    public Remove = (index: number, count: number): TItem[] => {\r\n        this.ThrowIfDisposed();\r\n        const removedElements = this.list.splice(index, count);\r\n        this.TriggerSubscriptions(this.removeSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public Clear = (): void => {\r\n        this.ThrowIfDisposed();\r\n        this.Remove(0, this.Length());\r\n    }\r\n\r\n    public Length = (): number => {\r\n        this.ThrowIfDisposed();\r\n        return this.list.length;\r\n    }\r\n\r\n    public OnAdded = (addedCallback: () => void): IDetachable => {\r\n        this.ThrowIfDisposed();\r\n        const subscriptionId = this.subscriptionIdCounter++;\r\n\r\n        this.addSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            Detach: () => {\r\n                delete this.addSubscriptions[subscriptionId];\r\n            },\r\n        };\r\n    }\r\n\r\n    public OnRemoved = (removedCallback: () => void): IDetachable => {\r\n        this.ThrowIfDisposed();\r\n        const subscriptionId = this.subscriptionIdCounter++;\r\n\r\n        this.removeSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            Detach: () => {\r\n                delete this.removeSubscriptions[subscriptionId];\r\n            },\r\n        };\r\n    }\r\n\r\n    public OnDisposed = (disposedCallback: () => void): IDetachable => {\r\n        this.ThrowIfDisposed();\r\n        const subscriptionId = this.subscriptionIdCounter++;\r\n\r\n        this.disposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            Detach: () => {\r\n                delete this.disposedSubscriptions[subscriptionId];\r\n            },\r\n        };\r\n    }\r\n\r\n    public Join = (seperator?: string): string => {\r\n        this.ThrowIfDisposed();\r\n        return this.list.join(seperator);\r\n    }\r\n\r\n    public ToArray = (): TItem[] => {\r\n        const cloneCopy = Array<TItem>();\r\n        this.list.forEach((val: TItem) => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public Any = (callback?: (item: TItem, index: number) => boolean): boolean => {\r\n        this.ThrowIfDisposed();\r\n        if (callback) {\r\n            return this.Where(callback).Length() > 0;\r\n        } else {\r\n            return this.Length() > 0;\r\n        }\r\n    }\r\n\r\n    public All = (callback: (item: TItem) => boolean): boolean => {\r\n        this.ThrowIfDisposed();\r\n        return this.Where(callback).Length() === this.Length();\r\n    }\r\n\r\n    public ForEach = (callback: (item: TItem, index: number) => void): void => {\r\n        this.ThrowIfDisposed();\r\n        for (let i = 0; i < this.Length(); i++) {\r\n            callback(this.list[i], i);\r\n        }\r\n    }\r\n\r\n    public Select = <T2>(callback: (item: TItem, index: number) => T2): List<T2> => {\r\n        this.ThrowIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            selectList.push(callback(this.list[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public Where = (callback: (item: TItem, index: number) => boolean): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            if (callback(this.list[i], i)) {\r\n                filteredList.Add(this.list[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public OrderBy = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        const clonedArray = this.ToArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public OrderByDesc = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        return this.OrderBy((a: TItem, b: TItem) => compareFn(b, a));\r\n    }\r\n\r\n    public Clone = (): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        return new List<TItem>(this.ToArray());\r\n    }\r\n\r\n    public Concat = (list: List<TItem>): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        return new List<TItem>(this.list.concat(list.ToArray()));\r\n    }\r\n\r\n    public ConcatArray = (array: TItem[]): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        return new List<TItem>(this.list.concat(array));\r\n    }\r\n\r\n    public IsDisposed = (): boolean => {\r\n        return this.list == null;\r\n    }\r\n\r\n    public Dispose = (reason?: string): void => {\r\n        if (!this.IsDisposed()) {\r\n            this.disposeReason = reason;\r\n            this.list = null;\r\n            this.addSubscriptions = null;\r\n            this.removeSubscriptions = null;\r\n            this.TriggerSubscriptions(this.disposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private ThrowIfDisposed = (): void => {\r\n        if (this.IsDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.disposeReason);\r\n        }\r\n    }\r\n\r\n    private TriggerSubscriptions = (subscriptions: IStringDictionary<() => void>): void => {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/List.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError  } from \"./Error\";\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IPromise<T> {\r\n    Result(): PromiseResult<T>;\r\n\r\n    ContinueWith<TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n    ContinueWithPromise<TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n    OnSuccessContinueWith<TContinuationResult>(\r\n        continuationCallback: (result: T) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n    OnSuccessContinueWithPromise<TContinuationResult>(\r\n        continuationCallback: (result: T) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n    On(successCallback: (result: T) => void, errorCallback: (error: string) => void): IPromise<T>;\r\n\r\n    Finally(callback: () => void): IPromise<T>;\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    State(): PromiseState;\r\n\r\n    Promise(): IPromise<T>;\r\n\r\n    Resolve(result: T): IDeferred<T>;\r\n\r\n    Reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected isCompleted: boolean;\r\n    protected isError: boolean;\r\n    protected error: string;\r\n    protected result: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.On((result: T) => {\r\n            if (!this.isCompleted) {\r\n                this.isCompleted = true;\r\n                this.isError = false;\r\n                this.result = result;\r\n            }\r\n        }, (error: string) => {\r\n            if (!this.isCompleted) {\r\n                this.isCompleted = true;\r\n                this.isError = true;\r\n                this.error = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get IsCompleted(): boolean {\r\n        return this.isCompleted;\r\n    }\r\n\r\n    public get IsError(): boolean {\r\n        return this.isError;\r\n    }\r\n\r\n    public get Error(): string {\r\n        return this.error;\r\n    }\r\n\r\n    public get Result(): T {\r\n        return this.result;\r\n    }\r\n\r\n    public ThrowIfError = (): void => {\r\n        if (this.IsError) {\r\n            throw this.Error;\r\n        }\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private onSetResult: (result: T) => void;\r\n    private onSetError: (error: string) => void;\r\n\r\n    public SetResult = (result: T): void => {\r\n        this.onSetResult(result);\r\n    }\r\n\r\n    public SetError = (error: string): void => {\r\n        this.onSetError(error);\r\n    }\r\n\r\n    public On = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.onSetResult = onSetResult;\r\n        this.onSetError = onSetError;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PromiseHelper {\r\n    public static WhenAll = (promises: Array<Promise<any>>): Promise<boolean> => {\r\n        if (!promises || promises.length === 0) {\r\n            throw new ArgumentNullError(\"promises\");\r\n        }\r\n\r\n        const deferred = new Deferred<boolean>();\r\n        const errors: string[] = [];\r\n        let completedPromises: number = 0;\r\n\r\n        const checkForCompletion = () => {\r\n            completedPromises++;\r\n            if (completedPromises === promises.length) {\r\n                if (errors.length === 0) {\r\n                    deferred.Resolve(true);\r\n                } else {\r\n                    deferred.Reject(errors.join(\", \"));\r\n                }\r\n            }\r\n        };\r\n\r\n        for (const promise of promises) {\r\n            promise.On((r: any) => {\r\n                checkForCompletion();\r\n            }, (e: string) => {\r\n                errors.push(e);\r\n                checkForCompletion();\r\n            });\r\n        }\r\n\r\n        return deferred.Promise();\r\n    }\r\n\r\n    public static FromResult = <TResult>(result: TResult): Promise<TResult> => {\r\n        const deferred = new Deferred<TResult>();\r\n        deferred.Resolve(result);\r\n        return deferred.Promise();\r\n    }\r\n\r\n    public static FromError = <TResult>(error: string): Promise<TResult> => {\r\n        const deferred = new Deferred<TResult>();\r\n        deferred.Reject(error);\r\n        return deferred.Promise();\r\n    }\r\n}\r\n\r\n// TODO: replace with ES6 promises\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Promise<T> implements IPromise<T> {\r\n\r\n    private sink: Sink<T>;\r\n\r\n    public constructor(sink: Sink<T>) {\r\n        this.sink = sink;\r\n    }\r\n\r\n    public Result = (): PromiseResult<T> => {\r\n        return this.sink.Result;\r\n    }\r\n\r\n    public ContinueWith = <TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.sink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(this.sink.Result);\r\n                    continuationDeferral.Resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(this.sink.Result);\r\n                    continuationDeferral.Resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(`'Error handler for error ${error} threw error ${e}'`);\r\n                }\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.Promise();\r\n    }\r\n\r\n    public OnSuccessContinueWith = <TContinuationResult>(\r\n        continuationCallback: (result: T) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.sink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(r);\r\n                    continuationDeferral.Resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                continuationDeferral.Reject(error);\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.Promise();\r\n    }\r\n\r\n    public ContinueWithPromise = <TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.sink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.sink.Result);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"'Continuation callback did not return promise'\");\r\n                    }\r\n                    continuationPromise.On((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.Resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.Reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.sink.Result);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"Continuation callback did not return promise\");\r\n                    }\r\n                    continuationPromise.On((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.Resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.Reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(`'Error handler for error ${error} threw error ${e}'`);\r\n                }\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.Promise();\r\n    }\r\n\r\n    public OnSuccessContinueWithPromise = <TContinuationResult>(\r\n        continuationCallback: (result: T) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.sink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(r);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"Continuation callback did not return promise\");\r\n                    }\r\n                    continuationPromise.On((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.Resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.Reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                continuationDeferral.Reject(error);\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.Promise();\r\n    }\r\n\r\n    public On = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): Promise<T> => {\r\n        if (!successCallback) {\r\n            throw new ArgumentNullError(\"successCallback\");\r\n        }\r\n\r\n        if (!errorCallback) {\r\n            throw new ArgumentNullError(\"errorCallback\");\r\n        }\r\n\r\n        this.sink.on(successCallback, errorCallback);\r\n        return this;\r\n    }\r\n\r\n    public Finally = (callback: () => void): Promise<T> => {\r\n        if (!callback) {\r\n            throw new ArgumentNullError(\"callback\");\r\n        }\r\n\r\n        const callbackWrapper = (_: any) => {\r\n            callback();\r\n        };\r\n\r\n        return this.On(callbackWrapper, callbackWrapper);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Deferred<T> implements IDeferred<T> {\r\n\r\n    private promise: Promise<T>;\r\n    private sink: Sink<T>;\r\n\r\n    public constructor() {\r\n        this.sink = new Sink<T>();\r\n        this.promise = new Promise<T>(this.sink);\r\n    }\r\n\r\n    public State = (): PromiseState => {\r\n        return this.sink.State;\r\n    }\r\n\r\n    public Promise = (): Promise<T> => {\r\n        return this.promise;\r\n    }\r\n\r\n    public Resolve = (result: T): Deferred<T> => {\r\n        this.sink.Resolve(result);\r\n        return this;\r\n    }\r\n\r\n    public Reject = (error: string): Deferred<T> => {\r\n        this.sink.Reject(error);\r\n        return this;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Sink<T> {\r\n\r\n    private state: PromiseState = PromiseState.None;\r\n    private promiseResult: PromiseResult<T> = null;\r\n    private promiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private successHandlers: Array<((result: T) => void)> = [];\r\n    private errorHandlers: Array<(e: string) => void> = [];\r\n\r\n    public constructor() {\r\n        this.promiseResultEvents = new PromiseResultEventSource();\r\n        this.promiseResult = new PromiseResult(this.promiseResultEvents);\r\n    }\r\n\r\n    public get State(): PromiseState {\r\n        return this.state;\r\n    }\r\n\r\n    public get Result(): PromiseResult<T> {\r\n        return this.promiseResult;\r\n    }\r\n\r\n    public Resolve = (result: T): void => {\r\n        if (this.state !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.state = PromiseState.Resolved;\r\n        this.promiseResultEvents.SetResult(result);\r\n\r\n        for (let i = 0; i < this.successHandlers.length; i++) {\r\n            this.ExecuteSuccessCallback(result, this.successHandlers[i], this.errorHandlers[i]);\r\n        }\r\n\r\n        this.DetachHandlers();\r\n    }\r\n\r\n    public Reject = (error: string): void => {\r\n        if (this.state !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.state = PromiseState.Rejected;\r\n        this.promiseResultEvents.SetError(error);\r\n\r\n        for (const errorHandler of this.errorHandlers) {\r\n            this.ExecuteErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.DetachHandlers();\r\n    }\r\n\r\n    public on = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void => {\r\n\r\n        if (successCallback == null) {\r\n            successCallback = (r: T) => { return; };\r\n        }\r\n\r\n        if (this.state === PromiseState.None) {\r\n            this.successHandlers.push(successCallback);\r\n            this.errorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.state === PromiseState.Resolved) {\r\n                this.ExecuteSuccessCallback(this.promiseResult.Result, successCallback, errorCallback);\r\n            } else if (this.state === PromiseState.Rejected) {\r\n                this.ExecuteErrorCallback(this.promiseResult.Error, errorCallback);\r\n            }\r\n\r\n            this.DetachHandlers();\r\n        }\r\n    }\r\n\r\n    private ExecuteSuccessCallback = (result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void => {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.ExecuteErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private ExecuteErrorCallback = (error: string, errorCallback: (error: string) => void): void => {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private DetachHandlers = (): void => {\r\n        this.errorHandlers = [];\r\n        this.successHandlers = [];\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/Promise.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IDisposable } from \"./IDisposable\";\r\nimport { List } from \"./List\";\r\nimport { Deferred, Promise, PromiseHelper } from \"./Promise\";\r\n\r\nexport interface IQueue<TItem> extends IDisposable {\r\n    Enqueue(item: TItem): void;\r\n    EnqueueFromPromise(promise: Promise<TItem>): void;\r\n    Dequeue(): Promise<TItem>;\r\n    Peek(): Promise<TItem>;\r\n    Length(): number;\r\n}\r\n\r\nenum SubscriberType {\r\n    Dequeue,\r\n    Peek,\r\n}\r\n\r\nexport class Queue<TItem> implements IQueue<TItem> {\r\n    private promiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\r\n    private list: List<TItem>;\r\n    private detachables: IDetachable[];\r\n    private subscribers: List<{ type: SubscriberType, deferral: Deferred<TItem> }>;\r\n    private isDrainInProgress: boolean = false;\r\n    private isDisposing: boolean = false;\r\n    private disposeReason: string = null;\r\n\r\n    public constructor(list?: List<TItem>) {\r\n        this.list = list ? list : new List<TItem>();\r\n        this.detachables = [];\r\n        this.subscribers = new List<{ type: SubscriberType, deferral: Deferred<TItem> }>();\r\n        this.detachables.push(this.list.OnAdded(this.Drain));\r\n    }\r\n\r\n    public Enqueue = (item: TItem): void => {\r\n        this.ThrowIfDispose();\r\n        this.EnqueueFromPromise(PromiseHelper.FromResult(item));\r\n    }\r\n\r\n    public EnqueueFromPromise = (promise: Promise<TItem>): void => {\r\n        this.ThrowIfDispose();\r\n        this.promiseStore.Add(promise);\r\n        promise.Finally(() => {\r\n            while (this.promiseStore.Length() > 0) {\r\n                if (!this.promiseStore.First().Result().IsCompleted) {\r\n                    break;\r\n                } else {\r\n                    const p = this.promiseStore.RemoveFirst();\r\n                    if (!p.Result().IsError) {\r\n                        this.list.Add(p.Result().Result);\r\n                    } else {\r\n                        // TODO: Log as warning.\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public Dequeue = (): Promise<TItem> => {\r\n        this.ThrowIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        if (this.subscribers) {\r\n            this.subscribers.Add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n            this.Drain();\r\n        }\r\n\r\n        return deferredSubscriber.Promise();\r\n    }\r\n\r\n    public Peek = (): Promise<TItem> => {\r\n        this.ThrowIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        const subs = this.subscribers;\r\n        if (subs) {\r\n            this.subscribers.Add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n            this.Drain();\r\n        }\r\n\r\n        return deferredSubscriber.Promise();\r\n    }\r\n\r\n    public Length = (): number => {\r\n        this.ThrowIfDispose();\r\n        return this.list.Length();\r\n    }\r\n\r\n    public IsDisposed = (): boolean => {\r\n        return this.subscribers == null;\r\n    }\r\n\r\n    public DrainAndDispose = (pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<boolean> => {\r\n        if (!this.IsDisposed() && !this.isDisposing) {\r\n            this.disposeReason = reason;\r\n            this.isDisposing = true;\r\n\r\n            const subs = this.subscribers;\r\n            if (subs) {\r\n                while (subs.Length() > 0) {\r\n                    const subscriber = subs.RemoveFirst();\r\n                    // TODO: this needs work (Resolve(null) instead?).\r\n                    subscriber.deferral.Resolve(undefined);\r\n                    // subscriber.deferral.Reject(\"Disposed\");\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.Resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.subscribers === subs) {\r\n                    this.subscribers = subs;\r\n                }\r\n            }\r\n\r\n            for (const detachable of this.detachables) {\r\n                detachable.Detach();\r\n            }\r\n\r\n            if (this.promiseStore.Length() > 0 && pendingItemProcessor) {\r\n                return PromiseHelper\r\n                    .WhenAll(this.promiseStore.ToArray())\r\n                    .ContinueWith(() => {\r\n                        this.subscribers = null;\r\n                        this.list.ForEach((item: TItem, index: number): void => {\r\n                            pendingItemProcessor(item);\r\n                        });\r\n                        this.list = null;\r\n                        return true;\r\n                    });\r\n            } else {\r\n                this.subscribers = null;\r\n                this.list = null;\r\n            }\r\n        }\r\n\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    public Dispose = (reason?: string): void => {\r\n        this.DrainAndDispose(null, reason);\r\n    }\r\n\r\n    private Drain = (): void => {\r\n        if (!this.isDrainInProgress && !this.isDisposing) {\r\n            this.isDrainInProgress = true;\r\n\r\n            const subs = this.subscribers;\r\n            const lists = this.list;\r\n            if (subs && lists) {\r\n                while (lists.Length() > 0 && subs.Length() > 0 && !this.isDisposing) {\r\n                    const subscriber = subs.RemoveFirst();\r\n                    if (subscriber.type === SubscriberType.Peek) {\r\n                        subscriber.deferral.Resolve(lists.First());\r\n                    } else {\r\n                        const dequeuedItem = lists.RemoveFirst();\r\n                        subscriber.deferral.Resolve(dequeuedItem);\r\n                    }\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.Resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.subscribers === subs) {\r\n                    this.subscribers = subs;\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.Resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.list === lists) {\r\n                    this.list = lists;\r\n                }\r\n            }\r\n\r\n            this.isDrainInProgress = false;\r\n        }\r\n    }\r\n\r\n    private ThrowIfDispose = (): void => {\r\n        if (this.IsDisposed()) {\r\n            if (this.disposeReason) {\r\n                throw new InvalidOperationError(this.disposeReason);\r\n            }\r\n\r\n            throw new ObjectDisposedError(\"Queue\");\r\n        } else if (this.isDisposing) {\r\n            throw new InvalidOperationError(\"Queue disposing\");\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/Queue.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { CreateNoDashGuid } from \"../../../src/common/Guid\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Promise,\r\n    PromiseHelper,\r\n    Stream,\r\n    StreamReader,\r\n} from \"../../common/Exports\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\nconst bufferSize: number = 4096;\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read() and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private format: AudioStreamFormat;\r\n    private id: string;\r\n    private events: EventSource<AudioSourceEvent>;\r\n    private stream: Stream<ArrayBuffer> = new Stream<ArrayBuffer>();\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.format = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.format = format;\r\n        }\r\n        this.events = new EventSource<AudioSourceEvent>();\r\n        this.id = CreateNoDashGuid();\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get Format(): AudioStreamFormat {\r\n        return this.format;\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        // Break the data up into smaller chunks if needed.\r\n        let i: number;\r\n        for (i = bufferSize - 1; i < dataBuffer.byteLength; i += bufferSize) {\r\n            this.stream.Write(dataBuffer.slice(i - (bufferSize - 1), i + 1));\r\n        }\r\n\r\n        if ((i - (bufferSize - 1)) !== dataBuffer.byteLength) {\r\n            this.stream.Write(dataBuffer.slice(i - (bufferSize - 1), dataBuffer.byteLength));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.stream.Close();\r\n    }\r\n\r\n    public Id(): string {\r\n        return this.id;\r\n    }\r\n\r\n    public TurnOn(): Promise<boolean> {\r\n        this.OnEvent(new AudioSourceInitializingEvent(this.id)); // no stream id\r\n        this.OnEvent(new AudioSourceReadyEvent(this.id));\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    public Attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.OnEvent(new AudioStreamNodeAttachingEvent(this.id, audioNodeId));\r\n\r\n        return this.TurnOn()\r\n            .OnSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\r\n                // For now we support a single parallel reader of the pushed stream.\r\n                // So we can simiply hand the stream to the recognizer and let it recognize.\r\n\r\n                return this.stream.GetReader();\r\n            })\r\n            .OnSuccessContinueWith((streamReader: StreamReader<ArrayBuffer>) => {\r\n                this.OnEvent(new AudioStreamNodeAttachedEvent(this.id, audioNodeId));\r\n\r\n                return {\r\n                    Detach: () => {\r\n                        streamReader.Close();\r\n                        this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n                        this.TurnOff();\r\n                    },\r\n                    Id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    Read: () => {\r\n                        return streamReader.Read();\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public Detach(audioNodeId: string): void {\r\n        this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n    }\r\n\r\n    public TurnOff(): Promise<boolean> {\r\n        return PromiseHelper.FromResult(false);\r\n    }\r\n\r\n    public get Events(): EventSource<AudioSourceEvent> {\r\n        return this.events;\r\n    }\r\n\r\n    private OnEvent = (event: AudioSourceEvent): void => {\r\n        this.events.OnEvent(event);\r\n        Events.Instance.OnEvent(event);\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { super(); }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private callback: PullAudioInputStreamCallback;\r\n    private format: AudioStreamFormat;\r\n    private id: string;\r\n    private events: EventSource<AudioSourceEvent>;\r\n    private isClosed: boolean;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.format = AudioStreamFormat.getDefaultInputFormat();\r\n        } else {\r\n            this.format = format;\r\n        }\r\n        this.events = new EventSource<AudioSourceEvent>();\r\n        this.id = CreateNoDashGuid();\r\n        this.callback = callback;\r\n        this.isClosed = false;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get Format(): AudioStreamFormat {\r\n        return this.format;\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.isClosed = true;\r\n        this.callback.close();\r\n    }\r\n\r\n    public Id(): string {\r\n        return this.id;\r\n    }\r\n\r\n    public TurnOn(): Promise<boolean> {\r\n        this.OnEvent(new AudioSourceInitializingEvent(this.id)); // no stream id\r\n        this.OnEvent(new AudioSourceReadyEvent(this.id));\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    public Attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.OnEvent(new AudioStreamNodeAttachingEvent(this.id, audioNodeId));\r\n\r\n        return this.TurnOn()\r\n            .OnSuccessContinueWith((result: boolean) => {\r\n                this.OnEvent(new AudioStreamNodeAttachedEvent(this.id, audioNodeId));\r\n\r\n                return {\r\n                    Detach: () => {\r\n                        this.callback.close();\r\n                        this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n                        this.TurnOff();\r\n                    },\r\n                    Id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    Read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                        const readBuff: ArrayBuffer = new ArrayBuffer(bufferSize);\r\n                        const pulledBytes: number = this.callback.read(readBuff);\r\n\r\n                        return PromiseHelper.FromResult<IStreamChunk<ArrayBuffer>>({\r\n                            Buffer: readBuff.slice(0, pulledBytes),\r\n                            IsEnd: this.isClosed,\r\n                        });\r\n                    },\r\n                };\r\n            });\r\n\r\n    }\r\n\r\n    public Detach(audioNodeId: string): void {\r\n        this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n    }\r\n\r\n    public TurnOff(): Promise<boolean> {\r\n        return PromiseHelper.FromResult(false);\r\n    }\r\n\r\n    public get Events(): EventSource<AudioSourceEvent> {\r\n        return this.events;\r\n    }\r\n\r\n    private OnEvent = (event: AudioSourceEvent): void => {\r\n        this.events.OnEvent(event);\r\n        Events.Instance.OnEvent(event);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/Audio/AudioInputStream.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Represents audio stream format used for custom audio input configurations.\r\n * @class AudioStreamFormat\r\n */\r\nexport abstract class AudioStreamFormat {\r\n    /**\r\n     * Creates an audio stream format object representing the default audio stream format (16KHz 16bit mono PCM).\r\n     * @member AudioStreamFormat.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormat {\r\n        return AudioStreamFormatImpl.getDefaultInputFormat();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\r\n     * @member AudioStreamFormat.getWaveFormatPCM\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data uses one channel and stereo data uses two channels.\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormatPCM(samplesPerSecond: number, bitsPerSample: number, channels: number): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioStreamFormat.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioStreamFormatImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     */\r\n    public constructor(samplesPerSec: number = 16000, bitsPerSample: number = 16, channels: number = 1) {\r\n        super();\r\n        this.formatTag = 1;\r\n        this.bitsPerSample = bitsPerSample;\r\n        this.samplesPerSec = samplesPerSec;\r\n        this.channels = channels;\r\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\r\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the default input format.\r\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormatImpl} The default input format.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormatImpl {\r\n        return new AudioStreamFormatImpl();\r\n    }\r\n\r\n    /**\r\n     * Closes the configuration object.\r\n     * @member AudioStreamFormatImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void { return; }\r\n\r\n    /**\r\n     * The format of the audio, valid values: 1 (PCM)\r\n     * @member AudioStreamFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: number;\r\n\r\n    /**\r\n     * The number of channels, valid values: 1 (Mono).\r\n     * @member AudioStreamFormatImpl.prototype.channels\r\n     * @function\r\n     * @public\r\n     */\r\n    public channels: number;\r\n\r\n    /**\r\n     * The sample rate, valid values: 16000.\r\n     * @member AudioStreamFormatImpl.prototype.samplesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public samplesPerSec: number;\r\n\r\n    /**\r\n     * The bits per sample, valid values: 16\r\n     * @member AudioStreamFormatImpl.prototype.b\r\n     * @function\r\n     * @public\r\n     */\r\n    public bitsPerSample: number;\r\n\r\n    /**\r\n     * Average bytes per second, usually calculated as nSamplesPerSec * nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.avgBytesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public avgBytesPerSec: number;\r\n\r\n    /**\r\n     * The size of a single frame, valid values: nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.blockAlign\r\n     * @function\r\n     * @public\r\n     */\r\n    public blockAlign: number;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/Audio/AudioStreamFormat.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { WebsocketConnection } from \"../common.browser/Exports\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n    Storage,\r\n} from \"../common/Exports\";\r\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport class SpeechConnectionFactory implements IConnectionFactory {\r\n\r\n    public Create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.DeploymentIdParamName) === -1) {\r\n                queryParams[QueryParameterNames.DeploymentIdParamName] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.LanguageParamName) === -1) {\r\n                queryParams[QueryParameterNames.LanguageParamName] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.FormatParamName) === -1) {\r\n            queryParams[QueryParameterNames.FormatParamName] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        if (this.IsDebugModeEnabled) {\r\n            queryParams[QueryParameterNames.TestHooksParamName] = \"1\";\r\n        }\r\n\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n\r\n            switch (config.RecognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    endpoint = this.Host(region) + this.ConversationRelativeUri;\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = this.Host(region) + this.DictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    endpoint = this.Host(region) + this.InteractiveRelativeUri; // default is interactive\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[authInfo.HeaderName] = authInfo.Token;\r\n        headers[QueryParameterNames.ConnectionIdHeader] = connectionId;\r\n\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), connectionId);\r\n    }\r\n\r\n    private Host(region: string): string {\r\n        return Storage.Local.GetOrAdd(\"Host\", \"wss://\" + region + \".stt.speech.microsoft.com\");\r\n    }\r\n\r\n    private get InteractiveRelativeUri(): string {\r\n        return Storage.Local.GetOrAdd(\"InteractiveRelativeUri\", \"/speech/recognition/interactive/cognitiveservices/v1\");\r\n    }\r\n\r\n    private get ConversationRelativeUri(): string {\r\n        return Storage.Local.GetOrAdd(\"ConversationRelativeUri\", \"/speech/recognition/conversation/cognitiveservices/v1\");\r\n    }\r\n\r\n    private get DictationRelativeUri(): string {\r\n        return Storage.Local.GetOrAdd(\"DictationRelativeUri\", \"/speech/recognition/dictation/cognitiveservices/v1\");\r\n    }\r\n\r\n    private get IsDebugModeEnabled(): boolean {\r\n        const value = Storage.Local.GetOrAdd(\"IsDebugModeEnabled\", \"false\");\r\n        return value.toLowerCase() === \"true\";\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/SpeechConnectionFactory.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    PlatformEvent,\r\n    Promise,\r\n    PromiseHelper,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    SendStatusDeferral: Deferred<boolean>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n\r\n    private connectionState: ConnectionState;\r\n    private messageFormatter: IWebsocketMessageFormatter;\r\n    private websocketClient: WebSocket;\r\n\r\n    private sendMessageQueue: Queue<ISendItem>;\r\n    private receivingMessageQueue: Queue<ConnectionMessage>;\r\n    private connectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private disconnectDeferral: Deferred<boolean>;\r\n    private connectionEvents: EventSource<ConnectionEvent>;\r\n    private connectionId: string;\r\n    private uri: string;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.connectionEvents = new EventSource<ConnectionEvent>();\r\n        this.connectionId = connectionId;\r\n        this.messageFormatter = messageFormatter;\r\n        this.connectionState = ConnectionState.None;\r\n        this.uri = uri;\r\n    }\r\n\r\n    public get State(): ConnectionState {\r\n        return this.connectionState;\r\n    }\r\n\r\n    public Open = (): Promise<ConnectionOpenResponse> => {\r\n        if (this.connectionState === ConnectionState.Disconnected) {\r\n            return PromiseHelper.FromError<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.connectionState} state`);\r\n        }\r\n\r\n        if (this.connectionEstablishDeferral) {\r\n            return this.connectionEstablishDeferral.Promise();\r\n        }\r\n\r\n        this.connectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.connectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n            this.websocketClient = new WebSocket(this.uri);\r\n            this.websocketClient.binaryType = \"arraybuffer\";\r\n            this.receivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.disconnectDeferral = new Deferred<boolean>();\r\n            this.sendMessageQueue = new Queue<ISendItem>();\r\n            this.ProcessSendQueue();\r\n        } catch (error) {\r\n            this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(500, error));\r\n            return this.connectionEstablishDeferral.Promise();\r\n        }\r\n\r\n        this.OnEvent(new ConnectionStartEvent(this.connectionId, this.uri));\r\n\r\n        this.websocketClient.onopen = (e: Event) => {\r\n            this.connectionState = ConnectionState.Connected;\r\n            this.OnEvent(new ConnectionEstablishedEvent(this.connectionId));\r\n            this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(200, \"\"));\r\n        };\r\n\r\n        this.websocketClient.onerror = (e: Event) => {\r\n            // TODO: Understand what this is error is. Will we still get onClose ?\r\n            if (this.connectionState !== ConnectionState.Connecting) {\r\n                // TODO: Is this required ?\r\n                // this.OnEvent(new ConnectionErrorEvent(errorMsg, connectionId));\r\n            }\r\n        };\r\n\r\n        this.websocketClient.onclose = (e: CloseEvent) => {\r\n            if (this.connectionState === ConnectionState.Connecting) {\r\n                this.connectionState = ConnectionState.Disconnected;\r\n                // this.OnEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(e.code, e.reason));\r\n            } else {\r\n                this.OnEvent(new ConnectionClosedEvent(this.connectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.OnClose(e.code, e.reason);\r\n        };\r\n\r\n        this.websocketClient.onmessage = (e: MessageEvent) => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.connectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.receivingMessageQueue.EnqueueFromPromise(deferred.Promise());\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.messageFormatter\r\n                        .ToConnectionMessage(rawMessage)\r\n                        .On((connectionMessage: ConnectionMessage) => {\r\n                            this.OnEvent(new ConnectionMessageReceivedEvent(this.connectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.Resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.Reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.messageFormatter\r\n                        .ToConnectionMessage(rawMessage)\r\n                        .On((connectionMessage: ConnectionMessage) => {\r\n                            this.OnEvent(new ConnectionMessageReceivedEvent(this.connectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.Resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.Reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.connectionEstablishDeferral.Promise();\r\n    }\r\n\r\n    public Send = (message: ConnectionMessage): Promise<boolean> => {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            return PromiseHelper.FromError<boolean>(`Cannot send on connection that is in ${this.connectionState} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<boolean>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.sendMessageQueue.EnqueueFromPromise(messageSendDeferral.Promise());\r\n\r\n        this.messageFormatter\r\n            .FromConnectionMessage(message)\r\n            .On((rawMessage: RawWebsocketMessage) => {\r\n                messageSendDeferral.Resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    SendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string) => {\r\n                messageSendDeferral.Reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.Promise();\r\n    }\r\n\r\n    public Read = (): Promise<ConnectionMessage> => {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            return PromiseHelper.FromError<ConnectionMessage>(`Cannot read on connection that is in ${this.connectionState} state`);\r\n        }\r\n\r\n        return this.receivingMessageQueue.Dequeue();\r\n    }\r\n\r\n    public Close = (reason?: string): Promise<boolean> => {\r\n        if (this.websocketClient) {\r\n            if (this.connectionState !== ConnectionState.Disconnected) {\r\n                this.websocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            const deferral = new Deferred<boolean>();\r\n            deferral.Resolve(true);\r\n            return deferral.Promise();\r\n        }\r\n\r\n        return this.disconnectDeferral.Promise();\r\n    }\r\n\r\n    public get Events(): EventSource<ConnectionEvent> {\r\n        return this.connectionEvents;\r\n    }\r\n\r\n    private SendRawMessage = (sendItem: ISendItem): Promise<boolean> => {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return PromiseHelper.FromResult(true);\r\n            }\r\n\r\n            this.OnEvent(new ConnectionMessageSentEvent(this.connectionId, new Date().toISOString(), sendItem.Message));\r\n            this.websocketClient.send(sendItem.RawWebsocketMessage.Payload);\r\n            return PromiseHelper.FromResult(true);\r\n        } catch (e) {\r\n            return PromiseHelper.FromError<boolean>(`websocket send error: ${e}`);\r\n        }\r\n    }\r\n\r\n    private OnClose = (code: number, reason: string): void => {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.disconnectDeferral.Resolve(true);\r\n        this.receivingMessageQueue.Dispose(reason);\r\n        this.receivingMessageQueue.DrainAndDispose((pendingReceiveItem: ConnectionMessage) => {\r\n            // TODO: Events for these ?\r\n            // Logger.Instance.OnEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        this.sendMessageQueue.DrainAndDispose((pendingSendItem: ISendItem) => {\r\n            pendingSendItem.SendStatusDeferral.Reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private ProcessSendQueue = (): void => {\r\n        this.sendMessageQueue\r\n            .Dequeue()\r\n            .On((sendItem: ISendItem) => {\r\n                // indicates we are draining the queue and it came with no message;\r\n                if (!sendItem) {\r\n                    return;\r\n                }\r\n\r\n                this.SendRawMessage(sendItem)\r\n                    .On((result: boolean) => {\r\n                        sendItem.SendStatusDeferral.Resolve(result);\r\n                        this.ProcessSendQueue();\r\n                    }, (sendError: string) => {\r\n                        sendItem.SendStatusDeferral.Reject(sendError);\r\n                        this.ProcessSendQueue();\r\n                    });\r\n            }, (error: string) => {\r\n                // do nothing\r\n            });\r\n    }\r\n\r\n    private OnEvent = (event: ConnectionEvent): void => {\r\n        this.connectionEvents.OnEvent(event);\r\n        Events.Instance.OnEvent(event);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/WebsocketMessageAdapter.ts","window.SpeechSDK = require('./distrib/microsoft.cognitiveservices.speech.sdk.js');\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./bundleApp.js\n// module id = 21\n// module chunks = 0","import { ConsoleLoggingListener, LocalStorage, SessionStorage } from \"./src/common.browser/Exports\";\r\nimport { Events, Storage } from \"./src/common/Exports\";\r\n\r\n// Common.Storage.SetLocalStorage(new Common.Browser.LocalStorage());\r\n// Common.Storage.SetSessionStorage(new Common.Browser.SessionStorage());\r\nEvents.Instance.AttachListener(new ConsoleLoggingListener());\r\n\r\n// Speech SDK API\r\nexport * from \"./src/sdk/Exports\";\r\n\n\n\n// WEBPACK FOOTER //\n// ../microsoft.cognitiveservices.speech.sdk.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { EventType, IEventListener, PlatformEvent } from \"../common/Exports\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private logLevelFilter: EventType;\r\n\r\n    public constructor(logLevelFilter: EventType = EventType.Warning) {\r\n        this.logLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public OnEvent = (event: PlatformEvent): void => {\r\n        if (event.EventType >= this.logLevelFilter) {\r\n            const log = this.ToString(event);\r\n\r\n            switch (event.EventType) {\r\n                case EventType.Debug:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.debug(log);\r\n                    break;\r\n                case EventType.Info:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.info(log);\r\n                    break;\r\n                case EventType.Warning:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.warn(log);\r\n                    break;\r\n                case EventType.Error:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.error(log);\r\n                    break;\r\n                default:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.log(log);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private ToString = (event: any): string => {\r\n        const logFragments = [\r\n            `${event.EventTime}`,\r\n            `${event.Name}`,\r\n        ];\r\n\r\n        for (const prop in event) {\r\n            if (prop && event.hasOwnProperty(prop) && prop !== \"eventTime\" && prop !== \"eventType\" && prop !== \"eventId\" && prop !== \"name\" && prop !== \"constructor\") {\r\n                const value = event[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/ConsoleLoggingListener.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class AudioSourceEvent extends PlatformEvent {\r\n    private audioSourceId: string;\r\n\r\n    constructor(eventName: string, audioSourceId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.audioSourceId = audioSourceId;\r\n    }\r\n\r\n    public get AudioSourceId(): string {\r\n        return this.audioSourceId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId: string) {\r\n        super(\"AudioSourceInitializingEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId: string) {\r\n        super(\"AudioSourceReadyEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioSourceOffEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId: string) {\r\n        super(\"AudioSourceOffEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\r\n    private error: string;\r\n    constructor(audioSourceId: string, error: string) {\r\n        super(\"AudioSourceErrorEvent\", audioSourceId, EventType.Error);\r\n        this.error = error;\r\n    }\r\n\r\n    public get Error(): string {\r\n        return this.error;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\r\n    private audioNodeId: string;\r\n\r\n    constructor(eventName: string, audioSourceId: string, audioNodeId: string) {\r\n        super(eventName, audioSourceId);\r\n        this.audioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachingEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeDetachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\r\n    private error: string;\r\n\r\n    constructor(audioSourceId: string, audioNodeId: string, error: string) {\r\n        super(\"AudioStreamNodeErrorEvent\", audioSourceId, audioNodeId);\r\n        this.error = error;\r\n    }\r\n\r\n    public get Error(): string {\r\n        return this.error;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/AudioSourceEvents.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ConnectionMessage } from \"./ConnectionMessage\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class ConnectionEvent extends PlatformEvent {\r\n    private connectionId: string;\r\n\r\n    constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.connectionId = connectionId;\r\n    }\r\n\r\n    public get ConnectionId(): string {\r\n        return this.connectionId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionStartEvent extends ConnectionEvent {\r\n    private uri: string;\r\n    private headers: IStringDictionary<string>;\r\n\r\n    constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\r\n        super(\"ConnectionStartEvent\", connectionId);\r\n        this.uri = uri;\r\n        this.headers = headers;\r\n    }\r\n\r\n    public get Uri(): string {\r\n        return this.uri;\r\n    }\r\n\r\n    public get Headers(): IStringDictionary<string> {\r\n        return this.headers;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\r\n    constructor(connectionId: string, metadata?: IStringDictionary<string>) {\r\n        super(\"ConnectionEstablishedEvent\", connectionId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionClosedEvent extends ConnectionEvent {\r\n    private reason: string;\r\n    private statusCode: number;\r\n\r\n    constructor(connectionId: string, statusCode: number, reason: string) {\r\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\r\n        this.reason = reason;\r\n        this.statusCode = statusCode;\r\n    }\r\n\r\n    public get Reason(): string {\r\n        return this.reason;\r\n    }\r\n\r\n    public get StatusCode(): number {\r\n        return this.statusCode;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\r\n    private statusCode: number;\r\n    private reason: string;\r\n\r\n    constructor(connectionId: string, statuscode: number, reason: string) {\r\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\r\n        this.statusCode = statuscode;\r\n        this.reason = reason;\r\n    }\r\n\r\n    public get Reason(): string {\r\n        return this.reason;\r\n    }\r\n\r\n    public get StatusCode(): number {\r\n        return this.statusCode;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\r\n    private networkReceivedTime: string;\r\n    private message: ConnectionMessage;\r\n\r\n    constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\r\n        this.networkReceivedTime = networkReceivedTimeISO;\r\n        this.message = message;\r\n    }\r\n\r\n    public get NetworkReceivedTime(): string {\r\n        return this.networkReceivedTime;\r\n    }\r\n\r\n    public get Message(): ConnectionMessage {\r\n        return this.message;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\r\n    private networkSentTime: string;\r\n    private message: ConnectionMessage;\r\n\r\n    constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageSentEvent\", connectionId);\r\n        this.networkSentTime = networkSentTimeISO;\r\n        this.message = message;\r\n    }\r\n\r\n    public get NetworkSentTime(): string {\r\n        return this.networkSentTime;\r\n    }\r\n\r\n    public get Message(): ConnectionMessage {\r\n        return this.message;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/ConnectionEvents.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nexport class ConnectionOpenResponse {\r\n    private statusCode: number;\r\n    private reason: string;\r\n\r\n    constructor(statusCode: number, reason: string) {\r\n        this.statusCode = statusCode;\r\n        this.reason = reason;\r\n    }\r\n\r\n    public get StatusCode(): number {\r\n        return this.statusCode;\r\n    }\r\n\r\n    public get Reason(): string {\r\n        return this.reason;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/ConnectionOpenResponse.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError } from \"./Error\";\r\nimport { EventSource } from \"./EventSource\";\r\nimport { IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class Events {\r\n    private static instance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\r\n\r\n    public static SetEventSource = (eventSource: IEventSource<PlatformEvent>): void => {\r\n        if (!eventSource) {\r\n            throw new ArgumentNullError(\"eventSource\");\r\n        }\r\n\r\n        Events.instance = eventSource;\r\n    }\r\n\r\n    public static get Instance(): IEventSource<PlatformEvent> {\r\n        return Events.instance;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/Events.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ConnectionEvent } from \"./ConnectionEvents\";\r\nimport { ConnectionMessage } from \"./ConnectionMessage\";\r\nimport { ConnectionOpenResponse } from \"./ConnectionOpenResponse\";\r\nimport { EventSource } from \"./EventSource\";\r\nimport { IDisposable } from \"./IDisposable\";\r\nimport { Promise } from \"./Promise\";\r\n\r\nexport enum ConnectionState {\r\n    None,\r\n    Connected,\r\n    Connecting,\r\n    Disconnected,\r\n}\r\n\r\nexport interface IConnection extends IDisposable {\r\n    Id: string;\r\n    State(): ConnectionState;\r\n    Open(): Promise<ConnectionOpenResponse>;\r\n    Send(message: ConnectionMessage): Promise<boolean>;\r\n    Read(): Promise<ConnectionMessage>;\r\n    Events: EventSource<ConnectionEvent>;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/IConnection.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { MessageType } from \"./ConnectionMessage\";\r\nimport { ArgumentNullError, InvalidOperationError } from \"./Error\";\r\nimport { CreateNoDashGuid } from \"./Guid\";\r\n\r\nexport class RawWebsocketMessage {\r\n\r\n    private messageType: MessageType;\r\n    private payload: any = null;\r\n    private id: string;\r\n\r\n    public constructor(messageType: MessageType, payload: any, id?: string) {\r\n        if (!payload) {\r\n            throw new ArgumentNullError(\"payload\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && !(payload instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        this.messageType = messageType;\r\n        this.payload = payload;\r\n        this.id = id ? id : CreateNoDashGuid();\r\n    }\r\n\r\n    public get MessageType(): MessageType {\r\n        return this.messageType;\r\n    }\r\n\r\n    public get Payload(): any {\r\n        return this.payload;\r\n    }\r\n\r\n    public get TextContent(): string {\r\n        if (this.messageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.payload as string;\r\n    }\r\n\r\n    public get BinaryContent(): ArrayBuffer {\r\n        if (this.messageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.payload;\r\n    }\r\n\r\n    public get Id(): string {\r\n        return this.id;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/RawWebsocketMessage.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nexport class RiffPcmEncoder {\r\n\r\n    private actualSampleRate: number;\r\n    private desiredSampleRate: number;\r\n    private channelCount: number = 1;\r\n\r\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\r\n        this.actualSampleRate = actualSampleRate;\r\n        this.desiredSampleRate = desiredSampleRate;\r\n    }\r\n\r\n    public Encode = (\r\n        needHeader: boolean,\r\n        actualAudioFrame: Float32Array): ArrayBuffer => {\r\n\r\n        const audioFrame = this.DownSampleAudioFrame(actualAudioFrame, this.actualSampleRate, this.desiredSampleRate);\r\n\r\n        if (!audioFrame) {\r\n            return null;\r\n        }\r\n\r\n        const audioLength = audioFrame.length * 2;\r\n\r\n        if (!needHeader) {\r\n            const buffer = new ArrayBuffer(audioLength);\r\n            const view = new DataView(buffer);\r\n            this.FloatTo16BitPCM(view, 0, audioFrame);\r\n\r\n            return buffer;\r\n        }\r\n\r\n        const buffer = new ArrayBuffer(44 + audioLength);\r\n\r\n        const bitsPerSample = 16;\r\n        const bytesPerSample = bitsPerSample / 8;\r\n        // We dont know ahead of time about the length of audio to stream. So set to 0.\r\n        const fileLength = 0;\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n        const view = new DataView(buffer);\r\n\r\n        /* RIFF identifier */\r\n        this.SetString(view, 0, \"RIFF\");\r\n        /* file length */\r\n        view.setUint32(4, fileLength, true);\r\n        /* RIFF type & Format */\r\n        this.SetString(view, 8, \"WAVEfmt \");\r\n        /* format chunk length */\r\n        view.setUint32(16, 16, true);\r\n        /* sample format (raw) */\r\n        view.setUint16(20, 1, true);\r\n        /* channel count */\r\n        view.setUint16(22, this.channelCount, true);\r\n        /* sample rate */\r\n        view.setUint32(24, this.desiredSampleRate, true);\r\n        /* byte rate (sample rate * block align) */\r\n        view.setUint32(28, this.desiredSampleRate * this.channelCount * bytesPerSample, true);\r\n        /* block align (channel count * bytes per sample) */\r\n        view.setUint16(32, this.channelCount * bytesPerSample, true);\r\n        /* bits per sample */\r\n        view.setUint16(34, bitsPerSample, true);\r\n        /* data chunk identifier */\r\n        this.SetString(view, 36, \"data\");\r\n        /* data chunk length */\r\n        view.setUint32(40, fileLength, true);\r\n\r\n        this.FloatTo16BitPCM(view, 44, audioFrame);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    private SetString = (view: DataView, offset: number, str: string): void => {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n\r\n    private FloatTo16BitPCM = (view: DataView, offset: number, input: Float32Array): void => {\r\n        for (let i = 0; i < input.length; i++ , offset += 2) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n        }\r\n    }\r\n\r\n    private DownSampleAudioFrame = (\r\n        srcFrame: Float32Array,\r\n        srcRate: number,\r\n        dstRate: number): Float32Array => {\r\n\r\n        if (dstRate === srcRate || dstRate > srcRate) {\r\n            return srcFrame;\r\n        }\r\n\r\n        const ratio = srcRate / dstRate;\r\n        const dstLength = Math.round(srcFrame.length / ratio);\r\n        const dstFrame = new Float32Array(dstLength);\r\n        let srcOffset = 0;\r\n        let dstOffset = 0;\r\n        while (dstOffset < dstLength) {\r\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\r\n            let accum = 0;\r\n            let count = 0;\r\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\r\n                accum += srcFrame[srcOffset++];\r\n                count++;\r\n            }\r\n            dstFrame[dstOffset++] = accum / count;\r\n        }\r\n\r\n        return dstFrame;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/RiffPcmEncoder.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError } from \"./Error\";\r\nimport { IKeyValueStorage } from \"./IKeyValueStorage\";\r\nimport { InMemoryStorage } from \"./InMemoryStorage\";\r\n\r\nexport class Storage {\r\n    private static sessionStorage: IKeyValueStorage = new InMemoryStorage();\r\n    private static localStorage: IKeyValueStorage = new InMemoryStorage();\r\n\r\n    public static SetSessionStorage = (sessionStorage: IKeyValueStorage): void => {\r\n        if (!sessionStorage) {\r\n            throw new ArgumentNullError(\"sessionStorage\");\r\n        }\r\n\r\n        Storage.sessionStorage = sessionStorage;\r\n    }\r\n\r\n    public static SetLocalStorage = (localStorage: IKeyValueStorage): void => {\r\n        if (!localStorage) {\r\n            throw new ArgumentNullError(\"localStorage\");\r\n        }\r\n\r\n        Storage.localStorage = localStorage;\r\n    }\r\n\r\n    public static get Session(): IKeyValueStorage {\r\n        return Storage.sessionStorage;\r\n    }\r\n\r\n    public static get Local(): IKeyValueStorage {\r\n        return Storage.localStorage;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/Storage.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { CreateNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { Promise } from \"./Promise\";\r\nimport { Queue } from \"./Queue\";\r\nimport { IStreamChunk } from \"./Stream\";\r\n\r\nexport interface IStreamChunk<TBuffer> {\r\n    IsEnd: boolean;\r\n    Buffer: TBuffer;\r\n}\r\n\r\nexport class Stream<TBuffer> {\r\n    private id: string;\r\n    private readerIdCounter: number = 1;\r\n    private streambuffer: Array<IStreamChunk<TBuffer>>;\r\n    private isEnded: boolean = false;\r\n    private readerQueues: IStringDictionary<Queue<IStreamChunk<TBuffer>>>;\r\n\r\n    public constructor(streamId?: string) {\r\n        this.id = streamId ? streamId : CreateNoDashGuid();\r\n        this.streambuffer = [];\r\n        this.readerQueues = {};\r\n    }\r\n\r\n    public get IsClosed(): boolean {\r\n        return this.isEnded;\r\n    }\r\n\r\n    public get Id(): string {\r\n        return this.id;\r\n    }\r\n\r\n    public Write = (buffer: TBuffer): void => {\r\n        this.ThrowIfClosed();\r\n        this.WriteStreamChunk({\r\n            Buffer: buffer,\r\n            IsEnd: false,\r\n        });\r\n    }\r\n\r\n    public GetReader = (): StreamReader<TBuffer> => {\r\n        const readerId = this.readerIdCounter;\r\n        this.readerIdCounter++;\r\n        const readerQueue = new Queue<IStreamChunk<TBuffer>>();\r\n        const currentLength = this.streambuffer.length;\r\n        this.readerQueues[readerId] = readerQueue;\r\n        for (let i = 0; i < currentLength; i++) {\r\n            readerQueue.Enqueue(this.streambuffer[i]);\r\n        }\r\n        return new StreamReader(\r\n            this.id,\r\n            readerQueue,\r\n            () => {\r\n                delete this.readerQueues[readerId];\r\n            });\r\n    }\r\n\r\n    public Close = (): void => {\r\n        if (!this.isEnded) {\r\n            this.WriteStreamChunk({\r\n                Buffer: null,\r\n                IsEnd: true,\r\n            });\r\n            this.isEnded = true;\r\n        }\r\n    }\r\n\r\n    private WriteStreamChunk = (streamChunk: IStreamChunk<TBuffer>): void => {\r\n        this.ThrowIfClosed();\r\n        this.streambuffer.push(streamChunk);\r\n        for (const readerId in this.readerQueues) {\r\n            if (!this.readerQueues[readerId].IsDisposed()) {\r\n                try {\r\n                    this.readerQueues[readerId].Enqueue(streamChunk);\r\n                } catch (e) {\r\n                    // Do nothing\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private ThrowIfClosed = (): void => {\r\n        if (this.isEnded) {\r\n            throw new InvalidOperationError(\"Stream closed\");\r\n        }\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class StreamReader<TBuffer> {\r\n    private readerQueue: Queue<IStreamChunk<TBuffer>>;\r\n    private onClose: () => void;\r\n    private isClosed: boolean = false;\r\n    private streamId: string;\r\n\r\n    public constructor(streamId: string, readerQueue: Queue<IStreamChunk<TBuffer>>, onClose: () => void) {\r\n        this.readerQueue = readerQueue;\r\n        this.onClose = onClose;\r\n        this.streamId = streamId;\r\n    }\r\n\r\n    public get IsClosed(): boolean {\r\n        return this.isClosed;\r\n    }\r\n\r\n    public get StreamId(): string {\r\n        return this.streamId;\r\n    }\r\n\r\n    public Read = (): Promise<IStreamChunk<TBuffer>> => {\r\n        if (this.IsClosed) {\r\n            throw new InvalidOperationError(\"StreamReader closed\");\r\n        }\r\n\r\n        return this.readerQueue\r\n            .Dequeue()\r\n            .OnSuccessContinueWith((streamChunk: IStreamChunk<TBuffer>) => {\r\n                if (streamChunk.IsEnd) {\r\n                    this.readerQueue.Dispose(\"End of stream reached\");\r\n                }\r\n\r\n                return streamChunk;\r\n            });\r\n    }\r\n\r\n    public Close = (): void => {\r\n        if (!this.isClosed) {\r\n            this.isClosed = true;\r\n            this.readerQueue.Dispose(\"StreamReader closed\");\r\n            this.onClose();\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common/Stream.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError, IKeyValueStorage } from \"../common/Exports\";\r\n\r\nexport class LocalStorage implements IKeyValueStorage {\r\n\r\n    public Get = (key: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        return localStorage.getItem(key);\r\n    }\r\n\r\n    public GetOrAdd = (key: string, valueToAdd: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        const value = localStorage.getItem(key);\r\n        if (value === null || value === undefined) {\r\n            localStorage.setItem(key, valueToAdd);\r\n        }\r\n\r\n        return localStorage.getItem(key);\r\n    }\r\n\r\n    public Set = (key: string, value: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        localStorage.setItem(key, value);\r\n    }\r\n\r\n    public Remove = (key: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        localStorage.removeItem(key);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/LocalStorage.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { AudioStreamFormatImpl } from \"../../src/sdk/Audio/AudioStreamFormat\";\r\nimport { AudioStreamFormat } from \"../../src/sdk/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    CreateNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n    Promise,\r\n    PromiseHelper,\r\n    Stream,\r\n    StreamReader,\r\n} from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\n// Extending the default definition with browser specific definitions for backward compatibility\r\ninterface INavigatorUserMedia extends NavigatorUserMedia {\r\n    webkitGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    mozGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    msGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n}\r\n\r\nexport class MicAudioSource implements IAudioSource {\r\n\r\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n\r\n    private streams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private id: string;\r\n\r\n    private events: EventSource<AudioSourceEvent>;\r\n\r\n    private initializeDeferral: Deferred<boolean>;\r\n\r\n    private recorder: IRecorder;\r\n\r\n    private mediaStream: MediaStream;\r\n\r\n    private context: AudioContext;\r\n\r\n    public constructor(recorder: IRecorder, audioSourceId?: string) {\r\n        this.id = audioSourceId ? audioSourceId : CreateNoDashGuid();\r\n        this.events = new EventSource<AudioSourceEvent>();\r\n        this.recorder = recorder;\r\n    }\r\n\r\n    public get Format(): AudioStreamFormat {\r\n        return MicAudioSource.AUDIOFORMAT;\r\n    }\r\n\r\n    public TurnOn = (): Promise<boolean> => {\r\n        if (this.initializeDeferral) {\r\n            return this.initializeDeferral.Promise();\r\n        }\r\n\r\n        this.initializeDeferral = new Deferred<boolean>();\r\n\r\n        this.CreateAudioContext();\r\n\r\n        const nav = window.navigator as INavigatorUserMedia;\r\n\r\n        let getUserMedia = (\r\n            nav.getUserMedia ||\r\n            nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia ||\r\n            nav.msGetUserMedia\r\n        );\r\n\r\n        if (!!nav.mediaDevices) {\r\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\r\n                nav.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(successCallback)\r\n                    .catch(errorCallback);\r\n            };\r\n        }\r\n\r\n        if (!getUserMedia) {\r\n            const errorMsg = \"Browser does not support getUserMedia.\";\r\n            this.initializeDeferral.Reject(errorMsg);\r\n            this.OnEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        } else {\r\n            const next = () => {\r\n                this.OnEvent(new AudioSourceInitializingEvent(this.id)); // no stream id\r\n                getUserMedia(\r\n                    { audio: true, video: false },\r\n                    (mediaStream: MediaStream) => {\r\n                        this.mediaStream = mediaStream;\r\n                        this.OnEvent(new AudioSourceReadyEvent(this.id));\r\n                        this.initializeDeferral.Resolve(true);\r\n                    }, (error: MediaStreamError) => {\r\n                        const errorMsg = `Error occurred during microphone initialization: ${error}`;\r\n                        const tmp = this.initializeDeferral;\r\n                        // HACK: this should be handled through onError callbacks of all promises up the stack.\r\n                        // Unfortunately, the current implementation does not provide an easy way to reject promises\r\n                        // without a lot of code replication.\r\n                        // TODO: fix promise implementation, allow for a graceful reject chaining.\r\n                        this.initializeDeferral = null;\r\n                        tmp.Reject(errorMsg); // this will bubble up through the whole chain of promises,\r\n                        // with each new level adding extra \"Unhandled callback error\" prefix to the error message.\r\n                        // The following line is not guaranteed to be executed.\r\n                        this.OnEvent(new AudioSourceErrorEvent(this.id, errorMsg));\r\n                    });\r\n            };\r\n\r\n            if (this.context.state === \"suspended\") {\r\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\r\n                // https://github.com/WebAudio/web-audio-api/issues/790\r\n                this.context.resume().then(next, (reason: any) => {\r\n                    this.initializeDeferral.Reject(`Failed to initialize audio context: ${reason}`);\r\n                });\r\n            } else {\r\n                next();\r\n            }\r\n        }\r\n\r\n        return this.initializeDeferral.Promise();\r\n    }\r\n\r\n    public Id = (): string => {\r\n        return this.id;\r\n    }\r\n\r\n    public Attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\r\n        this.OnEvent(new AudioStreamNodeAttachingEvent(this.id, audioNodeId));\r\n\r\n        return this.Listen(audioNodeId).OnSuccessContinueWith<IAudioStreamNode>(\r\n            (streamReader: StreamReader<ArrayBuffer>) => {\r\n                this.OnEvent(new AudioStreamNodeAttachedEvent(this.id, audioNodeId));\r\n                return {\r\n                    Detach: () => {\r\n                        streamReader.Close();\r\n                        delete this.streams[audioNodeId];\r\n                        this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n                        this.TurnOff();\r\n                    },\r\n                    Id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    Read: () => {\r\n                        return streamReader.Read();\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public Detach = (audioNodeId: string): void => {\r\n        if (audioNodeId && this.streams[audioNodeId]) {\r\n            this.streams[audioNodeId].Close();\r\n            delete this.streams[audioNodeId];\r\n            this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public TurnOff = (): Promise<boolean> => {\r\n        for (const streamId in this.streams) {\r\n            if (streamId) {\r\n                const stream = this.streams[streamId];\r\n                if (stream) {\r\n                    stream.Close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.OnEvent(new AudioSourceOffEvent(this.id)); // no stream now\r\n        this.initializeDeferral = null;\r\n\r\n        this.DestroyAudioContext();\r\n\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    public get Events(): EventSource<AudioSourceEvent> {\r\n        return this.events;\r\n    }\r\n\r\n    private Listen = (audioNodeId: string): Promise<StreamReader<ArrayBuffer>> => {\r\n        return this.TurnOn()\r\n            .OnSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\r\n                const stream = new Stream<ArrayBuffer>(audioNodeId);\r\n                this.streams[audioNodeId] = stream;\r\n\r\n                try {\r\n                    this.recorder.Record(this.context, this.mediaStream, stream);\r\n                } catch (error) {\r\n                    this.OnEvent(new AudioStreamNodeErrorEvent(this.id, audioNodeId, error));\r\n                    throw error;\r\n                }\r\n\r\n                return stream.GetReader();\r\n            });\r\n    }\r\n\r\n    private OnEvent = (event: AudioSourceEvent): void => {\r\n        this.events.OnEvent(event);\r\n        Events.Instance.OnEvent(event);\r\n    }\r\n\r\n    private CreateAudioContext = (): void => {\r\n        if (!!this.context) {\r\n            return;\r\n        }\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        const AudioContext = ((window as any).AudioContext)\r\n            || ((window as any).webkitAudioContext)\r\n            || false;\r\n\r\n        if (!AudioContext) {\r\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\r\n        }\r\n\r\n        this.context = new AudioContext();\r\n    }\r\n\r\n    private DestroyAudioContext = (): void => {\r\n        if (!this.context) {\r\n            return;\r\n        }\r\n\r\n        this.recorder.ReleaseMediaResources(this.context);\r\n\r\n        if (\"close\" in this.context) {\r\n            this.context.close();\r\n            this.context = null;\r\n        } else if (this.context.state === \"running\") {\r\n            // Suspend actually takes a callback, but analogous to the\r\n            // resume method, it'll be only fired if suspend is called\r\n            // in a direct response to a user action. The later is not always\r\n            // the case, as TurnOff is also called, when we receive an\r\n            // end-of-speech message from the service. So, doing a best effort\r\n            // fire-and-forget here.\r\n            this.context.suspend();\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/MicAudioSource.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { AudioStreamFormat } from \"../../../src/sdk/Exports\";\r\nimport { FileAudioSource, MicAudioSource, PcmRecorder } from \"../../common.browser/Exports\";\r\nimport { AudioSourceEvent, EventSource, IAudioSource, IAudioStreamNode, Promise } from \"../../common/exports\";\r\nimport { AudioInputStream, PullAudioInputStreamCallback } from \"../Exports\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder();\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM with 16-bit samples, 16 kHz sample rate, and a single channel (Mono) is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback} audioStream - Specifies the custom audio input stream. Currently, only WAV / PCM with 16-bit samples, 16 kHz sample rate, and a single channel (Mono) is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream as PullAudioInputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private source: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.source = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get Format(): AudioStreamFormat {\r\n        return this.source.Format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.source.TurnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.Id\r\n     * @function\r\n     * @public\r\n     */\r\n    public Id(): string {\r\n        return this.source.Id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.TurnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<boolean>} A promise.\r\n     */\r\n    public TurnOn(): Promise<boolean> {\r\n        return this.source.TurnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.Attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public Attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.source.Attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.Detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public Detach(audioNodeId: string): void {\r\n        return this.Detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.TurnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<boolean>} A promise.\r\n     */\r\n    public TurnOff(): Promise<boolean> {\r\n        return this.source.TurnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.Events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get Events(): EventSource<AudioSourceEvent> {\r\n        return this.source.Events;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/Audio/AudioConfig.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be canceled.\r\n * @class CancellationReason\r\n */\r\nexport enum CancellationReason {\r\n    /**\r\n     * Indicates that an error occurred during speech recognition. Use getErrorDetails() contains detailed error response.\r\n     * @member CancellationReason.Error\r\n     */\r\n    Error,\r\n\r\n    /**\r\n     * Indicates that the end of the audio stream was reached.\r\n     * @member CancellationReason.EndOfStream\r\n     */\r\n    EndOfStream,\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/CancellationReason.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n /**\r\n  * An abstract base class that defines callback methods (read() and close()) for custom audio input streams).\r\n  * @class PullAudioInputStreamCallback\r\n  */\r\nexport abstract class PullAudioInputStreamCallback {\r\n\r\n    /**\r\n     * Reads data from audio input stream into the data buffer. The maximal number of bytes to be read is determined by the size of dataBuffer.\r\n     * @member PullAudioInputStreamCallback.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array to store the read data.\r\n     * @returns {number} the number of bytes have been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): number;\r\n\r\n    /**\r\n     * Closes the audio input stream.\r\n     * @member PullAudioInputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/Audio/PullAudioInputStreamCallback.ts","import { Contracts } from \"./Contracts\";\r\n\r\n//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Represents a keyword recognition model for recognizing when\r\n * the user says a keyword to initiate further speech recognition.\r\n * @class KeywordRecognitionModel\r\n */\r\nexport class KeywordRecognitionModel {\r\n    private disposed: boolean = false;\r\n\r\n    /**\r\n     * Create and initializes a new instance.\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromFile\r\n     * @function\r\n     * @public\r\n     * @param {string} fileName - A string that represents file name for the keyword recognition model.\r\n     *                 Note, the file can point to a zip file in which case the model will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromFile(fileName: string): KeywordRecognitionModel {\r\n        Contracts.throwIfFileDoesNotExist(fileName, \"fileName\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromStream\r\n     * @function\r\n     * @public\r\n     * @param {string} file - A File that represents file for the keyword recognition model.\r\n     *                 Note, the file can point to a zip file in which case the model will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromStream(file: File): KeywordRecognitionModel {\r\n        Contracts.throwIfNull(file, \"file\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member KeywordRecognitionModel.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        this.disposed = true;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/KeywordRecognitionModel.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.\r\n * @class SessionEventArgs\r\n */\r\nexport class SessionEventArgs {\r\n    private privSessionId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    /**\r\n     * Represents the session identifier.\r\n     * @member SessionEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Represents the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/SessionEventArgs.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports\";\r\n\r\n/**\r\n * Defines payload for session events like Speech Start/End Detected\r\n * @class\r\n */\r\nexport class RecognitionEventArgs extends SessionEventArgs {\r\n    private privOffset: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(offset: number, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privOffset = offset;\r\n    }\r\n\r\n    /**\r\n     * Represents the message offset\r\n     * @member RecognitionEventArgs.prototype.offset\r\n     * @function\r\n     * @public\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/RecognitionEventArgs.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Define Speech Recognizer output formats.\r\n * @class OutputFormat\r\n */\r\nexport enum OutputFormat {\r\n    /**\r\n     * @member OutputFormat.Simple\r\n     */\r\n    Simple = 0,\r\n\r\n    /**\r\n     * @member OutputFormat.Detailed\r\n     */\r\n    Detailed,\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/OutputFormat.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    IntentRecognitionResult,\r\n    RecognitionEventArgs,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Intent recognition result event arguments.\r\n * @class\r\n */\r\nexport class IntentRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: IntentRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param result - The result of the intent recognition.\r\n     * @param offset - The offset.\r\n     * @param sessionId - The session id.\r\n     */\r\n    public constructor(result: IntentRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Represents the intent recognition result.\r\n     * @member IntentRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {IntentRecognitionResult} Represents the intent recognition result.\r\n     */\r\n    public get result(): IntentRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/IntentRecognitionEventArgs.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { PropertyCollection, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class RecognitionResult\r\n */\r\nexport class RecognitionResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privText: string;\r\n    private privDuration: number;\r\n    private privOffset: number;\r\n    private privErrorDetails: string;\r\n    private privJson: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    constructor(resultId?: string, reason?: ResultReason, text?: string, duration?: number, offset?: number, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privText = text;\r\n        this.privDuration = duration;\r\n        this.privOffset = offset;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privJson = json;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member RecognitionResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member RecognitionResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * Presents the recognized text in the result.\r\n     * @member RecognitionResult.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} Presents the recognized text in the result.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Duration of recognized speech in 100 nano second incements.\r\n     * @member RecognitionResult.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration of recognized speech in 100 nano second incements.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Offset of recognized speech in 100 nano second incements.\r\n     * @member RecognitionResult.prototype.offset\r\n     * @function\r\n     * @public\r\n     * @returns {number} Offset of recognized speech in 100 nano second incements.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides a brief description of an occurred error.\r\n     * This field is only filled-out if the recognition status (@see RecognitionStatus) is set to Canceled.\r\n     * @member RecognitionResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * A string containing Json serialized recognition result as it was received from the service.\r\n     * @member RecognitionResult.prototype.json\r\n     * @function\r\n     * @private\r\n     * @returns {string} Json serialized representation of the result.\r\n     */\r\n    public get json(): string {\r\n        return this.privJson;\r\n    }\r\n\r\n    /**\r\n     *  The set of properties exposed in the result.\r\n     * @member RecognitionResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/RecognitionResult.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class SpeechRecognitionResult\r\n */\r\nexport class SpeechRecognitionResult extends RecognitionResult {\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string, duration?: number, offset?: number, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, errorDetails, json, properties);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/SpeechRecognitionResult.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    PropertyCollection,\r\n    ResultReason,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Intent recognition result.\r\n * @class\r\n */\r\nexport class IntentRecognitionResult extends SpeechRecognitionResult {\r\n    private privIntentId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param intentId - The intent id.\r\n     * @param resultId - The result id.\r\n     * @param reason - The reason.\r\n     * @param text - The recognized text.\r\n     * @param duration - The duration.\r\n     * @param offset - The offset into the stream.\r\n     * @param errorDetails - Error details, if provided.\r\n     * @param json - Additional Json, if provided.\r\n     * @param properties - Additional properties, if provided.\r\n     */\r\n    constructor(intentId?: string, resultId?: string, reason?: ResultReason, text?: string, duration?: number, offset?: number, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, errorDetails, json, properties);\r\n\r\n        this.privIntentId = intentId;\r\n    }\r\n\r\n    /**\r\n     * A String that represents the intent identifier being recognized.\r\n     * @member IntentRecognitionResult.prototype.intentId\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the intent identifier being recognized.\r\n     */\r\n    public get intentId(): string {\r\n        return this.privIntentId;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/IntentRecognitionResult.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError } from \"../common/Error\";\r\nimport { Contracts } from \"./Contracts\";\r\n\r\n/**\r\n * Language understanding model\r\n * @class LanguageUnderstandingModel\r\n */\r\nexport class LanguageUnderstandingModel {\r\n    /**\r\n     * Creates and initializes a new instance\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the specified endpoint.\r\n     * @member LanguageUnderstandingModel.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} uri - A String that represents the endpoint of the language understanding model.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromEndpoint(uri: URL): LanguageUnderstandingModel {\r\n        Contracts.throwIfNull(uri, \"uri\");\r\n        Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        // Need to extract the app ID from the URL.\r\n        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\r\n\r\n        // Start tearing the string apart.\r\n\r\n        // region can be extracted from the host name.\r\n        const firstDot: number = uri.host.indexOf(\".\");\r\n        if (-1 === firstDot) {\r\n            throw new Error(\"Could not determine region from endpoint\");\r\n        }\r\n        langModelImp.region = uri.host.substr(0, firstDot);\r\n\r\n        // Now the app ID.\r\n\r\n        const lastSegment: number = uri.pathname.lastIndexOf(\"/\") + 1;\r\n        if (-1 === lastSegment) {\r\n            throw new Error(\"Could not determine appId from endpoint\");\r\n        }\r\n\r\n        langModelImp.appId = uri.pathname.substr(lastSegment);\r\n\r\n        // And finally the key.\r\n        langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\r\n        if (undefined === langModelImp.subscriptionKey) {\r\n            throw new Error(\"Could not determine subscription key from endpoint\");\r\n        }\r\n\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the application id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromAppId\r\n     * @function\r\n     * @public\r\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromAppId(appId: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates a language understanding model using hostname, subscription key and application id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - A String that represents the subscription key of Language Understanding service.\r\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\r\n     * @param {LanguageUnderstandingModel} region - A String that represents the region of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, appId: string, region: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        langModelImp.region = region;\r\n        langModelImp.subscriptionKey = subscriptionKey;\r\n        return langModelImp;\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class LanguageUnderstandingModelImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {\r\n    public appId: string;\r\n    public region: string;\r\n    public subscriptionKey: string;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/LanguageUnderstandingModel.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    RecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines contents of speech recognizing/recognized event.\r\n * @class SpeechRecognitionEventArgs\r\n */\r\nexport class SpeechRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: SpeechRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechRecognitionResult} result - The speech recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: SpeechRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member SpeechRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): SpeechRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/SpeechRecognitionEventArgs.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    RecognitionEventArgs,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines content of a RecognitionErrorEvent.\r\n * @class SpeechRecognitionCanceledEventArgs\r\n */\r\nexport class SpeechRecognitionCanceledEventArgs extends RecognitionEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member SpeechRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code of why the cancellation occurred.\r\n     * @return An error code that represents the error reason.\r\n     * Added in version 1.1.0.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides a details of why the occurred error.\r\n     * This field is only filled-out if the reason canceled (@see getReason) is set to Error.\r\n     * @member SpeechRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/SpeechRecognitionCanceledEventArgs.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { RecognitionEventArgs, TranslationRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Translation text result event arguments.\r\n * @class TranslationRecognitionEventArgs\r\n */\r\nexport class TranslationRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationRecognitionResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/TranslationRecognitionEventArgs.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { SessionEventArgs, TranslationSynthesisResult } from \"./Exports\";\r\n\r\n/**\r\n * Translation Synthesis event arguments\r\n * @class TranslationSynthesisEventArgs\r\n */\r\nexport class TranslationSynthesisEventArgs extends SessionEventArgs {\r\n    private privResult: TranslationSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationSynthesisResult} result - The translation synthesis result.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationSynthesisResult, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the translation synthesis result.\r\n     * @member TranslationSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationSynthesisResult} Specifies the translation synthesis result.\r\n     */\r\n    public get result(): TranslationSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/TranslationSynthesisEventArgs.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult, Translations } from \"./Exports\";\r\n\r\n/**\r\n * Translation text result.\r\n * @class TranslationRecognitionResult\r\n */\r\nexport class TranslationRecognitionResult extends SpeechRecognitionResult {\r\n    private privTranslations: Translations;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {Translations} translations - The translations.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(translations: Translations, resultId?: string, reason?: ResultReason, text?: string, duration?: number, offset?: number, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, errorDetails, json, properties);\r\n\r\n        this.privTranslations = translations;\r\n    }\r\n\r\n    /**\r\n     * Presents the translation results. Each item in the dictionary represents a translation result in one of target languages, where the key\r\n     * is the name of the target language, in BCP-47 format, and the value is the translation text in the specified language.\r\n     * @member TranslationRecognitionResult.prototype.translations\r\n     * @function\r\n     * @public\r\n     * @returns {Translations} the current translation map that holds all translations requested.\r\n     */\r\n    public get translations(): Translations {\r\n        return this.privTranslations;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/TranslationRecognitionResult.ts","import { ResultReason } from \"./ResultReason\";\r\n\r\n//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Defines translation synthesis result, i.e. the voice output of the translated text in the target language.\r\n * @class TranslationSynthesisResult\r\n */\r\nexport class TranslationSynthesisResult {\r\n    private privReason: ResultReason;\r\n    private privAudio: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ResultReason} reason - The synthesis reason.\r\n     * @param {ArrayBuffer} audio - The audio data.\r\n     */\r\n    constructor(reason: ResultReason, audio: ArrayBuffer) {\r\n        this.privReason = reason;\r\n        this.privAudio = audio;\r\n    }\r\n\r\n    /**\r\n     * Translated text in the target language.\r\n     * @member TranslationSynthesisResult.prototype.audio\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} Translated audio in the target language.\r\n     */\r\n    public get audio(): ArrayBuffer {\r\n        return this.privAudio;\r\n    }\r\n\r\n    /**\r\n     * The synthesis status.\r\n     * @member TranslationSynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} The synthesis status.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/TranslationSynthesisResult.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be generated.\r\n * @class ResultReason\r\n */\r\nexport enum ResultReason {\r\n    /**\r\n     * Indicates speech could not be recognized. More details can be found in the NoMatchDetails object.\r\n     * @member ResultReason.NoMatch\r\n     */\r\n    NoMatch,\r\n\r\n    /**\r\n     * Indicates that the recognition was canceled. More details can be found using the CancellationDetails object.\r\n     * @member ResultReason.Canceled\r\n     */\r\n    Canceled,\r\n\r\n    /**\r\n     * Indicates the speech result contains hypothesis text.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizingSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains final text that has been recognized.\r\n     * Speech Recognition is now complete for this phrase.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizedSpeech,\r\n\r\n    /**\r\n     * Indicates the intent result contains hypothesis text and intent.\r\n     * @member ResultReason.RecognizingIntent\r\n     */\r\n    RecognizingIntent,\r\n\r\n    /**\r\n     * Indicates the intent result contains final text and intent.\r\n     * Speech Recognition and Intent determination are now complete for this phrase.\r\n     * @member ResultReason.RecognizedIntent\r\n     */\r\n    RecognizedIntent,\r\n\r\n    /**\r\n     * Indicates the translation result contains hypothesis text and its translation(s).\r\n     * @member ResultReason.TranslatingSpeech\r\n     */\r\n    TranslatingSpeech,\r\n\r\n    /**\r\n     * Indicates the translation result contains final text and corresponding translation(s).\r\n     * Speech Recognition and Translation are now complete for this phrase.\r\n     * @member ResultReason.TranslatedSpeech\r\n     */\r\n    TranslatedSpeech,\r\n\r\n    /**\r\n     * Indicates the synthesized audio result contains a non-zero amount of audio data\r\n     * @member ResultReason.SynthesizingAudio\r\n     */\r\n    SynthesizingAudio,\r\n\r\n    /**\r\n     * Indicates the synthesized audio is now complete for this phrase.\r\n     * @member ResultReason.SynthesizingAudioCompleted\r\n     */\r\n    SynthesizingAudioCompleted,\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/ResultReason.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Speech configuration.\r\n * @class SpeechConfig\r\n */\r\nexport abstract class SpeechConfig {\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\r\n     * @member SpeechConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} The speech factory\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech factory with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n     * the language setting in uri takes precedence, and the effective language is \"de-DE\".\r\n     * @member SpeechConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech factory with specified initial authorization token and region.\r\n     * @member SpeechConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The initial authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.authorizationToken = authorizationToken;\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Returns the current authorization token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get authorizationToken(): string;\r\n\r\n    /**\r\n     * Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Sets the input language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n    /**\r\n     * Sets output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set outputFormat(format: OutputFormat);\r\n\r\n    /**\r\n     * Gets output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} Returns the output format.\r\n     */\r\n    public abstract get outputFormat(): OutputFormat;\r\n\r\n    /**\r\n     * Sets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The endpoint ID\r\n     */\r\n    public abstract set endpointId(value: string);\r\n\r\n    /**\r\n     * Gets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @return {string} The endpoint ID\r\n     */\r\n    public abstract get endpointId(): string;\r\n\r\n    /**\r\n     * Closes the configuration.\r\n     * @member SpeechConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    /* tslint:disable:no-empty */\r\n    public close(): void { }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class SpeechConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechConfigImpl extends SpeechConfig {\r\n\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get endPoint(): URL {\r\n        return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\r\n    }\r\n\r\n    public get subscriptionKey(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n    }\r\n\r\n    public get region(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public set speechRecognitionLanguage(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return (OutputFormat as any)[this.privProperties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple])];\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    public set endpointId(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privProperties.setProperty(name, value);\r\n    }\r\n\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n\r\n        return this.privProperties.getProperty(name, def);\r\n    }\r\n\r\n    public clone(): SpeechConfigImpl {\r\n        const ret: SpeechConfigImpl = new SpeechConfigImpl();\r\n        ret.privProperties = this.privProperties.clone();\r\n        return ret;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/SpeechConfig.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError, Promise, PromiseHelper } from \"../common/Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\n\r\nconst AuthHeader: string = \"Ocp-Apim-Subscription-Key\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private authInfo: AuthInfo;\r\n\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.authInfo = new AuthInfo(AuthHeader, subscriptionKey);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    public Fetch = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return PromiseHelper.FromResult(this.authInfo);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    public FetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return PromiseHelper.FromResult(this.authInfo);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/CognitiveSubscriptionKeyAuthentication.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError, Promise, PromiseHelper } from \"../common/Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\n\r\nconst AuthHeader: string = \"Authorization\";\r\n\r\nexport class CognitiveTokenAuthentication implements IAuthentication {\r\n    private fetchCallback: (authFetchEventId: string) => Promise<string>;\r\n    private fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\r\n\r\n    constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\r\n        if (!fetchCallback) {\r\n            throw new ArgumentNullError(\"fetchCallback\");\r\n        }\r\n\r\n        if (!fetchOnExpiryCallback) {\r\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\r\n        }\r\n\r\n        this.fetchCallback = fetchCallback;\r\n        this.fetchOnExpiryCallback = fetchOnExpiryCallback;\r\n    }\r\n\r\n    public Fetch = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return  this.fetchCallback(authFetchEventId).OnSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\r\n    }\r\n\r\n    public FetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return  this.fetchOnExpiryCallback(authFetchEventId).OnSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/CognitiveTokenAuthentication.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { WebsocketConnection } from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n    Promise,\r\n    Storage,\r\n} from \"../common/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    SpeechResultFormat,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\n\r\nconst TestHooksParamName: string = \"testhooks\";\r\nconst ConnectionIdHeader: string = \"X-ConnectionId\";\r\n\r\nexport class IntentConnectionFactory implements IConnectionFactory {\r\n\r\n    public Create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\r\n\r\n            endpoint = this.Host() + Storage.Local.GetOrAdd(\"TranslationRelativeUri\", \"/speech/\" + this.GetSpeechRegionFromIntentRegion(region) + \"/recognition/interactive/cognitiveservices/v1\");\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        if (this.IsDebugModeEnabled) {\r\n            queryParams[TestHooksParamName] = \"1\";\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[authInfo.HeaderName] = authInfo.Token;\r\n        headers[ConnectionIdHeader] = connectionId;\r\n\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), connectionId);\r\n    }\r\n\r\n    private Host(): string {\r\n        return Storage.Local.GetOrAdd(\"Host\", \"wss://speech.platform.bing.com\");\r\n    }\r\n\r\n    private get IsDebugModeEnabled(): boolean {\r\n        const value = Storage.Local.GetOrAdd(\"IsDebugModeEnabled\", \"false\");\r\n        return value.toLowerCase() === \"true\";\r\n    }\r\n\r\n    private GetSpeechRegionFromIntentRegion(intentRegion: string): string {\r\n        switch (intentRegion) {\r\n            case \"West US\":\r\n            case \"US West\":\r\n            case \"westus\":\r\n                return \"uswest\";\r\n            case \"West US 2\":\r\n            case \"US West 2\":\r\n            case \"westus2\":\r\n                return \"uswest2\";\r\n            case \"South Central US\":\r\n            case \"US South Central\":\r\n            case \"southcentralus\":\r\n                return \"ussouthcentral\";\r\n            case \"West Central US\":\r\n            case \"US West Central\":\r\n            case \"westcentralus\":\r\n                return \"uswestcentral\";\r\n            case \"East US\":\r\n            case \"US East\":\r\n            case \"eastus\":\r\n                return \"useast\";\r\n            case \"East US 2\":\r\n            case \"US East 2\":\r\n            case \"eastus2\":\r\n                return \"useast2\";\r\n            case \"West Europe\":\r\n            case \"Europe West\":\r\n            case \"westeurope\":\r\n                return \"europewest\";\r\n            case \"North Europe\":\r\n            case \"Europe North\":\r\n            case \"northeurope\":\r\n                return \"europenorth\";\r\n            case \"Brazil South\":\r\n            case \"South Brazil\":\r\n            case \"southbrazil\":\r\n                return \"brazilsouth\";\r\n            case \"Australia East\":\r\n            case \"East Australia\":\r\n            case \"eastaustralia\":\r\n                return \"australiaeast\";\r\n            case \"Southeast Asia\":\r\n            case \"Asia Southeast\":\r\n            case \"southeastasia\":\r\n                return \"asiasoutheast\";\r\n            case \"East Asia\":\r\n            case \"Asia East\":\r\n            case \"eastasia\":\r\n                return \"asiaeast\";\r\n            default:\r\n                return intentRegion;\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/IntentConnectionFactory.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    CreateNoDashGuid,\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    Promise,\r\n    PromiseHelper,\r\n    PromiseResult,\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    RequestSession,\r\n    SpeechDetected,\r\n} from \"./Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private authentication: IAuthentication;\r\n    private connectionFactory: IConnectionFactory;\r\n    private connection: IConnection;\r\n    private audioSource: IAudioSource;\r\n    private speechConfigConnectionId: string;\r\n    private connectionFetchPromise: Promise<IConnection>;\r\n    private connectionId: string;\r\n    private authFetchEventId: string;\r\n    private isDisposed: boolean;\r\n    private recognizer: Recognizer;\r\n\r\n    protected recognizerConfig: RecognizerConfig;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.authentication = authentication;\r\n        this.connectionFactory = connectionFactory;\r\n        this.audioSource = audioSource;\r\n        this.recognizerConfig = recognizerConfig;\r\n        this.isDisposed = false;\r\n        this.recognizer = recognizer;\r\n    }\r\n\r\n    public get AudioSource(): IAudioSource {\r\n        return this.audioSource;\r\n    }\r\n\r\n    public IsDisposed(): boolean {\r\n        return this.isDisposed;\r\n    }\r\n    public Dispose(reason?: string): void {\r\n        this.isDisposed = true;\r\n        if (this.connection) {\r\n            this.connection.Dispose(reason);\r\n            this.connection = undefined;\r\n        }\r\n    }\r\n\r\n    public Recognize(\r\n        speechContextJson: string,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<boolean> {\r\n\r\n        const requestSession = new RequestSession(this.audioSource.Id());\r\n\r\n        requestSession.ListenForServiceTelemetry(this.audioSource.Events);\r\n\r\n        return this.audioSource\r\n            .Attach(requestSession.AudioNodeId)\r\n            .ContinueWithPromise<boolean>((result: PromiseResult<IAudioStreamNode>) => {\r\n                if (result.IsError) {\r\n                    this.ErrorCallback(result.Error);\r\n                    throw new Error(result.Error);\r\n                } else {\r\n                    requestSession.OnAudioSourceAttachCompleted(result.Result, false);\r\n                }\r\n\r\n                const audioNode = result.Result;\r\n\r\n                return this.FetchConnection(requestSession)\r\n                    .On((connection: IConnection) => {\r\n                        const messageRetrievalPromise = this.ReceiveMessage(connection, requestSession, successCallback, errorCallBack);\r\n                        const messageSendPromise = this.SendSpeechConfig(requestSession.RequestId, connection, this.recognizerConfig.PlatformConfig.Serialize())\r\n                            .OnSuccessContinueWithPromise((_: boolean) => {\r\n                                return this.SendSpeechContext(requestSession.RequestId, connection, speechContextJson)\r\n                                    .OnSuccessContinueWithPromise((_: boolean) => {\r\n                                        return this.SendAudio(requestSession.RequestId, connection, audioNode, requestSession);\r\n                                    });\r\n                            });\r\n\r\n                        const completionPromise = PromiseHelper.WhenAll([messageRetrievalPromise, messageSendPromise]);\r\n\r\n                        completionPromise.On((r: boolean) => {\r\n                            requestSession.Dispose();\r\n                            this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                        }, (error: string) => {\r\n                            requestSession.Dispose(error);\r\n                            this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                        });\r\n\r\n                        return completionPromise;\r\n                    }, (error: string) => {\r\n                        this.ConnectionError(requestSession.SessionId, requestSession.RequestId, error);\r\n                    }).OnSuccessContinueWithPromise(() => {\r\n                        return requestSession.CompletionPromise;\r\n                    });\r\n            });\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static TelemetryData: (json: string) => void;\r\n\r\n    protected abstract ConnectionError(sessionId: string, requestId: string, error: string): void;\r\n\r\n    protected abstract ProcessTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        requestSession: RequestSession,\r\n        connection: IConnection,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): void;\r\n\r\n    protected SendTelemetryData = (requestId: string, connection: IConnection, telemetryData: string) => {\r\n        if (!!ServiceRecognizerBase.TelemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.TelemetryData(telemetryData);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        return connection\r\n            .Send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"telemetry\",\r\n                requestId,\r\n                \"application/json\",\r\n                telemetryData));\r\n    }\r\n\r\n    private ErrorCallback(error: string): void {\r\n        throw new Error(error);\r\n    }\r\n\r\n    private FetchConnection = (requestSession: RequestSession, isUnAuthorized: boolean = false): Promise<IConnection> => {\r\n        if (this.connectionFetchPromise) {\r\n            if (this.connectionFetchPromise.Result().IsError\r\n                || this.connectionFetchPromise.Result().Result.State() === ConnectionState.Disconnected) {\r\n                this.connectionId = null;\r\n                this.connectionFetchPromise = null;\r\n                return this.FetchConnection(requestSession);\r\n            } else {\r\n                requestSession.OnPreConnectionStart(this.authFetchEventId, this.connectionId);\r\n                requestSession.OnConnectionEstablishCompleted(200);\r\n                requestSession.ListenForServiceTelemetry(this.connectionFetchPromise.Result().Result.Events);\r\n                return this.connectionFetchPromise;\r\n            }\r\n        }\r\n\r\n        this.authFetchEventId = CreateNoDashGuid();\r\n        this.connectionId = CreateNoDashGuid();\r\n\r\n        requestSession.OnPreConnectionStart(this.authFetchEventId, this.connectionId);\r\n\r\n        const authPromise = isUnAuthorized ? this.authentication.FetchOnExpiry(this.authFetchEventId) : this.authentication.Fetch(this.authFetchEventId);\r\n\r\n        this.connectionFetchPromise = authPromise\r\n            .ContinueWithPromise((result: PromiseResult<AuthInfo>) => {\r\n                if (result.IsError) {\r\n                    requestSession.OnAuthCompleted(true, result.Error);\r\n                    throw new Error(result.Error);\r\n                } else {\r\n                    requestSession.OnAuthCompleted(false);\r\n                }\r\n\r\n                if (this.connection) {\r\n                    this.connection.Dispose();\r\n                    this.connection = undefined;\r\n                }\r\n\r\n                this.connection = this.connectionFactory.Create(this.recognizerConfig, result.Result, this.connectionId);\r\n                requestSession.ListenForServiceTelemetry(this.connection.Events);\r\n\r\n                return this.connection.Open().OnSuccessContinueWithPromise((response: ConnectionOpenResponse) => {\r\n                    if (response.StatusCode === 200) {\r\n                        requestSession.OnConnectionEstablishCompleted(response.StatusCode);\r\n                        return PromiseHelper.FromResult(this.connection);\r\n                    } else if (response.StatusCode === 403 && !isUnAuthorized) {\r\n                        return this.FetchConnection(requestSession, true);\r\n                    } else {\r\n                        requestSession.OnConnectionEstablishCompleted(response.StatusCode, response.Reason);\r\n                        return PromiseHelper.FromError<IConnection>(`Unable to contact server. StatusCode: ${response.StatusCode}, Reason: ${response.Reason}`);\r\n                    }\r\n                });\r\n            });\r\n\r\n        return this.connectionFetchPromise;\r\n    }\r\n\r\n    private ReceiveMessage = (\r\n        connection: IConnection,\r\n        requestSession: RequestSession,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<boolean> => {\r\n        return connection\r\n            .Read()\r\n            .OnSuccessContinueWithPromise((message: ConnectionMessage) => {\r\n                // indicates we are draining the queue and it came with no message;\r\n                if (!message) {\r\n                    return PromiseHelper.FromResult(true);\r\n                }\r\n\r\n                const connectionMessage = SpeechConnectionMessage.FromConnectionMessage(message);\r\n\r\n                if (connectionMessage.RequestId.toLowerCase() === requestSession.RequestId.toLowerCase()) {\r\n                    switch (connectionMessage.Path.toLowerCase()) {\r\n                        case \"turn.start\":\r\n                            const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(requestSession.SessionId);\r\n\r\n                            if (!!this.recognizer.sessionStarted) {\r\n                                this.recognizer.sessionStarted(this.recognizer, sessionStartEventArgs);\r\n                            }\r\n                            break;\r\n                        case \"speech.startdetected\":\r\n                            const speechStartDetected: SpeechDetected = SpeechDetected.FromJSON(connectionMessage.TextBody);\r\n\r\n                            const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, requestSession.SessionId);\r\n\r\n                            if (!!this.recognizer.speechStartDetected) {\r\n                                this.recognizer.speechStartDetected(this.recognizer, speechStartEventArgs);\r\n                            }\r\n\r\n                            break;\r\n                        case \"speech.enddetected\":\r\n\r\n                            let json: string;\r\n\r\n                            if (connectionMessage.TextBody.length > 0) {\r\n                                json = connectionMessage.TextBody;\r\n                            } else {\r\n                                // If the request was empty, the JSON returned is empty.\r\n                                json = \"{ Offset: 0 }\";\r\n                            }\r\n\r\n                            const speechStopDetected: SpeechDetected = SpeechDetected.FromJSON(json);\r\n\r\n                            const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset, requestSession.SessionId);\r\n\r\n                            if (!!this.recognizer.speechEndDetected) {\r\n                                this.recognizer.speechEndDetected(this.recognizer, speechStopEventArgs);\r\n                            }\r\n\r\n                            break;\r\n                        case \"turn.end\":\r\n                            const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(requestSession.SessionId);\r\n\r\n                            if (!!this.recognizer.sessionStopped) {\r\n                                this.recognizer.sessionStopped(this.recognizer, sessionStopEventArgs);\r\n                            }\r\n                            requestSession.OnServiceTurnEndResponse();\r\n                            return PromiseHelper.FromResult(true);\r\n                        default:\r\n                            this.ProcessTypeSpecificMessages(\r\n                                connectionMessage,\r\n                                requestSession,\r\n                                connection,\r\n                                successCallback,\r\n                                errorCallBack);\r\n                    }\r\n                }\r\n\r\n                return this.ReceiveMessage(connection, requestSession, successCallback, errorCallBack);\r\n            });\r\n    }\r\n\r\n    private SendSpeechConfig = (requestId: string, connection: IConnection, speechConfigJson: string) => {\r\n        if (speechConfigJson && this.connectionId !== this.speechConfigConnectionId) {\r\n            this.speechConfigConnectionId = this.connectionId;\r\n            return connection\r\n                .Send(new SpeechConnectionMessage(\r\n                    MessageType.Text,\r\n                    \"speech.config\",\r\n                    requestId,\r\n                    \"application/json\",\r\n                    speechConfigJson));\r\n        }\r\n\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    private SendSpeechContext = (requestId: string, connection: IConnection, speechContextJson: string) => {\r\n        if (speechContextJson) {\r\n            return connection\r\n                .Send(new SpeechConnectionMessage(\r\n                    MessageType.Text,\r\n                    \"speech.context\",\r\n                    requestId,\r\n                    \"application/json\",\r\n                    speechContextJson));\r\n        }\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    private SendAudio = (\r\n        requestId: string,\r\n        connection: IConnection,\r\n        audioStreamNode: IAudioStreamNode,\r\n        requestSession: RequestSession): Promise<boolean> => {\r\n        // NOTE: Home-baked promises crash ios safari during the invocation\r\n        // of the error callback chain (looks like the recursion is way too deep, and\r\n        // it blows up the stack). The following construct is a stop-gap that does not\r\n        // bubble the error up the callback chain and hence circumvents this problem.\r\n        // TODO: rewrite with ES6 promises.\r\n        const deferred = new Deferred<boolean>();\r\n\r\n        // The time we last sent data to the service.\r\n        let lastSendTime: number = 0;\r\n\r\n        const audioFormat: AudioStreamFormatImpl = this.audioSource.Format as AudioStreamFormatImpl;\r\n\r\n        const readAndUploadCycle = (_: boolean) => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.isDisposed && !requestSession.IsSpeechEnded && !requestSession.IsCompleted) {\r\n                audioStreamNode.Read().On(\r\n                    (audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\r\n                        // we have a new audio chunk to upload.\r\n                        if (requestSession.IsSpeechEnded) {\r\n                            // If service already recognized audio end then dont send any more audio\r\n                            deferred.Resolve(true);\r\n                            return;\r\n                        }\r\n\r\n                        const payload = (audioStreamChunk.IsEnd) ? null : audioStreamChunk.Buffer;\r\n                        const uploaded = connection.Send(\r\n                            new SpeechConnectionMessage(\r\n                                MessageType.Binary, \"audio\", requestId, null, payload));\r\n\r\n                        if (!audioStreamChunk.IsEnd) {\r\n\r\n                            // Caculate any delay to the audio stream needed. /2 to allow 2x real time transmit rate max.\r\n                            const minSendTime = ((payload.byteLength / audioFormat.avgBytesPerSec) / 2) * 1000;\r\n\r\n                            const delay: number = Math.max(0, (lastSendTime - Date.now() + minSendTime));\r\n\r\n                            uploaded.OnSuccessContinueWith((result: boolean) => {\r\n                                setTimeout(() => {\r\n                                    lastSendTime = Date.now();\r\n                                    readAndUploadCycle(result);\r\n                                }, delay);\r\n                            });\r\n                        } else {\r\n                            // the audio stream has been closed, no need to schedule next\r\n                            // read-upload cycle.\r\n                            deferred.Resolve(true);\r\n                        }\r\n                    },\r\n                    (error: string) => {\r\n                        if (requestSession.IsSpeechEnded) {\r\n                            // For whatever reason, Reject is used to remove queue subscribers inside\r\n                            // the Queue.DrainAndDispose invoked from DetachAudioNode down blow, which\r\n                            // means that sometimes things can be rejected in normal circumstances, without\r\n                            // any errors.\r\n                            deferred.Resolve(true); // TODO: remove the argument, it's is completely meaningless.\r\n                        } else {\r\n                            // Only reject, if there was a proper error.\r\n                            deferred.Reject(error);\r\n                        }\r\n                    });\r\n            }\r\n        };\r\n\r\n        readAndUploadCycle(true);\r\n\r\n        return deferred.Promise();\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/ServiceRecognizerBase.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionMessage,\r\n    IStringDictionary,\r\n    MessageType,\r\n} from \"../common/Exports\";\r\n\r\nconst PathHeaderName: string = \"path\";\r\nconst ContentTypeHeaderName: string = \"content-type\";\r\nconst RequestIdHeaderName: string = \"x-requestid\";\r\nconst RequestTimestampHeaderName: string = \"x-timestamp\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private path: string;\r\n    private requestId: string;\r\n    private contentType: string;\r\n    private additionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[PathHeaderName] = path;\r\n        headers[RequestIdHeaderName] = requestId;\r\n        headers[RequestTimestampHeaderName] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[ContentTypeHeaderName] = contentType;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.path = path;\r\n        this.requestId = requestId;\r\n        this.contentType = contentType;\r\n        this.additionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get Path(): string {\r\n        return this.path;\r\n    }\r\n\r\n    public get RequestId(): string {\r\n        return this.requestId;\r\n    }\r\n\r\n    public get ContentType(): string {\r\n        return this.contentType;\r\n    }\r\n\r\n    public get AdditionalHeaders(): IStringDictionary<string> {\r\n        return this.additionalHeaders;\r\n    }\r\n\r\n    public static FromConnectionMessage = (message: ConnectionMessage): SpeechConnectionMessage => {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        let requestTimestamp = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.Headers) {\r\n            for (const headerName in message.Headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === PathHeaderName.toLowerCase()) {\r\n                        path = message.Headers[headerName];\r\n                    } else if (headerName.toLowerCase() === RequestIdHeaderName.toLowerCase()) {\r\n                        requestId = message.Headers[headerName];\r\n                    } else if (headerName.toLowerCase() === RequestTimestampHeaderName.toLowerCase()) {\r\n                        requestTimestamp = message.Headers[headerName];\r\n                    } else if (headerName.toLowerCase() === ContentTypeHeaderName.toLowerCase()) {\r\n                        contentType = message.Headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.Headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.MessageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.Body,\r\n            additionalHeaders,\r\n            message.Id);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/SpeechConnectionMessage.Internal.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { PropertyCollection } from \"../sdk/Exports\";\r\n\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private recognitionMode: RecognitionMode = RecognitionMode.Interactive;\r\n    private platformConfig: PlatformConfig;\r\n    private recognitionActivityTimeout: number;\r\n    private speechConfig: PropertyCollection;\r\n\r\n    constructor(\r\n        platformConfig: PlatformConfig,\r\n        recognitionMode: RecognitionMode = RecognitionMode.Interactive,\r\n        speechConfig: PropertyCollection) {\r\n        this.platformConfig = platformConfig ? platformConfig : new PlatformConfig(new Context(null));\r\n        this.recognitionMode = recognitionMode;\r\n        this.recognitionActivityTimeout = recognitionMode === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.speechConfig = speechConfig;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.speechConfig;\r\n    }\r\n\r\n    public get RecognitionMode(): RecognitionMode {\r\n        return this.recognitionMode;\r\n    }\r\n\r\n    public get PlatformConfig(): PlatformConfig {\r\n        return this.platformConfig;\r\n    }\r\n\r\n    public get RecognitionActivityTimeout(): number {\r\n        return this.recognitionActivityTimeout;\r\n    }\r\n\r\n    public get IsContinuousRecognition(): boolean {\r\n        return this.recognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PlatformConfig {\r\n    private context: Context;\r\n\r\n    constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public Serialize = (): string => {\r\n        return JSON.stringify(this, (key: any, value: any): any => {\r\n            if (value && typeof value === \"object\") {\r\n                const replacement: any = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Context {\r\n    private system: System;\r\n    private os: OS;\r\n\r\n    constructor(os: OS) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n\r\n    public get System(): System {\r\n        return this.system;\r\n    }\r\n\r\n    public get OS(): OS {\r\n        return this.os;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class System {\r\n    private name: string;\r\n    private version: string;\r\n    private build: string;\r\n    private lang: string;\r\n    constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.1.0\";\r\n\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n    public get Version(): string {\r\n        // Controlled by sdk\r\n        return this.version;\r\n    }\r\n    public get Lang(): string {\r\n        // Controlled by sdk\r\n        return this.lang;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class OS {\r\n\r\n    private platform: string;\r\n    private name: string;\r\n    private version: string;\r\n\r\n    constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n\r\n    public get Platform(): string {\r\n        return this.platform;\r\n    }\r\n\r\n    public get Name(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public get Version(): string {\r\n        return this.version;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Device {\r\n\r\n    private manufacturer: string;\r\n    private model: string;\r\n    private version: string;\r\n\r\n    constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n\r\n    public get Manufacturer(): string {\r\n        return this.manufacturer;\r\n    }\r\n\r\n    public get Model(): string {\r\n        return this.model;\r\n    }\r\n\r\n    public get Version(): string {\r\n        return this.version;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/RecognizerConfig.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Promise,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\n\r\nconst CRLF: string = \"\\r\\n\";\r\n\r\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    public ToConnectionMessage = (message: RawWebsocketMessage): Promise<ConnectionMessage> => {\r\n        const deferral = new Deferred<ConnectionMessage>();\r\n\r\n        try {\r\n            if (message.MessageType === MessageType.Text) {\r\n                const textMessage: string = message.TextContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: string = null;\r\n\r\n                if (textMessage) {\r\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                    if (headerBodySplit && headerBodySplit.length > 0) {\r\n                        headers = this.ParseHeaders(headerBodySplit[0]);\r\n                        if (headerBodySplit.length > 1) {\r\n                            body = headerBodySplit[1];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                deferral.Resolve(new ConnectionMessage(message.MessageType, body, headers, message.Id));\r\n            } else if (message.MessageType === MessageType.Binary) {\r\n                const binaryMessage: ArrayBuffer = message.BinaryContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: ArrayBuffer = null;\r\n\r\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                }\r\n\r\n                const dataView = new DataView(binaryMessage);\r\n                const headerLength = dataView.getInt16(0);\r\n\r\n                if (binaryMessage.byteLength < headerLength + 2) {\r\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                }\r\n\r\n                let headersString = \"\";\r\n                for (let i = 0; i < headerLength; i++) {\r\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                }\r\n\r\n                headers = this.ParseHeaders(headersString);\r\n\r\n                if (binaryMessage.byteLength > headerLength + 2) {\r\n                    body = binaryMessage.slice(2 + headerLength);\r\n                }\r\n\r\n                deferral.Resolve(new ConnectionMessage(message.MessageType, body, headers, message.Id));\r\n            }\r\n        } catch (e) {\r\n            deferral.Reject(`Error formatting the message. Error: ${e}`);\r\n        }\r\n\r\n        return deferral.Promise();\r\n    }\r\n\r\n    public FromConnectionMessage = (message: ConnectionMessage): Promise<RawWebsocketMessage> => {\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.MessageType === MessageType.Text) {\r\n                const payload = `${this.MakeHeaders(message)}${CRLF}${message.TextBody ? message.TextBody : \"\"}`;\r\n\r\n                deferral.Resolve(new RawWebsocketMessage(MessageType.Text, payload, message.Id));\r\n\r\n            } else if (message.MessageType === MessageType.Binary) {\r\n                const headersString = this.MakeHeaders(message);\r\n                const content = message.BinaryBody;\r\n\r\n                const headerInt8Array = new Int8Array(this.StringToArrayBuffer(headersString));\r\n\r\n                const payload = new ArrayBuffer(2 + headerInt8Array.byteLength + (content ? content.byteLength : 0));\r\n                const dataView = new DataView(payload);\r\n\r\n                dataView.setInt16(0, headerInt8Array.length);\r\n\r\n                for (let i = 0; i < headerInt8Array.byteLength; i++) {\r\n                    dataView.setInt8(2 + i, headerInt8Array[i]);\r\n                }\r\n\r\n                if (content) {\r\n                    const bodyInt8Array = new Int8Array(content);\r\n                    for (let i = 0; i < bodyInt8Array.byteLength; i++) {\r\n                        dataView.setInt8(2 + headerInt8Array.byteLength + i, bodyInt8Array[i]);\r\n                    }\r\n                }\r\n\r\n                deferral.Resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.Id));\r\n            }\r\n        } catch (e) {\r\n            deferral.Reject(`Error formatting the message. ${e}`);\r\n        }\r\n\r\n        return deferral.Promise();\r\n    }\r\n\r\n    private MakeHeaders = (message: ConnectionMessage): string => {\r\n        let headersString: string = \"\";\r\n\r\n        if (message.Headers) {\r\n            for (const header in message.Headers) {\r\n                if (header) {\r\n                    headersString += `${header}: ${message.Headers[header]}${CRLF}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return headersString;\r\n    }\r\n\r\n    private ParseHeaders = (headersString: string): IStringDictionary<string> => {\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (headersString) {\r\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n            if (headers) {\r\n                for (const header of headerMatches) {\r\n                    if (header) {\r\n                        const separatorIndex = header.indexOf(\":\");\r\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\r\n                        const headerValue =\r\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\r\n                                header.substr(separatorIndex + 1).trim() :\r\n                                \"\";\r\n\r\n                        headers[headerName] = headerValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    private StringToArrayBuffer = (str: string): ArrayBuffer => {\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new DataView(buffer);\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(i, str.charCodeAt(i));\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/WebsocketMessageFormatter.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nexport class QueryParameterNames {\r\n    public static get TestHooksParamName(): string {\r\n        return \"testhooks\";\r\n    }\r\n    public static get ConnectionIdHeader(): string {\r\n        return \"X-ConnectionId\";\r\n    }\r\n    public static get DeploymentIdParamName(): string {\r\n        return \"cid\";\r\n    }\r\n    public static get FormatParamName(): string {\r\n        return \"format\";\r\n    }\r\n    public static get LanguageParamName(): string {\r\n        return \"language\";\r\n    }\r\n    public static get TranslationFromParamName(): string {\r\n        return \"from\";\r\n    }\r\n    public static get TranslationToParamName(): string {\r\n        return \"to\";\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/QueryParameterNames.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { WebsocketConnection } from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n    Storage,\r\n} from \"../common/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\n\r\nconst TestHooksParamName: string = \"testhooks\";\r\nconst ConnectionIdHeader: string = \"X-ConnectionId\";\r\n\r\nexport class TranslationConnectionFactory implements IConnectionFactory {\r\n\r\n    public Create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n\r\n            endpoint = this.Host(region) + Storage.Local.GetOrAdd(\"TranslationRelativeUri\", \"/speech/translation/cognitiveservices/v1\");\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            from: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            to: config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n        };\r\n\r\n        if (this.IsDebugModeEnabled) {\r\n            queryParams[TestHooksParamName] = \"1\";\r\n        }\r\n\r\n        const voiceName: string = \"voice\";\r\n        const featureName: string = \"features\";\r\n\r\n        if (config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            queryParams[voiceName] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice);\r\n            queryParams[featureName] = \"texttospeech\";\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[authInfo.HeaderName] = authInfo.Token;\r\n        headers[ConnectionIdHeader] = connectionId;\r\n\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), connectionId);\r\n    }\r\n\r\n    private Host(region: string): string {\r\n        return Storage.Local.GetOrAdd(\"Host\", \"wss://\" + region + \".s2s.speech.microsoft.com\");\r\n    }\r\n\r\n    private get IsDebugModeEnabled(): boolean {\r\n        const value = Storage.Local.GetOrAdd(\"IsDebugModeEnabled\", \"false\");\r\n        return value.toLowerCase() === \"true\";\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/TranslationConnectionFactory.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    CancellationReason,\r\n    ResultReason,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    RecognitionStatus,\r\n} from \"./Exports\";\r\n\r\nexport class EnumTranslation {\r\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus): ResultReason {\r\n        let reason = ResultReason.Canceled;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n                reason = ResultReason.RecognizedSpeech;\r\n                break;\r\n            case RecognitionStatus.NoMatch:\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n                reason = ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.EndOfDictation:\r\n            case RecognitionStatus.Error:\r\n            default:\r\n                reason = ResultReason.Canceled;\r\n                break;\r\n        }\r\n\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus): CancellationReason {\r\n        let reason = CancellationReason.EndOfStream;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n            case RecognitionStatus.EndOfDictation:\r\n            case RecognitionStatus.NoMatch:\r\n                reason = CancellationReason.EndOfStream;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.Error:\r\n            default:\r\n                reason = CancellationReason.Error;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/EnumTranslation.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * @class SynthesisStatus\r\n * @private\r\n */\r\nexport enum SynthesisStatus {\r\n    /**\r\n     * The response contains valid audio data.\r\n     * @member SynthesisStatus.Success\r\n     */\r\n    Success,\r\n\r\n    /**\r\n     * Indicates the end of audio data. No valid audio data is included in the message.\r\n     * @member SynthesisStatus.SynthesisEnd\r\n     */\r\n    SynthesisEnd,\r\n\r\n    /**\r\n     * Indicates an error occurred during synthesis data processing.\r\n     * @member SynthesisStatus.Error\r\n     */\r\n    Error,\r\n}\r\n\r\nexport enum RecognitionStatus {\r\n    Success,\r\n    NoMatch,\r\n    InitialSilenceTimeout,\r\n    BabbleTimeout,\r\n    Error,\r\n    EndOfDictation,\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/ServiceMessages/Enums.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { SynthesisStatus } from \"../Exports\";\r\n\r\n// translation.synthesis.end\r\nexport interface ITranslationSynthesisEnd {\r\n    SynthesisStatus: SynthesisStatus;\r\n    FailureReason: string;\r\n}\r\n\r\nexport class TranslationSynthesisEnd implements ITranslationSynthesisEnd {\r\n    private obj: ITranslationSynthesisEnd;\r\n\r\n    private constructor(json: string) {\r\n        this.obj = JSON.parse(json);\r\n        this.obj.SynthesisStatus = (SynthesisStatus as any)[this.obj.SynthesisStatus];\r\n    }\r\n\r\n    public static FromJSON(json: string): TranslationSynthesisEnd {\r\n        return new TranslationSynthesisEnd(json);\r\n    }\r\n\r\n    public get SynthesisStatus(): SynthesisStatus {\r\n        return this.obj.SynthesisStatus;\r\n    }\r\n\r\n    public get FailureReason(): string {\r\n        return this.obj.FailureReason;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/ServiceMessages/TranslationSynthesisEnd.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { ITranslations } from \"../Exports\";\r\nimport { TranslationStatus } from \"../TranslationStatus\";\r\n\r\n// translation.hypothesis\r\nexport interface ITranslationHypothesis {\r\n    Duration: number;\r\n    Offset: number;\r\n    Text: string;\r\n    Translation: ITranslations;\r\n}\r\n\r\nexport class TranslationHypothesis implements ITranslationHypothesis {\r\n    private translationHypothesis: ITranslationHypothesis;\r\n\r\n    private constructor(json: string) {\r\n        this.translationHypothesis = JSON.parse(json);\r\n        this.translationHypothesis.Translation.TranslationStatus = (TranslationStatus as any)[this.translationHypothesis.Translation.TranslationStatus];\r\n    }\r\n\r\n    public static FromJSON(json: string): TranslationHypothesis {\r\n        return new TranslationHypothesis(json);\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.translationHypothesis.Duration;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.translationHypothesis.Offset;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.translationHypothesis.Text;\r\n    }\r\n\r\n    public get Translation(): ITranslations {\r\n        return this.translationHypothesis.Translation;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/ServiceMessages/TranslationHypothesis.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    ITranslations,\r\n    RecognitionStatus,\r\n} from \"../Exports\";\r\nimport { TranslationStatus } from \"../TranslationStatus\";\r\n\r\n// translation.phrase\r\nexport interface ITranslationPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    Offset: number;\r\n    Duration: number;\r\n    Text: string;\r\n    Translation: ITranslations;\r\n}\r\n\r\nexport class TranslationPhrase implements ITranslationPhrase {\r\n    private translationPhrase: ITranslationPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.translationPhrase = JSON.parse(json);\r\n        this.translationPhrase.RecognitionStatus = (RecognitionStatus as any)[this.translationPhrase.RecognitionStatus];\r\n        if (this.translationPhrase.Translation !== undefined) {\r\n            this.translationPhrase.Translation.TranslationStatus = (TranslationStatus as any)[this.translationPhrase.Translation.TranslationStatus];\r\n        }\r\n    }\r\n\r\n    public static FromJSON(json: string): TranslationPhrase {\r\n        return new TranslationPhrase(json);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.translationPhrase.RecognitionStatus;\r\n    }\r\n    public get Offset(): number {\r\n        return this.translationPhrase.Offset;\r\n    }\r\n    public get Duration(): number {\r\n        return this.translationPhrase.Duration;\r\n    }\r\n    public get Text(): string {\r\n        return this.translationPhrase.Text;\r\n    }\r\n    public get Translation(): ITranslations {\r\n        return this.translationPhrase.Translation;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/ServiceMessages/TranslationPhrase.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n    TranslationStatus,\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationRecognizer,\r\n    Translations,\r\n    TranslationSynthesisEventArgs,\r\n    TranslationSynthesisResult,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    RecognitionStatus,\r\n    RequestSession,\r\n    ServiceRecognizerBase,\r\n    SynthesisStatus,\r\n    TranslationHypothesis,\r\n    TranslationPhrase,\r\n    TranslationSynthesisEnd,\r\n} from \"./Exports\";\r\nimport {\r\n    IAuthentication,\r\n} from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class TranslationServiceRecognizer extends ServiceRecognizerBase {\r\n    private translationRecognizer: TranslationRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        translationRecognizer: TranslationRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\r\n        this.translationRecognizer = translationRecognizer;\r\n\r\n    }\r\n\r\n    protected ProcessTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        requestSession: RequestSession,\r\n        connection: IConnection,\r\n        successCallback?: (e: TranslationRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): void {\r\n\r\n        switch (connectionMessage.Path.toLowerCase()) {\r\n            case \"translation.hypothesis\":\r\n\r\n                const result: TranslationRecognitionEventArgs = this.FireEventForResult(TranslationHypothesis.FromJSON(connectionMessage.TextBody), requestSession);\r\n\r\n                if (!!this.translationRecognizer.recognizing) {\r\n                    try {\r\n                        this.translationRecognizer.recognizing(this.translationRecognizer, result);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                break;\r\n            case \"translation.phrase\":\r\n                if (this.recognizerConfig.IsContinuousRecognition) {\r\n                    // For continuous recognition telemetry has to be sent for every phrase as per spec.\r\n                    this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                }\r\n\r\n                const translatedPhrase: TranslationPhrase = TranslationPhrase.FromJSON(connectionMessage.TextBody);\r\n\r\n                if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\r\n                    // OK, the recognition was successful. How'd the translation do?\r\n                    const result: TranslationRecognitionEventArgs = this.FireEventForResult(translatedPhrase, requestSession);\r\n                    if (!!this.translationRecognizer.recognized) {\r\n                        try {\r\n                            this.translationRecognizer.recognized(this.translationRecognizer, result);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!successCallback) {\r\n                        try {\r\n                            successCallback(result.result);\r\n                        } catch (e) {\r\n                            if (!!errorCallBack) {\r\n                                errorCallBack(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        successCallback = undefined;\r\n                        errorCallBack = undefined;\r\n                    }\r\n\r\n                    break;\r\n                } else {\r\n                    const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\r\n\r\n                    const result = new TranslationRecognitionResult(\r\n                        undefined,\r\n                        requestSession.RequestId,\r\n                        reason,\r\n                        translatedPhrase.Text,\r\n                        translatedPhrase.Duration,\r\n                        translatedPhrase.Offset,\r\n                        undefined,\r\n                        connectionMessage.TextBody,\r\n                        undefined);\r\n\r\n                    if (reason === ResultReason.Canceled) {\r\n                        const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\r\n\r\n                        const ev = new TranslationRecognitionCanceledEventArgs(\r\n                            requestSession.SessionId,\r\n                            cancelReason,\r\n                            null,\r\n                            cancelReason === CancellationReason.Error ? CancellationErrorCode.ServiceError : CancellationErrorCode.NoError,\r\n                            result);\r\n\r\n                        if (!!this.translationRecognizer.canceled) {\r\n                            try {\r\n                                this.translationRecognizer.canceled(this.translationRecognizer, ev);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    } else {\r\n                        const ev = new TranslationRecognitionEventArgs(result, 0/*offset*/, requestSession.SessionId);\r\n\r\n                        if (!!this.translationRecognizer.recognized) {\r\n                            try {\r\n                                this.translationRecognizer.recognized(this.translationRecognizer, ev);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!successCallback) {\r\n                        try {\r\n                            successCallback(result);\r\n                        } catch (e) {\r\n                            if (!!errorCallBack) {\r\n                                errorCallBack(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        successCallback = undefined;\r\n                        errorCallBack = undefined;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case \"translation.synthesis\":\r\n                this.sendSynthesisAudio(connectionMessage.BinaryBody, requestSession.SessionId);\r\n                break;\r\n\r\n            case \"translation.synthesis.end\":\r\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.FromJSON(connectionMessage.TextBody);\r\n\r\n                switch (synthEnd.SynthesisStatus) {\r\n                    case SynthesisStatus.Error:\r\n                        if (!!this.translationRecognizer.synthesizing) {\r\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\r\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, requestSession.SessionId);\r\n\r\n                            try {\r\n                                this.translationRecognizer.synthesizing(this.translationRecognizer, retEvent);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        if (!!this.translationRecognizer.canceled) {\r\n                            // And raise a canceled event to send the rich(er) error message back.\r\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                                requestSession.SessionId,\r\n                                CancellationReason.Error,\r\n                                synthEnd.FailureReason,\r\n                                CancellationErrorCode.ServiceError,\r\n                                null);\r\n\r\n                            try {\r\n                                this.translationRecognizer.canceled(this.translationRecognizer, canceledResult);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SynthesisStatus.Success:\r\n                        this.sendSynthesisAudio(undefined, requestSession.SessionId);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    protected ConnectionError(sessionId: string, requestId: string, error: string): void {\r\n        if (!!this.translationRecognizer.canceled) {\r\n            const properties: PropertyCollection = new PropertyCollection();\r\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ConnectionFailure]);\r\n\r\n            const result: TranslationRecognitionResult = new TranslationRecognitionResult(\r\n                undefined,\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                error,\r\n                undefined,\r\n                properties);\r\n\r\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                sessionId,\r\n                CancellationReason.Error,\r\n                error,\r\n                CancellationErrorCode.ConnectionFailure,\r\n                result,\r\n            );\r\n            try {\r\n                this.translationRecognizer.canceled(this.translationRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n    }\r\n\r\n    private FireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, requestSession: RequestSession): TranslationRecognitionEventArgs {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResult.Translation.Translations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResult.Translation.Translations) {\r\n                translations.set(translation.Language, translation.Text);\r\n            }\r\n        }\r\n\r\n        let resultReason: ResultReason;\r\n        if (serviceResult instanceof TranslationPhrase) {\r\n            if (serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\r\n                resultReason = ResultReason.TranslatedSpeech;\r\n            } else {\r\n                resultReason = ResultReason.RecognizedSpeech;\r\n            }\r\n        } else {\r\n            resultReason = ResultReason.TranslatingSpeech;\r\n        }\r\n\r\n        const result = new TranslationRecognitionResult(\r\n            translations,\r\n            requestSession.RequestId,\r\n            resultReason,\r\n            serviceResult.Text,\r\n            serviceResult.Duration,\r\n            serviceResult.Offset,\r\n            serviceResult.Translation.FailureReason,\r\n            JSON.stringify(serviceResult),\r\n            undefined);\r\n\r\n        const ev = new TranslationRecognitionEventArgs(result, serviceResult.Offset, requestSession.SessionId);\r\n        return ev;\r\n    }\r\n\r\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\r\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\r\n        const result = new TranslationSynthesisResult(reason, audio);\r\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\r\n\r\n        if (!!this.translationRecognizer.synthesizing) {\r\n            try {\r\n                this.translationRecognizer.synthesizing(this.translationRecognizer, retEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/TranslationServiceRecognizer.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n// speech.endDetected\r\nexport interface ISpeechDetected {\r\n    Offset: number;\r\n}\r\n\r\nexport class SpeechDetected implements ISpeechDetected {\r\n    private speechStartDetected: ISpeechDetected;\r\n    private constructor(json: string) {\r\n        this.speechStartDetected = JSON.parse(json);\r\n    }\r\n\r\n    public static FromJSON(json: string): SpeechDetected {\r\n        return new SpeechDetected(json);\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.speechStartDetected.Offset;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/ServiceMessages/SpeechDetected.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n// speech.hypothesis\r\nexport interface ISpeechHypothesis {\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class SpeechHypothesis implements ISpeechHypothesis {\r\n    private speechHypothesis: ISpeechHypothesis;\r\n    private constructor(json: string) {\r\n        this.speechHypothesis = JSON.parse(json);\r\n    }\r\n\r\n    public static FromJSON(json: string): SpeechHypothesis {\r\n        return new SpeechHypothesis(json);\r\n    }\r\n    public get Text(): string {\r\n        return this.speechHypothesis.Text;\r\n    }\r\n    public get Offset(): number {\r\n        return this.speechHypothesis.Offset;\r\n    }\r\n    public get Duration(): number {\r\n        return this.speechHypothesis.Duration;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/ServiceMessages/SpeechHypothesis.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    SpeechRecognizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    RequestSession,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport {\r\n    IAuthentication,\r\n} from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private speechRecognizer: SpeechRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        speechRecognizer: SpeechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.speechRecognizer = speechRecognizer;\r\n    }\r\n\r\n    protected ProcessTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        requestSession: RequestSession,\r\n        connection: IConnection,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): void {\r\n\r\n        let result: SpeechRecognitionResult;\r\n\r\n        switch (connectionMessage.Path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.FromJSON(connectionMessage.TextBody);\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    requestSession.RequestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    hypothesis.Offset,\r\n                    undefined,\r\n                    connectionMessage.TextBody,\r\n                    undefined);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, requestSession.SessionId);\r\n\r\n                if (!!this.speechRecognizer.recognizing) {\r\n                    try {\r\n                        this.speechRecognizer.recognizing(this.speechRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n            case \"speech.phrase\":\r\n                if (this.recognizerConfig.IsContinuousRecognition) {\r\n                    // For continuous recognition telemetry has to be sent for every phrase as per spec.\r\n                    this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                }\r\n\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.FromJSON(connectionMessage.TextBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    result = new SpeechRecognitionResult(\r\n                        requestSession.RequestId,\r\n                        resultReason,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        connectionMessage.TextBody,\r\n                        undefined);\r\n\r\n                    if (!!this.speechRecognizer.canceled) {\r\n                        const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                            EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus),\r\n                            undefined,\r\n                            undefined,\r\n                            EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus) === CancellationReason.Error ? CancellationErrorCode.ServiceError : CancellationErrorCode.NoError,\r\n                            requestSession.SessionId);\r\n                        try {\r\n                            this.speechRecognizer.canceled(this.speechRecognizer, cancelEvent);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch { }\r\n                    }\r\n                } else {\r\n                    if (this.recognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                        result = new SpeechRecognitionResult(\r\n                            requestSession.RequestId,\r\n                            EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus),\r\n                            simple.DisplayText,\r\n                            simple.Duration,\r\n                            simple.Offset,\r\n                            undefined,\r\n                            connectionMessage.TextBody,\r\n                            undefined);\r\n                    } else {\r\n                        const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.FromJSON(connectionMessage.TextBody);\r\n\r\n                        result = new SpeechRecognitionResult(\r\n                            requestSession.RequestId,\r\n                            EnumTranslation.implTranslateRecognitionResult(detailed.RecognitionStatus),\r\n                            detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                            detailed.Duration,\r\n                            detailed.Offset,\r\n                            undefined,\r\n                            connectionMessage.TextBody,\r\n                            undefined);\r\n                    }\r\n\r\n                    const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, requestSession.SessionId);\r\n\r\n                    if (!!this.speechRecognizer.recognized) {\r\n                        try {\r\n                            this.speechRecognizer.recognized(this.speechRecognizer, event);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!successCallback) {\r\n                    try {\r\n                        successCallback(result);\r\n                    } catch (e) {\r\n                        if (!!errorCallBack) {\r\n                            errorCallBack(e);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    successCallback = undefined;\r\n                    errorCallBack = undefined;\r\n                }\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    protected ConnectionError(sessionId: string, requestId: string, error: string): void {\r\n        if (!!this.speechRecognizer.canceled) {\r\n            const properties: PropertyCollection = new PropertyCollection();\r\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ConnectionFailure]);\r\n\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                CancellationReason.Error,\r\n                error,\r\n                CancellationErrorCode.ConnectionFailure,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.speechRecognizer.canceled(this.speechRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/SpeechServiceRecognizer.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    RecognitionStatus,\r\n} from \"../Exports\";\r\n\r\n// speech.phrase for detailed\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display: string;\r\n}\r\n\r\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\r\n    private detailedSpeechPhrase: IDetailedSpeechPhrase;\r\n    private constructor(json: string) {\r\n        this.detailedSpeechPhrase = JSON.parse(json);\r\n        this.detailedSpeechPhrase.RecognitionStatus = (RecognitionStatus as any)[this.detailedSpeechPhrase.RecognitionStatus];\r\n    }\r\n\r\n    public static FromJSON(json: string): DetailedSpeechPhrase {\r\n        return new DetailedSpeechPhrase(json);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.detailedSpeechPhrase.RecognitionStatus;\r\n    }\r\n    public get NBest(): IPhrase[] {\r\n        return this.detailedSpeechPhrase.NBest;\r\n    }\r\n    public get Duration(): number {\r\n        return this.detailedSpeechPhrase.Duration;\r\n    }\r\n    public get Offset(): number {\r\n        return this.detailedSpeechPhrase.Offset;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    RecognitionStatus,\r\n} from \"../Exports\";\r\n\r\n// speech.phrase\r\nexport interface ISimpleSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    DisplayText: string;\r\n    Offset?: number;\r\n    Duration?: number;\r\n}\r\n\r\nexport class SimpleSpeechPhrase implements ISimpleSpeechPhrase {\r\n    private simpleSpeechPhrase: ISimpleSpeechPhrase;\r\n    private constructor(json: string) {\r\n        this.simpleSpeechPhrase = JSON.parse(json);\r\n        this.simpleSpeechPhrase.RecognitionStatus = (RecognitionStatus as any)[this.simpleSpeechPhrase.RecognitionStatus];\r\n    }\r\n\r\n    public static FromJSON(json: string): SimpleSpeechPhrase {\r\n        return new SimpleSpeechPhrase(json);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.simpleSpeechPhrase.RecognitionStatus;\r\n    }\r\n    public get DisplayText(): string {\r\n        return this.simpleSpeechPhrase.DisplayText;\r\n    }\r\n    public get Offset(): number {\r\n        return this.simpleSpeechPhrase.Offset;\r\n    }\r\n    public get Duration(): number {\r\n        return this.simpleSpeechPhrase.Duration;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/ServiceMessages/SimpleSpeechPhrase.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { LanguageUnderstandingModelImpl } from \"../sdk/LanguageUnderstandingModel\";\r\n\r\n/**\r\n * @class AddedLmIntent\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AddedLmIntent {\r\n    public modelImpl: LanguageUnderstandingModelImpl;\r\n    public intentName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param modelImpl - The model.\r\n     * @param intentName - The intent name.\r\n     */\r\n    public constructor(modelImpl: LanguageUnderstandingModelImpl, intentName: string) {\r\n        this.modelImpl = modelImpl;\r\n        this.intentName = intentName;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/AddedLmIntent.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    IntentRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    AddedLmIntent,\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    IntentResponse,\r\n    RequestSession,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport {\r\n    IAuthentication,\r\n} from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private intentRecognizer: IntentRecognizer;\r\n    private addedLmIntents: { [id: string]: AddedLmIntent; };\r\n    private intentDataSent: boolean;\r\n    private umbrellaIntent: AddedLmIntent;\r\n    private pendingIntentArgs: IntentRecognitionEventArgs;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: IntentRecognizer,\r\n        intentDataSent: boolean) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.intentRecognizer = recognizer;\r\n        this.intentDataSent = intentDataSent;\r\n    }\r\n\r\n    public setIntents(addedIntents: { [id: string]: AddedLmIntent; }, umbrellaIntent: AddedLmIntent): void {\r\n        this.addedLmIntents = addedIntents;\r\n        this.umbrellaIntent = umbrellaIntent;\r\n    }\r\n\r\n    protected ProcessTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        requestSession: RequestSession,\r\n        connection: IConnection,\r\n        successCallback?: (e: IntentRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): void {\r\n\r\n        let result: IntentRecognitionResult;\r\n        let ev: IntentRecognitionEventArgs;\r\n\r\n        switch (connectionMessage.Path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n                const speechHypothesis: SpeechHypothesis = SpeechHypothesis.FromJSON(connectionMessage.TextBody);\r\n\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    requestSession.RequestId,\r\n                    ResultReason.RecognizingIntent,\r\n                    speechHypothesis.Text,\r\n                    speechHypothesis.Duration,\r\n                    speechHypothesis.Offset,\r\n                    undefined,\r\n                    connectionMessage.TextBody,\r\n                    undefined);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, speechHypothesis.Offset, requestSession.SessionId);\r\n\r\n                if (!!this.intentRecognizer.recognizing) {\r\n                    try {\r\n                        this.intentRecognizer.recognizing(this.intentRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.FromJSON(connectionMessage.TextBody);\r\n\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    requestSession.RequestId,\r\n                    EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus),\r\n                    simple.DisplayText,\r\n                    simple.Duration,\r\n                    simple.Offset,\r\n                    undefined,\r\n                    connectionMessage.TextBody,\r\n                    undefined);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, result.offset, requestSession.SessionId);\r\n\r\n                const sendEvent: () => void = () => {\r\n                    if (this.recognizerConfig.IsContinuousRecognition) {\r\n                        // For continuous recognition telemetry has to be sent for every phrase as per spec.\r\n                        this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                    }\r\n\r\n                    if (!!this.intentRecognizer.recognized) {\r\n                        try {\r\n                            this.intentRecognizer.recognized(this.intentRecognizer, ev);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!successCallback) {\r\n                        try {\r\n                            successCallback(result);\r\n                        } catch (e) {\r\n                            if (!!errorCallBack) {\r\n                                errorCallBack(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        successCallback = undefined;\r\n                        errorCallBack = undefined;\r\n                    }\r\n                };\r\n\r\n                // If intent data was sent, the terminal result for this recognizer is an intent being found.\r\n                // If no intent data was sent, the terminal event is speech recognition being successful.\r\n                if (false === this.intentDataSent || ResultReason.NoMatch === ev.result.reason) {\r\n                    sendEvent();\r\n                } else {\r\n                    // Squirrel away the args, when the response event arrives it will build upon them\r\n                    // and then return\r\n                    this.pendingIntentArgs = ev;\r\n                }\r\n\r\n                break;\r\n            case \"response\":\r\n                // Response from LUIS\r\n                if (this.recognizerConfig.IsContinuousRecognition) {\r\n                    // For continuous recognition telemetry has to be sent for every phrase as per spec.\r\n                    this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                }\r\n\r\n                ev = this.pendingIntentArgs;\r\n                this.pendingIntentArgs = undefined;\r\n\r\n                const intentResponse: IntentResponse = IntentResponse.FromJSON(connectionMessage.TextBody);\r\n\r\n                if (undefined === ev) {\r\n                    // Odd... Not sure this can happen\r\n                    ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0 /*TODO*/, requestSession.SessionId);\r\n                }\r\n\r\n                // If LUIS didn't return anything, send the existing event, else\r\n                // modify it to show the match.\r\n                // See if the intent found is in the list of intents asked for.\r\n                let addedIntent: AddedLmIntent = this.addedLmIntents[intentResponse.topScoringIntent.intent];\r\n\r\n                if (this.umbrellaIntent !== undefined) {\r\n                    addedIntent = this.umbrellaIntent;\r\n                }\r\n\r\n                if (null !== intentResponse && addedIntent !== undefined) {\r\n                    const intentId = addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;\r\n                    let reason = ev.result.reason;\r\n\r\n                    if (undefined !== intentId) {\r\n                        reason = ResultReason.RecognizedIntent;\r\n                    }\r\n\r\n                    // make sure, properties is set.\r\n                    const properties = (undefined !== ev.result.properties) ?\r\n                        ev.result.properties : new PropertyCollection();\r\n\r\n                    properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.TextBody);\r\n\r\n                    ev = new IntentRecognitionEventArgs(\r\n                        new IntentRecognitionResult(\r\n                            intentId,\r\n                            ev.result.resultId,\r\n                            reason,\r\n                            ev.result.text,\r\n                            ev.result.duration,\r\n                            ev.result.offset,\r\n                            ev.result.errorDetails,\r\n                            ev.result.json,\r\n                            properties),\r\n                        ev.offset,\r\n                        ev.sessionId);\r\n                }\r\n\r\n                if (!!this.intentRecognizer.recognized) {\r\n                    try {\r\n                        this.intentRecognizer.recognized(this.intentRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!successCallback) {\r\n                    try {\r\n                        successCallback(ev.result);\r\n                    } catch (e) {\r\n                        if (!!errorCallBack) {\r\n                            errorCallBack(e);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    successCallback = undefined;\r\n                    errorCallBack = undefined;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    protected ConnectionError(sessionId: string, requestId: string, error: string): void {\r\n        if (!!this.intentRecognizer.canceled) {\r\n            const properties: PropertyCollection = new PropertyCollection();\r\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ConnectionFailure]);\r\n\r\n            const result: IntentRecognitionResult = new IntentRecognitionResult(\r\n                undefined,\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                error,\r\n                undefined,\r\n                properties);\r\n\r\n            const cancelEvent: IntentRecognitionCanceledEventArgs = new IntentRecognitionCanceledEventArgs(\r\n                CancellationReason.Error,\r\n                error,\r\n                CancellationErrorCode.ConnectionFailure,\r\n                undefined,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.intentRecognizer.canceled(this.intentRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/IntentServiceRecognizer.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n// response\r\nexport interface IIntentResponse {\r\n    query: string;\r\n    topScoringIntent: ISingleIntent;\r\n    entities: IIntentEntity[];\r\n}\r\n\r\nexport interface IIntentEntity {\r\n    entity: string;\r\n    type: string;\r\n    startIndex: number;\r\n    endIndex: number;\r\n    score: number;\r\n}\r\n\r\nexport interface ISingleIntent {\r\n    intent: string;\r\n    score: number;\r\n}\r\n\r\nexport class IntentResponse implements IIntentResponse {\r\n    private intentResponse: IIntentResponse;\r\n    private constructor(json: string) {\r\n        this.intentResponse = JSON.parse(json);\r\n    }\r\n\r\n    public static FromJSON(json: string): IntentResponse {\r\n        return new IntentResponse(json);\r\n    }\r\n\r\n    public get query(): string {\r\n        return this.intentResponse.query;\r\n    }\r\n    public get topScoringIntent(): ISingleIntent {\r\n        return this.intentResponse.topScoringIntent;\r\n    }\r\n    public get entities(): IIntentEntity[] {\r\n        return this.intentResponse.entities;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/ServiceMessages/IntentResponse.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    CreateNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IAudioStreamNode,\r\n    IDetachable,\r\n    IEventSource,\r\n    PlatformEvent,\r\n    Promise,\r\n} from \"../common/Exports\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    ListeningStartedEvent,\r\n    RecognitionStartedEvent,\r\n    RecognitionTriggeredEvent,\r\n    SpeechRecognitionEvent,\r\n} from \"./RecognitionEvents\";\r\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal\";\r\n\r\nexport class RequestSession {\r\n    private isDisposed: boolean = false;\r\n    private serviceTelemetryListener: ServiceTelemetryListener;\r\n    private detachables: IDetachable[] = new Array<IDetachable>();\r\n    private requestId: string;\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n    private audioNode: IAudioStreamNode;\r\n    private authFetchEventId: string;\r\n    private serviceTag: string;\r\n    private isAudioNodeDetached: boolean = false;\r\n    private isCompleted: boolean = false;\r\n\r\n    private requestCompletionDeferral: Deferred<boolean>;\r\n\r\n    protected sessionId: string;\r\n\r\n    constructor(audioSourceId: string) {\r\n        this.audioSourceId = audioSourceId;\r\n        this.requestId = CreateNoDashGuid();\r\n        this.audioNodeId = CreateNoDashGuid();\r\n        this.requestCompletionDeferral = new Deferred<boolean>();\r\n\r\n        this.serviceTelemetryListener = new ServiceTelemetryListener(this.requestId, this.audioSourceId, this.audioNodeId);\r\n\r\n        this.OnEvent(new RecognitionTriggeredEvent(this.RequestId, this.sessionId, this.audioSourceId, this.audioNodeId));\r\n    }\r\n\r\n    public get SessionId(): string {\r\n        return this.sessionId;\r\n    }\r\n\r\n    public get RequestId(): string {\r\n        return this.requestId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n\r\n    public get CompletionPromise(): Promise<boolean> {\r\n        return this.requestCompletionDeferral.Promise();\r\n    }\r\n\r\n    public get IsSpeechEnded(): boolean {\r\n        return this.isAudioNodeDetached;\r\n    }\r\n\r\n    public get IsCompleted(): boolean {\r\n        return this.isCompleted;\r\n    }\r\n\r\n    public ListenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\r\n        this.detachables.push(eventSource.AttachListener(this.serviceTelemetryListener));\r\n    }\r\n\r\n    public OnAudioSourceAttachCompleted = (audioNode: IAudioStreamNode, isError: boolean, error?: string): void => {\r\n        this.audioNode = audioNode;\r\n        if (isError) {\r\n            this.OnComplete();\r\n        } else {\r\n            this.OnEvent(new ListeningStartedEvent(this.requestId, this.sessionId, this.audioSourceId, this.audioNodeId));\r\n        }\r\n    }\r\n\r\n    public OnPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\r\n        this.authFetchEventId = authFetchEventId;\r\n        this.sessionId = connectionId;\r\n        this.OnEvent(new ConnectingToServiceEvent(this.requestId, this.authFetchEventId, this.sessionId));\r\n    }\r\n\r\n    public OnAuthCompleted = (isError: boolean, error?: string): void => {\r\n        if (isError) {\r\n            this.OnComplete();\r\n        }\r\n    }\r\n\r\n    public OnConnectionEstablishCompleted = (statusCode: number, reason?: string): void => {\r\n        if (statusCode === 200) {\r\n            this.OnEvent(new RecognitionStartedEvent(this.RequestId, this.audioSourceId, this.audioNodeId, this.authFetchEventId, this.sessionId));\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.OnComplete();\r\n        } else {\r\n            this.OnComplete();\r\n        }\r\n    }\r\n\r\n    public OnServiceTurnEndResponse = (): void => {\r\n        this.OnComplete();\r\n    }\r\n\r\n    public Dispose = (error?: string): void => {\r\n        if (!this.isDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.isDisposed = true;\r\n            for (const detachable of this.detachables) {\r\n                detachable.Detach();\r\n            }\r\n\r\n            this.serviceTelemetryListener.Dispose();\r\n        }\r\n    }\r\n\r\n    public GetTelemetry = (): string => {\r\n        return this.serviceTelemetryListener.GetTelemetry();\r\n    }\r\n\r\n    protected OnEvent = (event: SpeechRecognitionEvent): void => {\r\n        this.serviceTelemetryListener.OnEvent(event);\r\n        Events.Instance.OnEvent(event);\r\n    }\r\n\r\n    private OnComplete = (): void => {\r\n        if (!this.isCompleted) {\r\n            this.isCompleted = true;\r\n            this.DetachAudioNode();\r\n        }\r\n    }\r\n\r\n    private DetachAudioNode = (): void => {\r\n        if (!this.isAudioNodeDetached) {\r\n            this.isAudioNodeDetached = true;\r\n            if (this.audioNode) {\r\n                this.audioNode.Detach();\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/RequestSession.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionClosedEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../common/Exports\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    RecognitionTriggeredEvent,\r\n} from \"./RecognitionEvents\";\r\n\r\ninterface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\ninterface IMetric {\r\n    End: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name: string;\r\n    Start: string;\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private isDisposed: boolean = false;\r\n\r\n    private requestId: string;\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n\r\n    private listeningTriggerMetric: IMetric = null;\r\n    private micMetric: IMetric = null;\r\n    private connectionEstablishMetric: IMetric = null;\r\n\r\n    private micStartTime: string;\r\n\r\n    private connectionId: string;\r\n    private connectionStartTime: string;\r\n\r\n    private receivedMessages: IStringDictionary<string[]>;\r\n\r\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.requestId = requestId;\r\n        this.audioSourceId = audioSourceId;\r\n        this.audioNodeId = audioNodeId;\r\n\r\n        this.receivedMessages = {};\r\n    }\r\n\r\n    public OnEvent = (e: PlatformEvent): void => {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.RequestId === this.requestId) {\r\n            this.listeningTriggerMetric = {\r\n                End: e.EventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.EventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\r\n            this.micStartTime = e.EventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\r\n            this.micStartTime = e.EventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.AudioSourceId === this.audioSourceId) {\r\n            if (!this.micMetric) {\r\n                this.micMetric = {\r\n                    End: e.EventTime,\r\n                    Error: e.Error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.micStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\r\n            if (!this.micMetric) {\r\n                this.micMetric = {\r\n                    End: e.EventTime,\r\n                    Error: e.Error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.micStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\r\n            if (!this.micMetric) {\r\n                this.micMetric = {\r\n                    End: e.EventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.micStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.RequestId === this.requestId) {\r\n            this.connectionId = e.SessionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.ConnectionId === this.connectionId) {\r\n            this.connectionStartTime = e.EventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.ConnectionId === this.connectionId) {\r\n            if (!this.connectionEstablishMetric) {\r\n                this.connectionEstablishMetric = {\r\n                    End: e.EventTime,\r\n                    Id: this.connectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.connectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.ConnectionId === this.connectionId) {\r\n            if (!this.connectionEstablishMetric) {\r\n                this.connectionEstablishMetric = {\r\n                    End: e.EventTime,\r\n                    Error: this.GetConnectionError(e.StatusCode),\r\n                    Id: this.connectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.connectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.ConnectionId === this.connectionId) {\r\n            if (e.Message && e.Message.Headers && e.Message.Headers.path) {\r\n                if (!this.receivedMessages[e.Message.Headers.path]) {\r\n                    this.receivedMessages[e.Message.Headers.path] = new Array<string>();\r\n                }\r\n\r\n                this.receivedMessages[e.Message.Headers.path].push(e.NetworkReceivedTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    public GetTelemetry = (): string => {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.listeningTriggerMetric) {\r\n            metrics.push(this.listeningTriggerMetric);\r\n        }\r\n\r\n        if (this.micMetric) {\r\n            metrics.push(this.micMetric);\r\n        }\r\n\r\n        if (this.connectionEstablishMetric) {\r\n            metrics.push(this.connectionEstablishMetric);\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.receivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.receivedMessages = {};\r\n        this.listeningTriggerMetric = null;\r\n        this.micMetric = null;\r\n        this.connectionEstablishMetric = null;\r\n\r\n        return json;\r\n    }\r\n\r\n    public Dispose = (): void => {\r\n        this.isDisposed = true;\r\n    }\r\n\r\n    private GetConnectionError = (statusCode: number): string => {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.speech/ServiceTelemetryListener.Internal.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    Contracts,\r\n} from \"./Contracts\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechConfig,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Speech translation configuration.\r\n * @class SpeechTranslationConfig\r\n */\r\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\r\n\r\n    /**\r\n     * Creates an instance of recognizer config.\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\r\n     * @member SpeechTranslationConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expipres, the caller needs to refresh it by setting the property authorizationToken with a new valid token.\r\n     * Otherwise, all the recognizers created by this SpeechTranslationConfig instance will encounter errors during recognition.\r\n     * @member SpeechTranslationConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by the speechRecognitionLanguage property,\r\n     * the language setting in uri takes precedence, and the effective language is \"de-DE\".\r\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\r\n     * @member SpeechTranslationConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @returns {SpeechTranslationConfig} A speech config instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract addTargetLanguage(value: string): void;\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract get targetLanguages(): string[];\r\n\r\n    /**\r\n     * Returns the selected voice name.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} The voice name.\r\n     */\r\n    public abstract get voiceName(): string;\r\n\r\n    /**\r\n     * Sets voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public abstract set voiceName(value: string);\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member SpeechTranslationConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} value - The value.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class SpeechTranslationConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\r\n    private speechProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.speechProperties = new PropertyCollection();\r\n\r\n    }\r\n    /**\r\n     * Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     */\r\n    public get subscriptionKey(): string {\r\n        return this.speechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        return (OutputFormat as any)[this.speechProperties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple])];\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.speechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public set endpointId(value: string) {\r\n        this.speechProperties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, value);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public get endpointId(): string {\r\n        return this.speechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public addTargetLanguage(value: string): void {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        const languages: string[] = this.targetLanguages;\r\n        languages.push(value);\r\n        this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n    }\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public get targetLanguages(): string[] {\r\n\r\n        if (this.speechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            return this.speechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n        } else {\r\n            return [];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public get voiceName(): string {\r\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n    }\r\n\r\n    /**\r\n     * Sets voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public set voiceName(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\r\n    }\r\n\r\n    /**\r\n     * Provides the region.\r\n     * @member SpeechTranslationConfigImpl.prototype.region\r\n     * @function\r\n     * @public\r\n     * @returns {string} The region.\r\n     */\r\n    public get region(): string {\r\n        return this.speechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    /**\r\n     * Allows for setting arbitrary properties.\r\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} value - The value of the property.\r\n     */\r\n    public setProperty(name: string, value: string): void {\r\n        this.properties.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Allows for retrieving arbitrary property values.\r\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} def - The default value of the property in case it is not set.\r\n     * @returns {string} The value of the property.\r\n     */\r\n    public getProperty(name: string, def?: string): string {\r\n        return this.speechProperties.getProperty(name, def);\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member SpeechTranslationConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.speechProperties;\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/SpeechTranslationConfig.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    private keys: string[] = [] as string[];\r\n    private values: string[] = [] as string[];\r\n\r\n    /**\r\n     * Returns the property value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public getProperty(key: PropertyId | string, def?: string): string {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.keys.length; n++) {\r\n            if (this.keys[n] === keyToUse) {\r\n                return this.values[n];\r\n            }\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public setProperty(key: string | PropertyId, value: string): void {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.keys.length; n++) {\r\n            if (this.keys[n] === keyToUse) {\r\n                this.values[n] = value;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.keys.push(keyToUse);\r\n        this.values.push(value);\r\n    }\r\n\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    public clone(): PropertyCollection {\r\n        const clonedMap = new PropertyCollection();\r\n\r\n        for (let n = 0; n < this.keys.length; n++) {\r\n            clonedMap.keys.push(this.keys[n]);\r\n            clonedMap.values.push(this.values[n]);\r\n        }\r\n\r\n        return clonedMap;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/PropertyCollection.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Defines speech property ids.\r\n * @class PropertyId\r\n */\r\nexport enum PropertyId {\r\n\r\n    /**\r\n     * Subscription key.\r\n     * @member PropertyId.SpeechServiceConnection_Key\r\n     */\r\n    SpeechServiceConnection_Key = 0,\r\n\r\n    /**\r\n     * Endpoint.\r\n     * @member PropertyId.SpeechServiceConnection_Endpoint\r\n     */\r\n    SpeechServiceConnection_Endpoint,\r\n\r\n    /**\r\n     * Region.\r\n     * @member PropertyId.SpeechServiceConnection_Region\r\n     */\r\n    SpeechServiceConnection_Region,\r\n\r\n    /**\r\n     * Authorization token.\r\n     * @member PropertyId.SpeechServiceAuthorization_Token\r\n     */\r\n    SpeechServiceAuthorization_Token,\r\n\r\n    /**\r\n     * Authorization type.\r\n     * @member PropertyId.SpeechServiceAuthorization_Type\r\n     */\r\n    SpeechServiceAuthorization_Type,\r\n\r\n    /**\r\n     * Endpoint ID.\r\n     * @member PropertyId.SpeechServiceConnection_EndpointId\r\n     */\r\n    SpeechServiceConnection_EndpointId,\r\n\r\n    /**\r\n     * Translation to languages.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages\r\n     */\r\n    SpeechServiceConnection_TranslationToLanguages,\r\n\r\n    /**\r\n     * Translation output voice.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationVoice\r\n     */\r\n    SpeechServiceConnection_TranslationVoice,\r\n\r\n    /**\r\n     * Translation features.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationFeatures\r\n     */\r\n    SpeechServiceConnection_TranslationFeatures,\r\n\r\n    /**\r\n     * Intent region.\r\n     * @member PropertyId.SpeechServiceConnection_IntentRegion\r\n     */\r\n    SpeechServiceConnection_IntentRegion,\r\n\r\n    /**\r\n     * Recognition mode.\r\n     * @member PropertyId.SpeechServiceConnection_RecoMode\r\n     */\r\n    SpeechServiceConnection_RecoMode,\r\n\r\n    /**\r\n     * Recognition language.\r\n     * @member PropertyId.SpeechServiceConnection_RecoLanguage\r\n     */\r\n    SpeechServiceConnection_RecoLanguage,\r\n\r\n    /**\r\n     * Session id.\r\n     * @member PropertyId.Speech_SessionId\r\n     */\r\n    Speech_SessionId,\r\n\r\n    /**\r\n     * Detailed result required.\r\n     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestDetailedResultTrueFalse,\r\n\r\n    /**\r\n     * Profanity filtering required.\r\n     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestProfanityFilterTrueFalse,\r\n\r\n    /**\r\n     * JSON in result.\r\n     * @member PropertyId.SpeechServiceResponse_JsonResult\r\n     */\r\n    SpeechServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * Error details.\r\n     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails\r\n     */\r\n    SpeechServiceResponse_JsonErrorDetails,\r\n\r\n    /**\r\n     * Cancellation reason.\r\n     * @member PropertyId.CancellationDetails_Reason\r\n     */\r\n    CancellationDetails_Reason,\r\n\r\n    /**\r\n     * Cancellation text.\r\n     * @member PropertyId.CancellationDetails_ReasonText\r\n     */\r\n    CancellationDetails_ReasonText,\r\n\r\n    /**\r\n     * Cancellation detailed text.\r\n     * @member PropertyId.CancellationDetails_ReasonDetailedText\r\n     */\r\n    CancellationDetails_ReasonDetailedText,\r\n\r\n    /**\r\n     * JSON result of language understanding service.\r\n     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult\r\n     */\r\n    LanguageUnderstandingServiceResponse_JsonResult,\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/PropertyId.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    Device,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OS,\r\n    PlatformConfig,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    Promise,\r\n    PromiseHelper,\r\n} from \"../common/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport abstract class Recognizer {\r\n    private disposed: boolean;\r\n    protected audioConfig: AudioConfig;\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     */\r\n    protected constructor(audioConfig: AudioConfig) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n\r\n        this.disposed = false;\r\n    }\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member Recognizer.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member Recognizer.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech started events.\r\n     * @member Recognizer.prototype.speechStartDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech stopped events.\r\n     * @member Recognizer.prototype.speechEndDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.disposed);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected dispose(disposing: boolean): void {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            // disconnect\r\n        }\r\n\r\n        this.disposed = true;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n\r\n    protected abstract CreateRecognizerConfig(speecgConfig: PlatformConfig, recognitionMode: RecognitionMode): RecognizerConfig;\r\n\r\n    protected abstract CreateServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\r\n\r\n    // Setup the recognizer\r\n    protected implRecognizerSetup(recognitionMode: RecognitionMode, speechProperties: PropertyCollection, audioConfig: AudioConfig, speechConnectionFactory: IConnectionFactory): ServiceRecognizerBase {\r\n\r\n        let osPlatform = (window !== undefined) ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (navigator !== undefined) {\r\n            osPlatform = osPlatform  + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig = this.CreateRecognizerConfig(\r\n            new PlatformConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))),\r\n            recognitionMode); // SDK.SpeechResultFormat.Simple (Options - Simple/Detailed)\r\n\r\n        const subscriptionKey = speechProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = subscriptionKey ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = speechProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return PromiseHelper.FromResult(authorizationToken);\r\n                },\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = speechProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return PromiseHelper.FromResult(authorizationToken);\r\n                });\r\n\r\n        return this.CreateServiceRecognizer(\r\n            authentication,\r\n            speechConnectionFactory,\r\n            audioConfig,\r\n            recognizerConfig);\r\n    }\r\n\r\n    // Start the recognition\r\n    protected implRecognizerStart(\r\n        recognizer: ServiceRecognizerBase,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallback: (e: string) => void,\r\n        speechContext?: string,\r\n    ): void {\r\n        recognizer.Recognize(speechContext, successCallback, errorCallback).On(\r\n            /* tslint:disable:no-empty */\r\n            (result: boolean): void => { },\r\n            (error: string): void => {\r\n                if (!!errorCallback) {\r\n                    // Internal error with service communication.\r\n                    errorCallback(\"Runtime error: \" + error);\r\n                }\r\n            });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/Recognizer.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    PlatformConfig,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceRecognizer,\r\n} from \"../common.speech/Exports\";\r\nimport { SpeechConnectionFactory } from \"../common.speech/SpeechConnectionFactory\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    KeywordRecognitionModel,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\r\nexport class SpeechRecognizer extends Recognizer {\r\n    private disposedSpeechRecognizer: boolean = false;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        super(audioConfig);\r\n\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n\r\n        Contracts.throwIfNullOrWhitespace(speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member SpeechRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n     * @member SpeechRecognizer.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.disposedSpeechRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.disposedSpeechRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of recognition.\r\n     * @member SpeechRecognizer.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of recognition.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.disposedSpeechRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechRecognizer.\r\n     * @member SpeechRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, and stops after the first utterance is recognized. The task returns the recognition text as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized, so it is suitable only for single shot recognition\r\n     *       like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the SpeechRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedSpeechRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            this.reco = this.implRecognizerSetup(\r\n                RecognitionMode.Interactive,\r\n                this.properties,\r\n                this.audioConfig,\r\n                new SpeechConnectionFactory());\r\n\r\n            this.implRecognizerStart(this.reco, cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedSpeechRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            this.reco = this.implRecognizerSetup(\r\n                RecognitionMode.Conversation,\r\n                this.properties,\r\n                this.audioConfig,\r\n                new SpeechConnectionFactory());\r\n\r\n            this.implRecognizerStart(this.reco, undefined, undefined);\r\n\r\n            // report result to promise.\r\n            if (!!cb) {\r\n                try {\r\n                    cb();\r\n                } catch (e) {\r\n                    if (!!err) {\r\n                        err(e);\r\n                    }\r\n                }\r\n                cb = undefined;\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedSpeechRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            if (!!cb) {\r\n                try {\r\n                    cb();\r\n                } catch (e) {\r\n                    if (!!err) {\r\n                        err(e);\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model The keyword recognition model that specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member SpeechRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.disposedSpeechRecognizer);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected dispose(disposing: boolean): void {\r\n        if (this.disposedSpeechRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.implCloseExistingRecognizer();\r\n            this.disposedSpeechRecognizer = true;\r\n        }\r\n\r\n        super.dispose(disposing);\r\n    }\r\n\r\n    protected CreateRecognizerConfig(speechConfig: PlatformConfig, recognitionMode: RecognitionMode): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            recognitionMode,\r\n            this.properties);\r\n    }\r\n\r\n    protected CreateServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n\r\n    // tslint:disable-next-line:member-ordering\r\n    private reco: ServiceRecognizerBase;\r\n\r\n    private implCloseExistingRecognizer(): void {\r\n        if (this.reco) {\r\n            this.reco.AudioSource.TurnOff();\r\n            this.reco.Dispose();\r\n            this.reco = undefined;\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/SpeechRecognizer.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    AddedLmIntent,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    IntentConnectionFactory,\r\n    IntentServiceRecognizer,\r\n    PlatformConfig,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n} from \"../common.speech/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    KeywordRecognitionModel,\r\n    LanguageUnderstandingModel,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechConfig,\r\n} from \"./Exports\";\r\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Intent recognizer.\r\n * @class\r\n */\r\nexport class IntentRecognizer extends Recognizer {\r\n    private disposedIntentRecognizer: boolean;\r\n    private privProperties: PropertyCollection;\r\n    private reco: ServiceRecognizerBase;\r\n\r\n    private addedIntents: string[][];\r\n    private addedLmIntents: { [id: string]: AddedLmIntent; };\r\n    private intentDataSent: boolean;\r\n    private umbrellaIntent: AddedLmIntent;\r\n\r\n    /**\r\n     * Initializes an instance of the IntentRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig);\r\n        this.intentDataSent = false;\r\n        this.addedIntents = [];\r\n        this.addedLmIntents = {};\r\n\r\n        this.disposedIntentRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member IntentRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} the spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.disposedIntentRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this IntentRecognizer.\r\n     * @member IntentRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this IntentRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts intent recognition, and stops after the first utterance is recognized. The task returns the recognition text and intent as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized, so it is suitable only for single shot recognition like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedIntentRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            let contextJson: string;\r\n\r\n            if (Object.keys(this.addedLmIntents).length !== 0 || undefined !== this.umbrellaIntent) {\r\n                contextJson = this.buildSpeechContext();\r\n                this.intentDataSent = true;\r\n            }\r\n\r\n            this.reco = this.implRecognizerSetup(\r\n                RecognitionMode.Interactive,\r\n                this.properties,\r\n                this.audioConfig,\r\n                new IntentConnectionFactory());\r\n\r\n            const intentReco: IntentServiceRecognizer = this.reco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.addedLmIntents, this.umbrellaIntent);\r\n\r\n            this.implRecognizerStart(this.reco, cb, err, contextJson);\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedIntentRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            let contextJson: string;\r\n\r\n            if (Object.keys(this.addedLmIntents).length !== 0) {\r\n                contextJson = this.buildSpeechContext();\r\n                this.intentDataSent = true;\r\n            }\r\n\r\n            this.reco = this.implRecognizerSetup(\r\n                RecognitionMode.Conversation,\r\n                this.properties,\r\n                this.audioConfig,\r\n                new IntentConnectionFactory());\r\n\r\n            const intentReco: IntentServiceRecognizer = this.reco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.addedLmIntents, this.umbrellaIntent);\r\n\r\n            this.implRecognizerStart(this.reco, undefined, undefined, contextJson);\r\n\r\n            // report result to promise.\r\n            if (!!cb) {\r\n                try {\r\n                    cb();\r\n                } catch (e) {\r\n                    if (!!err) {\r\n                        err(e);\r\n                    }\r\n                }\r\n                cb = undefined;\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous intent recognition.\r\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedIntentRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            if (!!cb) {\r\n                try {\r\n                    cb();\r\n                } catch (e) {\r\n                    if (!!err) {\r\n                        err(e);\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a phrase that should be recognized as intent.\r\n     * @member IntentRecognizer.prototype.addIntent\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\r\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\r\n     */\r\n    public addIntent(simplePhrase: string, intentId?: string): void {\r\n        Contracts.throwIfDisposed(this.disposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\r\n\r\n        this.addedIntents.push([intentId, simplePhrase]);\r\n    }\r\n\r\n    /**\r\n     * Adds an intent from Language Understanding service for recognition.\r\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized. Ignored if intentName is empty.\r\n     * @param {string} model - The intent model from Language Understanding service.\r\n     * @param {string} intentName - The intent name defined in the intent model. If it is empty, all intent names defined in the model will be added.\r\n     */\r\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\r\n        Contracts.throwIfDisposed(this.disposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.addedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\r\n    }\r\n\r\n    /**\r\n     * @summary Adds all intents from the specified Language Understanding Model.\r\n     * @member IntentRecognizer.prototype.addAllIntents\r\n     * @function\r\n     * @public\r\n     * @function\r\n     * @public\r\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\r\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\r\n     */\r\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.umbrellaIntent = new AddedLmIntent(modelImpl, intentId);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member IntentRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.disposedIntentRecognizer);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    protected CreateRecognizerConfig(speecgConfig: PlatformConfig, recognitionMode: RecognitionMode): RecognizerConfig {\r\n        return new RecognizerConfig(speecgConfig, recognitionMode, this.properties);\r\n    }\r\n    protected CreateServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this, this.intentDataSent);\r\n    }\r\n\r\n    protected dispose(disposing: boolean): void {\r\n        if (this.disposedIntentRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.disposedIntentRecognizer = true;\r\n            super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    private implCloseExistingRecognizer(): void {\r\n        if (this.reco) {\r\n            this.reco.AudioSource.TurnOff();\r\n            this.reco.Dispose();\r\n            this.reco = undefined;\r\n        }\r\n    }\r\n\r\n    private buildSpeechContext(): string {\r\n        let appId: string;\r\n        let region: string;\r\n        let subscriptionKey: string;\r\n        const refGrammers: string[] = [];\r\n\r\n        if (undefined !== this.umbrellaIntent) {\r\n            appId = this.umbrellaIntent.modelImpl.appId;\r\n            region = this.umbrellaIntent.modelImpl.region;\r\n            subscriptionKey = this.umbrellaIntent.modelImpl.subscriptionKey;\r\n        }\r\n\r\n        // Build the reference grammer array.\r\n        for (const intentId of Object.keys(this.addedLmIntents)) {\r\n            const addedLmIntent: AddedLmIntent = this.addedLmIntents[intentId];\r\n\r\n            // validate all the same model, region, and key...\r\n            if (appId === undefined) {\r\n                appId = addedLmIntent.modelImpl.appId;\r\n            } else {\r\n                if (appId !== addedLmIntent.modelImpl.appId) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model\");\r\n                }\r\n            }\r\n\r\n            if (region === undefined) {\r\n                region = addedLmIntent.modelImpl.region;\r\n            } else {\r\n                if (region !== addedLmIntent.modelImpl.region) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\r\n                }\r\n            }\r\n\r\n            if (subscriptionKey === undefined) {\r\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\r\n            } else {\r\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\r\n                    throw new Error(\"Intents must all use the same subscription key\");\r\n                }\r\n            }\r\n\r\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\r\n            refGrammers.push(grammer);\r\n        }\r\n\r\n        return JSON.stringify({\r\n            dgi: {\r\n                ReferenceGrammars: (undefined === this.umbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\r\n            },\r\n            intent: {\r\n                id: appId,\r\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\r\n                provider: \"LUIS\",\r\n            },\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/IntentRecognizer.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    PlatformConfig,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer,\r\n} from \"../common.speech/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs,\r\n} from \"./Exports\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    private disposedTranslationRecognizer: boolean;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig);\r\n\r\n        this.disposedTranslationRecognizer = false;\r\n        this.privProperties = configImpl.properties.clone();\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice), PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages), PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.disposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.disposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.disposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized. The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly\r\n     *       for single shot recognition like command or query. For long-running recognition, use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedTranslationRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            this.reco = this.implRecognizerSetup(\r\n                RecognitionMode.Conversation,\r\n                this.properties,\r\n                this.audioConfig,\r\n                new TranslationConnectionFactory());\r\n\r\n            this.implRecognizerStart(\r\n                this.reco,\r\n                cb,\r\n                err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedTranslationRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            this.reco = this.implRecognizerSetup(\r\n                RecognitionMode.Conversation,\r\n                this.properties,\r\n                this.audioConfig,\r\n                new TranslationConnectionFactory());\r\n\r\n            this.implRecognizerStart(this.reco, undefined, undefined);\r\n\r\n            // report result to promise.\r\n            if (!!cb) {\r\n                try {\r\n                    cb();\r\n                } catch (e) {\r\n                    if (!!err) {\r\n                        err(e);\r\n                    }\r\n                }\r\n                cb = undefined;\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.disposedTranslationRecognizer);\r\n\r\n            this.implCloseExistingRecognizer();\r\n\r\n            if (!!cb) {\r\n                try {\r\n                    cb();\r\n                } catch (e) {\r\n                    if (!!err) {\r\n                        err(e);\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.disposedTranslationRecognizer);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    protected dispose(disposing: boolean): boolean {\r\n        if (this.disposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.implCloseExistingRecognizer();\r\n            this.disposedTranslationRecognizer = true;\r\n            super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected CreateRecognizerConfig(speechConfig: PlatformConfig, recognitionMode: RecognitionMode): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, RecognitionMode.Conversation, this.properties);\r\n    }\r\n\r\n    protected CreateServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n\r\n    // tslint:disable-next-line:member-ordering\r\n    private reco: ServiceRecognizerBase;\r\n\r\n    private implCloseExistingRecognizer(): void {\r\n        if (this.reco) {\r\n            this.reco.AudioSource.TurnOff();\r\n            this.reco.Dispose();\r\n            this.reco = undefined;\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/TranslationRecognizer.ts","//\r\n// copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport { PropertyCollection } from \"./Exports\";\r\n\r\n/**\r\n * Represents collection of parameters and their values.\r\n * @class Translation\r\n */\r\nexport class Translations {\r\n    // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.\r\n    private map: PropertyCollection = new PropertyCollection();\r\n\r\n    /**\r\n     * Returns the parameter value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member Translation.prototype.get\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public get(key: string, def?: string): string {\r\n        return this.map.getProperty(key, def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member Translation.prototype.set\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public set(key: string, value: string): void {\r\n        this.map.setProperty(key, value);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/Translations.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might not be recognized.\r\n * @class NoMatchReason\r\n */\r\nexport enum NoMatchReason {\r\n\r\n    /**\r\n     * Indicates that speech was detected, but not recognized.\r\n     * @member NoMatchReason.NotRecognized\r\n     */\r\n    NotRecognized,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only silence, and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialSilenceTimeout\r\n     */\r\n    InitialSilenceTimeout,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only noise, and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialBabbleTimeout\r\n     */\r\n    InitialBabbleTimeout,\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/NoMatchReason.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    RecognitionStatus,\r\n    SimpleSpeechPhrase,\r\n} from \"../../src/common.speech/Exports\";\r\nimport {\r\n    IntentRecognitionResult,\r\n    NoMatchReason,\r\n    SpeechRecognitionResult,\r\n    TranslationRecognitionResult,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Contains detailed information for NoMatch recognition results.\r\n * @class NoMatchDetails\r\n */\r\nexport class NoMatchDetails {\r\n    private privReason: NoMatchReason;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {NoMatchReason} reason - The no-match reason.\r\n     */\r\n    private constructor(reason: NoMatchReason) {\r\n        this.privReason = reason;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of NoMatchDetails object for the NoMatch SpeechRecognitionResults.\r\n     * @member NoMatchDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult} result - The recognition result that was not recognized.\r\n     * @returns {NoMatchDetails} The no match details object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult): NoMatchDetails {\r\n        const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.FromJSON(result.json);\r\n\r\n        let reason: NoMatchReason = NoMatchReason.NotRecognized;\r\n\r\n        switch (simpleSpeech.RecognitionStatus) {\r\n            case RecognitionStatus.BabbleTimeout:\r\n                reason = NoMatchReason.InitialBabbleTimeout;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n                reason = NoMatchReason.InitialSilenceTimeout;\r\n                break;\r\n            default:\r\n                reason = NoMatchReason.NotRecognized;\r\n                break;\r\n        }\r\n\r\n        return new NoMatchDetails(reason);\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member NoMatchDetails.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {NoMatchReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): NoMatchReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/NoMatchDetails.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    TranslationRecognitionResult,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Define payload of speech recognition canceled result events.\r\n * @class TranslationRecognitionCanceledEventArgs\r\n */\r\nexport class TranslationRecognitionCanceledEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n    private privSessionId: string;\r\n    private privCancelReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionid - The session id.\r\n     * @param {CancellationReason} cancellationReason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {TranslationRecognitionResult} result - The result.\r\n     */\r\n    public constructor(sessionid: string, cancellationReason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode, result: TranslationRecognitionResult) {\r\n        this.privCancelReason = cancellationReason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privResult = result;\r\n        this.privSessionId = sessionid;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n\r\n    /**\r\n     * Specifies the session identifier.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privCancelReason;\r\n    }\r\n\r\n    /**\r\n     * The error code of why the cancellation occurred.\r\n     * @return An error code that represents the error reason.\r\n     * Added in version 1.1.0.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides a details of why the occurred error.\r\n     * This field is only filled-out if the reason canceled (@see getReason) is set to Error.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/TranslationRecognitionCanceledEventArgs.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Define payload of intent recognition canceled result events.\r\n * @class IntentRecognitionCanceledEventArgs\r\n */\r\nexport class IntentRecognitionCanceledEventArgs extends IntentRecognitionEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} result - The result of the intent recognition.\r\n     * @param {string} offset - The offset.\r\n     * @param {IntentRecognitionResult} sessionId - The session id.\r\n     */\r\n    public constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode, result?: IntentRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(result, offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code of why the cancellation occurred.\r\n     * @return An error code that represents the error reason.\r\n     * Added in version 1.1.0.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides a details of why the occurred error.\r\n     * This field is only filled-out if the reason canceled (@see getReason) is set to Error.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/IntentRecognitionCanceledEventArgs.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\n\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    SimpleSpeechPhrase,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    RecognitionResult,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetails\r\n */\r\nexport class CancellationDetails {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - The error details, if provided.\r\n     */\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of CancellationDetails object for the canceled RecognitionResult.\r\n     * @member CancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult} result - The result that was canceled.\r\n     * @returns {CancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: RecognitionResult): CancellationDetails {\r\n        let reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.json) {\r\n            const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.FromJSON(result.json);\r\n            reason = EnumTranslation.implTranslateCancelResult(simpleSpeech.RecognitionStatus);\r\n        }\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])];\r\n        }\r\n\r\n        return new CancellationDetails(reason, result.errorDetails, errorCode);\r\n\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationDetails.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides a details of why the occurred error.\r\n     * This field is only filled-out if the reason canceled (@see getReason) is set to Error.\r\n     * @member CancellationDetails.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The error code of why the cancellation occurred.\r\n     * @return An error code that represents the error reason.\r\n     * Added in version 1.1.0.\r\n     */\r\n    public get ErrorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/CancellationDetails.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n/**\r\n *  Defines error code in case that CancellationReason is Error.\r\n *  Added in version 1.1.0.\r\n */\r\nexport enum CancellationErrorCode {\r\n    /**\r\n     * Indicates that an error occurred during speech recognition. Use errorDetails() contains detailed error response.\r\n     */\r\n    NoError,\r\n\r\n    /**\r\n     * Indicates an authentication error. The errorDetails property contains detailed error response.\r\n     */\r\n    AuthenticationFailure,\r\n\r\n    /**\r\n     * Indicates that one or more recognition parameters are invalid.\r\n     */\r\n    BadRequestParameters,\r\n\r\n    /**\r\n     * Indicates that the number of parallel requests exceeded the number of allowed concurrent transcriptions for the subscription.\r\n     */\r\n    TooManyRequests,\r\n\r\n    /**\r\n     * Indicates an connection error. The errorDetails property contains detailed error response.\r\n     */\r\n    ConnectionFailure,\r\n\r\n    /**\r\n     * Indicates a time-out error when waiting for response from service.\r\n     */\r\n    ServiceTimeout,\r\n\r\n    /**\r\n     * Indicates that an error is returned by the service.\r\n     */\r\n    ServiceError,\r\n\r\n    /**\r\n     * Indicates an unexpected runtime error. The errorDetails property contains detailed error response.\r\n     */\r\n    RuntimeError,\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/sdk/CancellationErrorCodes.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { AudioStreamFormatImpl } from \"../../src/sdk/Audio/AudioStreamFormat\";\r\nimport { AudioStreamFormat } from \"../../src/sdk/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    CreateNoDashGuid,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n    Promise,\r\n    PromiseHelper,\r\n    Stream,\r\n    StreamReader,\r\n} from \"../common/Exports\";\r\n\r\nimport { Timer } from \"../common.browser/Exports\";\r\n\r\nexport class FileAudioSource implements IAudioSource {\r\n\r\n    // Recommended sample rate (bytes/second).\r\n    private static readonly SAMPLE_RATE: number = 16000 * 2; // 16 kHz * 16 bits\r\n\r\n    // We should stream audio at no faster than 2x real-time (i.e., send five chunks\r\n    // per second, with the chunk size == sample rate in bytes per second * 2 / 5).\r\n    private static readonly CHUNK_SIZE: number = FileAudioSource.SAMPLE_RATE * 2 / 5;\r\n\r\n    private static readonly UPLOAD_INTERVAL: number = 200; // milliseconds\r\n\r\n    // 10 seconds of audio in bytes =\r\n    // sample rate (bytes/second) * 600 (seconds) + 44 (size of the wave header).\r\n    private static readonly MAX_SIZE: number = FileAudioSource.SAMPLE_RATE * 600 + 44;\r\n\r\n    private static readonly FILEFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getWaveFormatPCM(16000, 16, 1) as AudioStreamFormatImpl;\r\n\r\n    private streams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private id: string;\r\n\r\n    private events: EventSource<AudioSourceEvent>;\r\n\r\n    private file: File;\r\n\r\n    public constructor(file: File, audioSourceId?: string) {\r\n        this.id = audioSourceId ? audioSourceId : CreateNoDashGuid();\r\n        this.events = new EventSource<AudioSourceEvent>();\r\n        this.file = file;\r\n    }\r\n\r\n    public get Format(): AudioStreamFormat {\r\n        return FileAudioSource.FILEFORMAT;\r\n    }\r\n\r\n    public TurnOn = (): Promise<boolean> => {\r\n        if (typeof FileReader === \"undefined\") {\r\n            const errorMsg = \"Browser does not support FileReader.\";\r\n            this.OnEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // initialization error - no streamid at this point\r\n            return PromiseHelper.FromError<boolean>(errorMsg);\r\n        } else if (this.file.name.lastIndexOf(\".wav\") !== this.file.name.length - 4) {\r\n            const errorMsg = this.file.name + \" is not supported. Only WAVE files are allowed at the moment.\";\r\n            this.OnEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return PromiseHelper.FromError<boolean>(errorMsg);\r\n        } else if (this.file.size > FileAudioSource.MAX_SIZE) {\r\n            const errorMsg = this.file.name + \" exceeds the maximum allowed file size (\" + FileAudioSource.MAX_SIZE + \").\";\r\n            this.OnEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return PromiseHelper.FromError<boolean>(errorMsg);\r\n        }\r\n\r\n        this.OnEvent(new AudioSourceInitializingEvent(this.id)); // no stream id\r\n        this.OnEvent(new AudioSourceReadyEvent(this.id));\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    public Id = (): string => {\r\n        return this.id;\r\n    }\r\n\r\n    public Attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\r\n        this.OnEvent(new AudioStreamNodeAttachingEvent(this.id, audioNodeId));\r\n\r\n        return this.Upload(audioNodeId).OnSuccessContinueWith<IAudioStreamNode>(\r\n            (streamReader: StreamReader<ArrayBuffer>) => {\r\n                this.OnEvent(new AudioStreamNodeAttachedEvent(this.id, audioNodeId));\r\n                return {\r\n                    Detach: () => {\r\n                        streamReader.Close();\r\n                        delete this.streams[audioNodeId];\r\n                        this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n                        this.TurnOff();\r\n                    },\r\n                    Id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    Read: () => {\r\n                        return streamReader.Read();\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public Detach = (audioNodeId: string): void => {\r\n        if (audioNodeId && this.streams[audioNodeId]) {\r\n            this.streams[audioNodeId].Close();\r\n            delete this.streams[audioNodeId];\r\n            this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public TurnOff = (): Promise<boolean> => {\r\n        for (const streamId in this.streams) {\r\n            if (streamId) {\r\n                const stream = this.streams[streamId];\r\n                if (stream && !stream.IsClosed) {\r\n                    stream.Close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.OnEvent(new AudioSourceOffEvent(this.id)); // no stream now\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    public get Events(): EventSource<AudioSourceEvent> {\r\n        return this.events;\r\n    }\r\n\r\n    private Upload = (audioNodeId: string): Promise<StreamReader<ArrayBuffer>> => {\r\n        return this.TurnOn()\r\n            .OnSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\r\n                const stream = new Stream<ArrayBuffer>(audioNodeId);\r\n\r\n                this.streams[audioNodeId] = stream;\r\n\r\n                const reader: FileReader = new FileReader();\r\n\r\n                let startOffset = 0;\r\n                let endOffset = FileAudioSource.CHUNK_SIZE;\r\n                let lastWriteTimestamp = 0;\r\n\r\n                const processNextChunk = (event: Event): void => {\r\n                    if (stream.IsClosed) {\r\n                        return; // output stream was closed (somebody called TurnOff). We're done here.\r\n                    }\r\n\r\n                    if (lastWriteTimestamp !== 0) {\r\n                        const delay = Date.now() - lastWriteTimestamp;\r\n                        if (delay < FileAudioSource.UPLOAD_INTERVAL) {\r\n                            // It's been less than the \"upload interval\" since we've uploaded the\r\n                            // last chunk. Schedule the next upload to make sure that we're sending\r\n                            // upstream roughly one chunk per upload interval.\r\n                            new Timer(FileAudioSource.UPLOAD_INTERVAL - delay, processNextChunk).start();\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    stream.Write(reader.result as ArrayBuffer);\r\n                    lastWriteTimestamp = Date.now();\r\n\r\n                    if (endOffset < this.file.size) {\r\n                        startOffset = endOffset;\r\n                        endOffset = Math.min(endOffset + FileAudioSource.CHUNK_SIZE, this.file.size);\r\n                        const chunk = this.file.slice(startOffset, endOffset);\r\n                        reader.readAsArrayBuffer(chunk);\r\n                    } else {\r\n                        // we've written the entire file to the output stream, can close it now.\r\n                        stream.Close();\r\n                    }\r\n                };\r\n\r\n                reader.onload = processNextChunk;\r\n\r\n                reader.onerror = (event: ErrorEvent) => {\r\n                    const errorMsg = `Error occurred while processing '${this.file.name}'. ${event.error}`;\r\n                    this.OnEvent(new AudioStreamNodeErrorEvent(this.id, audioNodeId, event.error));\r\n                    throw new Error(errorMsg);\r\n                };\r\n\r\n                const chunk = this.file.slice(startOffset, endOffset);\r\n                reader.readAsArrayBuffer(chunk);\r\n\r\n                return stream.GetReader();\r\n            });\r\n    }\r\n\r\n    private OnEvent = (event: AudioSourceEvent): void => {\r\n        this.events.OnEvent(event);\r\n        Events.Instance.OnEvent(event);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/FileAudioSource.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\n// getting around the build error for MediaRecorder as Typescript does not have a definition for this one.\r\ndeclare var MediaRecorder: any;\r\n\r\nexport class OpusRecorder implements IRecorder {\r\n    private mediaResources: IMediaResources;\r\n    private mediaRecorderOptions: any;\r\n\r\n    constructor(options?: { mimeType: string, bitsPerSecond: number }) {\r\n        this.mediaRecorderOptions = options;\r\n    }\r\n\r\n    public Record = (context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\r\n        const mediaRecorder: any = new MediaRecorder(mediaStream, this.mediaRecorderOptions);\r\n        const timeslice = 100; // this is in ms - 100 ensures that the chunk doesn't exceed the max size of chunk allowed in WS connection\r\n        mediaRecorder.ondataavailable = (dataAvailableEvent: any) => {\r\n            if (outputStream) {\r\n                const reader = new FileReader();\r\n                reader.readAsArrayBuffer(dataAvailableEvent.data);\r\n                reader.onloadend = (event: ProgressEvent) => {\r\n                    outputStream.Write(reader.result as ArrayBuffer);\r\n                };\r\n            }\r\n        };\r\n\r\n        this.mediaResources = {\r\n            recorder: mediaRecorder,\r\n            stream: mediaStream,\r\n        };\r\n        mediaRecorder.start(timeslice);\r\n    }\r\n\r\n    public ReleaseMediaResources = (context: AudioContext): void => {\r\n        if (this.mediaResources.recorder.state !== \"inactive\") {\r\n            this.mediaResources.recorder.stop();\r\n        }\r\n        this.mediaResources.stream.getTracks().forEach((track: any) => track.stop());\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    stream: MediaStream;\r\n    recorder: any;\r\n}\r\n\r\n/* Declaring this inline to avoid compiler warnings\r\ndeclare class MediaRecorder {\r\n    constructor(mediaStream: MediaStream, options: any);\r\n\r\n    public state: string;\r\n\r\n    public ondataavailable(dataAvailableEvent: any): void;\r\n    public stop(): void;\r\n}*/\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/OpusRecorder.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { RiffPcmEncoder, Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\nexport class PcmRecorder implements IRecorder {\r\n    private mediaResources: IMediaResources;\r\n\r\n    public Record = (context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\r\n        const desiredSampleRate = 16000;\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor\r\n        const scriptNode = (() => {\r\n            let bufferSize = 0;\r\n            try {\r\n                return context.createScriptProcessor(bufferSize, 1, 1);\r\n            } catch (error) {\r\n                // Webkit (<= version 31) requires a valid bufferSize.\r\n                bufferSize = 2048;\r\n                let audioSampleRate = context.sampleRate;\r\n                while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\r\n                    bufferSize <<= 1 ;\r\n                    audioSampleRate >>= 1;\r\n                }\r\n                return context.createScriptProcessor(bufferSize, 1, 1);\r\n            }\r\n        })();\r\n\r\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\r\n        let needHeader: boolean = true;\r\n        const that = this;\r\n        scriptNode.onaudioprocess = (event: AudioProcessingEvent) => {\r\n            const inputFrame = event.inputBuffer.getChannelData(0);\r\n\r\n            if (outputStream && !outputStream.IsClosed) {\r\n                const waveFrame = waveStreamEncoder.Encode(needHeader, inputFrame);\r\n                if (!!waveFrame) {\r\n                    outputStream.Write(waveFrame);\r\n                    needHeader = false;\r\n                }\r\n            }\r\n        };\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamSource\r\n        const micInput = context.createMediaStreamSource(mediaStream);\r\n\r\n        this.mediaResources = {\r\n            scriptProcessorNode: scriptNode,\r\n            source: micInput,\r\n            stream: mediaStream,\r\n        };\r\n\r\n        micInput.connect(scriptNode);\r\n        scriptNode.connect(context.destination);\r\n    }\r\n\r\n    public ReleaseMediaResources = (context: AudioContext): void => {\r\n        if (this.mediaResources) {\r\n            if (this.mediaResources.scriptProcessorNode) {\r\n                this.mediaResources.scriptProcessorNode.disconnect(context.destination);\r\n                this.mediaResources.scriptProcessorNode = null;\r\n            }\r\n            if (this.mediaResources.source) {\r\n                this.mediaResources.source.disconnect();\r\n                this.mediaResources.stream.getTracks().forEach((track: any) => track.stop());\r\n                this.mediaResources.source = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    source: MediaStreamAudioSourceNode;\r\n    scriptProcessorNode: ScriptProcessorNode;\r\n    stream: MediaStream;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/PCMRecorder.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ArgumentNullError, IKeyValueStorage } from \"../common/Exports\";\r\n\r\nexport class SessionStorage implements IKeyValueStorage {\r\n\r\n    public Get = (key: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        return sessionStorage.getItem(key);\r\n    }\r\n\r\n    public GetOrAdd = (key: string, valueToAdd: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        const value = sessionStorage.getItem(key);\r\n        if (value === null || value === undefined) {\r\n            sessionStorage.setItem(key, valueToAdd);\r\n        }\r\n\r\n        return sessionStorage.getItem(key);\r\n    }\r\n\r\n    public Set = (key: string, value: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        sessionStorage.setItem(key, value);\r\n    }\r\n\r\n    public Remove = (key: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        sessionStorage.removeItem(key);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/SessionStorage.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport { ITimer } from \"../common/Exports\";\r\n\r\nexport class Timer implements ITimer {\r\n    private delayInMillisec: number;\r\n    private timerId: number;\r\n    private successCallback: any;\r\n    constructor(delayInMillisec: number, successCallback: any) {\r\n        this.delayInMillisec = delayInMillisec;\r\n        this.successCallback = successCallback;\r\n    }\r\n    public start = (...params: any[]): void => {\r\n        if (this.timerId) {\r\n            this.stop();\r\n        }\r\n        this.timerId = setTimeout(this.successCallback, this.delayInMillisec, params);\r\n    }\r\n\r\n    public stop = (): void => {\r\n        clearTimeout(this.timerId);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/Timer.ts","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// See https://aka.ms/csspeech/license201809 for the full license information.\r\n//\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    CreateNoDashGuid,\r\n    EventSource,\r\n    IConnection,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    PlatformEvent,\r\n    Promise,\r\n} from \"../common/Exports\";\r\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter\";\r\n\r\nexport class WebsocketConnection implements IConnection {\r\n\r\n    private uri: string;\r\n    private messageFormatter: IWebsocketMessageFormatter;\r\n    private connectionMessageAdapter: WebsocketMessageAdapter;\r\n    private id: string;\r\n    private isDisposed: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        queryParameters: IStringDictionary<string>,\r\n        headers: IStringDictionary<string>,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        connectionId?: string) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.messageFormatter = messageFormatter;\r\n\r\n        let queryParams = \"\";\r\n        let i = 0;\r\n\r\n        if (queryParameters) {\r\n            for (const paramName in queryParameters) {\r\n                if (paramName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(queryParameters[paramName]);\r\n                    queryParams += `${paramName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (headers) {\r\n            for (const headerName in headers) {\r\n                if (headerName) {\r\n                    queryParams += i === 0 ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(headers[headerName]);\r\n                    queryParams += `${headerName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.uri = uri + queryParams;\r\n        this.id = connectionId ? connectionId : CreateNoDashGuid();\r\n\r\n        this.connectionMessageAdapter = new WebsocketMessageAdapter(\r\n            this.uri,\r\n            this.Id,\r\n            this.messageFormatter);\r\n    }\r\n\r\n    public Dispose = (): void => {\r\n        this.isDisposed = true;\r\n\r\n        if (this.connectionMessageAdapter) {\r\n            this.connectionMessageAdapter.Close();\r\n        }\r\n    }\r\n\r\n    public IsDisposed = (): boolean => {\r\n        return this.isDisposed;\r\n    }\r\n\r\n    public get Id(): string {\r\n        return this.id;\r\n    }\r\n\r\n    public State = (): ConnectionState => {\r\n        return this.connectionMessageAdapter.State;\r\n    }\r\n\r\n    public Open = (): Promise<ConnectionOpenResponse> => {\r\n        return this.connectionMessageAdapter.Open();\r\n    }\r\n\r\n    public Send = (message: ConnectionMessage): Promise<boolean> => {\r\n        return this.connectionMessageAdapter.Send(message);\r\n    }\r\n\r\n    public Read = (): Promise<ConnectionMessage> => {\r\n        return this.connectionMessageAdapter.Read();\r\n    }\r\n\r\n    public get Events(): EventSource<ConnectionEvent> {\r\n        return this.connectionMessageAdapter.Events;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../src/common.browser/WebsocketConnection.ts"],"sourceRoot":"","file":"microsoft.cognitiveservices.speech.sdk.bundle.js"}