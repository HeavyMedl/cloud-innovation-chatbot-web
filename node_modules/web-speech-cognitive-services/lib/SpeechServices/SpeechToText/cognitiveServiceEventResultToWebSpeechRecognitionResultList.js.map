{"version":3,"sources":["../../../src/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResultList.js"],"names":["SpeechSDK","ResultReason","RecognizingSpeech","RecognizedSpeech","result","maxAlternatives","Infinity","textNormalization","reason","confidence","transcript","text","resultList","json","NBest","slice","map","Confidence","display","Display","itn","ITN","lexical","Lexical","maskedITN","MaskedITN","isFinal"],"mappings":";;;;;;;;;AAAA;;AACA;;4BAOIA,kB,CAJFC,Y;IACEC,iB,yBAAAA,iB;IACAC,gB,yBAAAA,gB;;AAIW,kBAAUC,MAAV,EAAsF;AAAA,iFAAJ,EAAI;AAAA,kCAAlEC,eAAkE;AAAA,MAAlEA,eAAkE,qCAAhDC,QAAgD;AAAA,mCAAtCC,iBAAsC;AAAA,MAAtCA,iBAAsC,sCAAlB,SAAkB;;AACnG,MAAIH,MAAM,CAACI,MAAP,KAAkBN,iBAAtB,EAAyC;AACvC,WAAO,CAAC,CAAC;AACPO,MAAAA,UAAU,EAAE,EADL;AAEPC,MAAAA,UAAU,EAAEN,MAAM,CAACO;AAFZ,KAAD,CAAD,CAAP;AAID,GALD,MAKO,IAAIP,MAAM,CAACI,MAAP,KAAkBL,gBAAtB,EAAwC;AAC7C,QAAMS,UAAU,GAAG,CACjB,yBACE,CAACR,MAAM,CAACS,IAAP,CAAYC,KAAZ,IAAqB,EAAtB,EAA0BC,KAA1B,CAAgC,CAAhC,EAAmCV,eAAnC,EAAoDW,GAApD,CACE;AAAA,UACcP,UADd,SACEQ,UADF;AAAA,UAEWC,OAFX,SAEEC,OAFF;AAAA,UAGOC,GAHP,SAGEC,GAHF;AAAA,UAIWC,OAJX,SAIEC,OAJF;AAAA,UAKaC,SALb,SAKEC,SALF;AAAA,aAMO;AACLhB,QAAAA,UAAU,EAAVA,UADK;AAELC,QAAAA,UAAU,EACRH,iBAAiB,KAAK,KAAtB,GACEa,GADF,GAEEb,iBAAiB,KAAK,SAAtB,GACAe,OADA,GAEAf,iBAAiB,KAAK,WAAtB,GACAiB,SADA,GAGAN;AAVC,OANP;AAAA,KADF,CADF,EAqBE;AAAEQ,MAAAA,OAAO,EAAE;AAAX,KArBF,CADiB,CAAnB;AA0BA,WAAOd,UAAP;AACD,GA5BM,MA4BA;AACL,WAAO,EAAP;AACD;AACF","sourcesContent":["import arrayToMap from '../../Util/arrayToMap';\nimport SpeechSDK from '../SpeechSDK';\n\nconst {\n  ResultReason: {\n    RecognizingSpeech,\n    RecognizedSpeech\n  }\n} = SpeechSDK;\n\nexport default function (result, { maxAlternatives = Infinity, textNormalization = 'display' } = {}) {\n  if (result.reason === RecognizingSpeech) {\n    return [[{\n      confidence: .5,\n      transcript: result.text\n    }]];\n  } else if (result.reason === RecognizedSpeech) {\n    const resultList = [\n      arrayToMap(\n        (result.json.NBest || []).slice(0, maxAlternatives).map(\n          ({\n            Confidence: confidence,\n            Display: display,\n            ITN: itn,\n            Lexical: lexical,\n            MaskedITN: maskedITN\n          }) => ({\n            confidence,\n            transcript:\n              textNormalization === 'itn' ?\n                itn\n              : textNormalization === 'lexical' ?\n                lexical\n              : textNormalization === 'maskeditn' ?\n                maskedITN\n              :\n                display\n          })\n        ),\n        { isFinal: true }\n      )\n    ];\n\n    return resultList;\n  } else {\n    return [];\n  }\n}\n"],"file":"cognitiveServiceEventResultToWebSpeechRecognitionResultList.js"}