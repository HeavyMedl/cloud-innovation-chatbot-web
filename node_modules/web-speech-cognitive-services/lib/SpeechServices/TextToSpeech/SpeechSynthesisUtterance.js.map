{"version":3,"sources":["../../../src/SpeechServices/TextToSpeech/SpeechSynthesisUtterance.js"],"names":["asyncDecodeAudioData","audioContext","arrayBuffer","Promise","resolve","reject","promise","decodeAudioData","then","playDecoded","audioBuffer","source","audioContextClosed","EventAsPromise","sourceEnded","unsubscribe","state","target","eventListener","buffer","onended","connect","destination","start","race","upcoming","text","_lang","_pitch","_rate","_voice","_volume","onboundary","onend","onerror","onmark","onpause","onresume","onstart","arrayBufferPromise","authorizationToken","lang","window","navigator","language","outputFormat","pitch","rate","region","voice","voiceURI","volume","createBufferSource","emit","_playingSource","error","type","stop","value","DOMEventEmitter"],"mappings":"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","sourcesContent":["import EventAsPromise from 'event-as-promise';\n\nimport DOMEventEmitter from '../../Util/DOMEventEmitter';\nimport fetchSpeechData from './fetchSpeechData';\nimport subscribeEvent from './subscribeEvent';\n\nfunction asyncDecodeAudioData(audioContext, arrayBuffer) {\n  return new Promise((resolve, reject) => {\n    const promise = audioContext.decodeAudioData(arrayBuffer, resolve, reject);\n\n    // Newer implementation of \"decodeAudioData\" will return a Promise\n    promise && typeof promise.then === 'function' && resolve(promise);\n  });\n}\n\nfunction playDecoded(audioContext, audioBuffer, source) {\n  return new Promise(async (resolve, reject) => {\n    const audioContextClosed = new EventAsPromise();\n    const sourceEnded = new EventAsPromise();\n    const unsubscribe = subscribeEvent(audioContext, 'statechange', ({ target: { state } }) => state === 'closed' && audioContextClosed.eventListener());\n\n    try {\n      source.buffer = audioBuffer;\n      // \"ended\" may not fire if the underlying AudioContext is closed prematurely\n      source.onended = sourceEnded.eventListener;\n\n      source.connect(audioContext.destination);\n      source.start(0);\n\n      await Promise.race([\n        audioContextClosed.upcoming(),\n        sourceEnded.upcoming()\n      ]);\n\n      resolve();\n    } catch (err) {\n      reject(err);\n    } finally {\n      unsubscribe();\n    }\n  });\n}\n\nexport default class extends DOMEventEmitter {\n  constructor(text) {\n    super(['boundary', 'end', 'error', 'mark', 'pause', 'resume', 'start']);\n\n    this._lang = null;\n    this._pitch = 1;\n    this._rate = 1;\n    this._voice = null;\n    this._volume = 1;\n\n    this.text = text;\n\n    this.onboundary = null;\n    this.onend = null;\n    this.onerror = null;\n    this.onmark = null;\n    this.onpause = null;\n    this.onresume = null;\n    this.onstart = null;\n  }\n\n  get lang() { return this._lang; }\n  set lang(value) { this._lang = value; }\n\n  get pitch() { return this._pitch; }\n  set pitch(value) { this._pitch = value; }\n\n  get rate() { return this._rate; }\n  set rate(value) { this._rate = value; }\n\n  get voice() { return this._voice; }\n  set voice(value) { this._voice = value; }\n\n  get volume() { return this._volume; }\n  set volume(value) { this._volume = value; }\n\n  async preload() {\n    this.arrayBufferPromise = fetchSpeechData({\n      authorizationToken: this.authorizationToken,\n      lang: this.lang || window.navigator.language,\n      outputFormat: this.outputFormat,\n      pitch: this.pitch,\n      rate: this.rate,\n      region: this.region,\n      text: this.text,\n      voice: this.voice && this.voice.voiceURI,\n      volume: this.volume\n    });\n\n    await this.arrayBufferPromise;\n  }\n\n  async play(audioContext) {\n    try {\n      // HACK: iOS requires bufferSourceNode to be constructed before decoding data\n      const source = audioContext.createBufferSource();\n      const audioBuffer = await asyncDecodeAudioData(audioContext, await this.arrayBufferPromise);\n\n      this.emit('start');\n      this._playingSource = source;\n\n      await playDecoded(audioContext, audioBuffer, source);\n\n      this._playingSource = null;\n      this.emit('end');\n    } catch (error) {\n      this.emit('error', { error, type: 'error' });\n    }\n  }\n\n  stop() {\n    this._playingSource && this._playingSource.stop();\n  }\n}\n"],"file":"SpeechSynthesisUtterance.js"}