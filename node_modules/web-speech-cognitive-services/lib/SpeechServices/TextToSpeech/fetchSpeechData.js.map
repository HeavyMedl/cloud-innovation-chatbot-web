{"version":3,"sources":["../../../src/SpeechServices/TextToSpeech/fetchSpeechData.js"],"names":["DEFAULT_LANGUAGE","DEFAULT_VOICE","SYNTHESIS_URL_TEMPLATE","authorizationToken","lang","outputFormat","pitch","rate","region","text","voice","volume","ssml","url","replace","fetch","headers","Authorization","method","body","res","status","Error","arrayBuffer"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA,IAAMA,gBAAgB,GAAG,OAAzB;AACA,IAAMC,aAAa,GAAG,gEAAtB;AACA,IAAMC,sBAAsB,GAAG,gEAA/B;;;;;;;;;4BAEe;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,kBADa,QACbA,kBADa,mBAEbC,IAFa,EAEbA,IAFa,0BAENJ,gBAFM,cAGbK,YAHa,QAGbA,YAHa,EAIbC,KAJa,QAIbA,KAJa,EAKbC,IALa,QAKbA,IALa,EAMbC,MANa,QAMbA,MANa,EAObC,IAPa,QAObA,IAPa,oBAQbC,KARa,EAQbA,KARa,2BAQLT,aARK,eASbU,MATa,QASbA,MATa;AAWPC,YAAAA,IAXO,GAWA,wBAAU;AAAER,cAAAA,IAAI,EAAJA,IAAF;AAAQE,cAAAA,KAAK,EAALA,KAAR;AAAeC,cAAAA,IAAI,EAAJA,IAAf;AAAqBE,cAAAA,IAAI,EAAJA,IAArB;AAA2BC,cAAAA,KAAK,EAALA,KAA3B;AAAkCC,cAAAA,MAAM,EAANA;AAAlC,aAAV,CAXA;AAYPE,YAAAA,GAZO,GAYDX,sBAAsB,CAACY,OAAvB,CAA+B,YAA/B,EAA6CN,MAA7C,CAZC;AAAA;AAAA,mBAcKO,KAAK,CAACF,GAAD,EAAM;AAC3BG,cAAAA,OAAO,EAAE;AACPC,gBAAAA,aAAa,mBAAad,kBAAb,CADN;AAEP,gCAAgB,sBAFT;AAGP,4CAA4BE;AAHrB,eADkB;AAM3Ba,cAAAA,MAAM,EAAE,MANmB;AAO3BC,cAAAA,IAAI,EAAEP;AAPqB,aAAN,CAdV;;AAAA;AAcPQ,YAAAA,GAdO;;AAAA,kBAwBTA,GAAG,CAACC,MAAJ,KAAe,GAxBN;AAAA;AAAA;AAAA;;AAAA,kBAyBL,IAAIC,KAAJ,sDAAyDF,GAAG,CAACC,MAA7D,EAzBK;;AAAA;AAAA,6CA4BND,GAAG,CAACG,WAAJ,EA5BM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import buildSSML from './buildSSML';\n\nconst DEFAULT_LANGUAGE = 'en-US';\nconst DEFAULT_VOICE = 'Microsoft Server Speech Text to Speech Voice (en-US, JessaRUS)'\nconst SYNTHESIS_URL_TEMPLATE = 'https://{region}.tts.speech.microsoft.com/cognitiveservices/v1';\n\nexport default async function ({\n  authorizationToken,\n  lang = DEFAULT_LANGUAGE,\n  outputFormat,\n  pitch,\n  rate,\n  region,\n  text,\n  voice = DEFAULT_VOICE,\n  volume\n}) {\n  const ssml = buildSSML({ lang, pitch, rate, text, voice, volume });\n  const url = SYNTHESIS_URL_TEMPLATE.replace(/\\{region\\}/, region);\n\n  const res = await fetch(url, {\n    headers: {\n      Authorization: `Bearer ${ authorizationToken }`,\n      'Content-Type': 'application/ssml+xml',\n      'X-Microsoft-OutputFormat': outputFormat\n    },\n    method: 'POST',\n    body: ssml\n  });\n\n  if (res.status !== 200) {\n    throw new Error(`Failed to syntheis speech, server returned ${ res.status }`);\n  }\n\n  return res.arrayBuffer();\n}\n"],"file":"fetchSpeechData.js"}