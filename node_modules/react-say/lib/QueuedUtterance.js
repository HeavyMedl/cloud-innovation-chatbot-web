"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _createDeferred = _interopRequireDefault(require("./createDeferred"));

function createNativeUtterance(utteranceLike, ponyfill) {
  var speechSynthesis = ponyfill.speechSynthesis,
      SpeechSynthesisUtterance = ponyfill.SpeechSynthesisUtterance;
  var lang = utteranceLike.lang,
      onBoundary = utteranceLike.onBoundary,
      pitch = utteranceLike.pitch,
      rate = utteranceLike.rate,
      text = utteranceLike.text,
      voice = utteranceLike.voice,
      volume = utteranceLike.volume;
  var utterance = new SpeechSynthesisUtterance(text);
  var targetVoice;

  if (typeof voice === 'function') {
    targetVoice = voice.call(speechSynthesis, speechSynthesis.getVoices());
  } else {
    var _ref = voice || {},
        voiceURI = _ref.voiceURI;

    targetVoice = voiceURI && [].find.call([].slice.call(speechSynthesis.getVoices()), function (v) {
      return v.voiceURI === voiceURI;
    });
  } // Edge will mute if "lang" is set to ""


  utterance.lang = lang || '';

  if (pitch || pitch === 0) {
    utterance.pitch = pitch;
  }

  if (rate || rate === 0) {
    utterance.rate = rate;
  } // Cognitive Services will error when "voice" is set to "null"
  // Edge will error when "voice" is set to "undefined"


  if (targetVoice) {
    utterance.voice = targetVoice;
  }

  if (volume || volume === 0) {
    utterance.volume = volume;
  }

  if (utterance.addEventListener && onBoundary) {
    utterance.addEventListener('boundary', onBoundary); // Since browser quirks, start/error/end events are emulated for best compatibility
  }

  return utterance;
}

function speakUtterance(_x, _x2, _x3) {
  return _speakUtterance.apply(this, arguments);
}

function _speakUtterance() {
  _speakUtterance = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee4(ponyfill, utteranceLike, startCallback) {
    var speechSynthesis, utterance, startDeferred, errorDeferred, endDeferred, startEvent, finishedSpeaking, endPromise, endEvent;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            speechSynthesis = ponyfill.speechSynthesis;
            utterance = createNativeUtterance(utteranceLike, ponyfill);
            startDeferred = (0, _createDeferred["default"])();
            errorDeferred = (0, _createDeferred["default"])();
            endDeferred = (0, _createDeferred["default"])();
            utterance.addEventListener('end', endDeferred.resolve);
            utterance.addEventListener('error', errorDeferred.resolve);
            utterance.addEventListener('start', startDeferred.resolve); // if (speechSynthesis.speaking) {
            //   console.warn(`ASSERTION: speechSynthesis.speaking should not be truthy before we call speak`);
            // }

            speechSynthesis.speak(utterance); // await startDeferred.promise;

            _context4.next = 11;
            return Promise.race([errorDeferred.promise, startDeferred.promise]);

          case 11:
            startEvent = _context4.sent;

            if (!(startEvent.type === 'error')) {
              _context4.next = 14;
              break;
            }

            throw startEvent.error;

          case 14:
            endPromise = Promise.race([errorDeferred.promise, endDeferred.promise]);
            startCallback && startCallback(
            /*#__PURE__*/
            (0, _asyncToGenerator2["default"])(
            /*#__PURE__*/
            _regenerator["default"].mark(function _callee3() {
              return _regenerator["default"].wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      if (finishedSpeaking) {
                        _context3.next = 4;
                        break;
                      }

                      speechSynthesis.cancel();
                      _context3.next = 4;
                      return endPromise;

                    case 4:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3);
            })));
            _context4.next = 18;
            return endPromise;

          case 18:
            endEvent = _context4.sent;
            finishedSpeaking = true; // if (speechSynthesis.speaking) {
            //   console.warn(`ASSERTION: speechSynthesis.speaking should not be truthy after speak is stopped`);
            // }
            // console.debug(`ENDED: ${ utterance.text }`);

            if (!(endEvent.type === 'error')) {
              _context4.next = 22;
              break;
            }

            throw endEvent.error;

          case 22:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _speakUtterance.apply(this, arguments);
}

var QueuedUtterance =
/*#__PURE__*/
function () {
  function QueuedUtterance(utteranceLike) {
    (0, _classCallCheck2["default"])(this, QueuedUtterance);
    this._cancelled = false;
    this._deferred = (0, _createDeferred["default"])();
    this._ponyfill = null;
    this._speaking = false;
    this._utteranceLike = utteranceLike;
    this.id = utteranceLike.id;
    this.promise = this._deferred.promise;
  }

  (0, _createClass2["default"])(QueuedUtterance, [{
    key: "cancel",
    value: function () {
      var _cancel = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this._cancelled = true;
                _context.t0 = this._cancel;

                if (!_context.t0) {
                  _context.next = 5;
                  break;
                }

                _context.next = 5;
                return this._cancel();

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function cancel() {
        return _cancel.apply(this, arguments);
      }

      return cancel;
    }()
  }, {
    key: "speak",
    value: function speak(ponyfill) {
      var _this = this;

      (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2() {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!_this._cancelled) {
                  _context2.next = 2;
                  break;
                }

                throw new Error('cancelled');

              case 2:
                _context2.next = 4;
                return speakUtterance(ponyfill, _this._utteranceLike, function (cancel) {
                  if (_this._cancelled) {
                    cancel();
                  } else {
                    _this._cancel = cancel;
                    _this._utteranceLike.onStart && _this._utteranceLike.onStart(new Event('start'));
                  }
                });

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))().then(function () {
        if (_this._cancelled) {
          throw new Error('cancelled');
        }
      }).then(function () {
        _this._utteranceLike.onEnd && _this._utteranceLike.onEnd(new Event('end'));

        _this._deferred.resolve();
      }, function (error) {
        var event = new Event('error');
        event.error = error;
        _this._utteranceLike.onError && _this._utteranceLike.onError(event);

        _this._deferred.reject(error);
      });
      return this.promise;
    }
  }]);
  return QueuedUtterance;
}();

exports["default"] = QueuedUtterance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,