"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createContext;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _QueuedUtterance = _interopRequireDefault(require("./QueuedUtterance"));

function createContext(_ref) {
  var speechSynthesis = _ref.speechSynthesis,
      SpeechSynthesisUtterance = _ref.SpeechSynthesisUtterance;
  var ponyfill = {
    speechSynthesis: speechSynthesis,
    SpeechSynthesisUtterance: SpeechSynthesisUtterance
  };
  var queueWithCurrent = [];
  var running;

  var run =
  /*#__PURE__*/
  function () {
    var _ref2 = (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee2() {
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!running) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return");

            case 2:
              running = true;
              _context2.prev = 3;
              return _context2.delegateYield(
              /*#__PURE__*/
              _regenerator["default"].mark(function _callee() {
                var utterance;
                return _regenerator["default"].wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        if (!(utterance = queueWithCurrent[0])) {
                          _context.next = 12;
                          break;
                        }

                        _context.prev = 1;
                        _context.next = 4;
                        return utterance.speak(ponyfill);

                      case 4:
                        _context.next = 9;
                        break;

                      case 6:
                        _context.prev = 6;
                        _context.t0 = _context["catch"](1);
                        // TODO: If the error is due to Safari restriction on user touch
                        //       The next loop on the next audio will also fail because it was not queued with a user touch
                        _context.t0.message !== 'cancelled' && console.error(_context.t0);

                      case 9:
                        queueWithCurrent = queueWithCurrent.filter(function (target) {
                          return target !== utterance;
                        });
                        _context.next = 0;
                        break;

                      case 12:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, null, [[1, 6]]);
              })(), "t0", 5);

            case 5:
              _context2.prev = 5;
              running = false;
              return _context2.finish(5);

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[3,, 5, 8]]);
    }));

    return function run() {
      return _ref2.apply(this, arguments);
    };
  }();

  return {
    cancel: function () {
      var _cancel = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee3(id) {
        var index;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                index = queueWithCurrent.findIndex(function (utterance) {
                  return utterance.id === id;
                }); // We would leave the cancelled utterance in the queue because we want to reject the promise.

                _context3.next = 3;
                return queueWithCurrent[index].cancel();

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function cancel(_x) {
        return _cancel.apply(this, arguments);
      }

      return cancel;
    }(),
    setPonyfill: function setPonyfill(_ref3) {
      var speechSynthesis = _ref3.speechSynthesis,
          SpeechSynthesisUtterance = _ref3.SpeechSynthesisUtterance;
      ponyfill = {
        speechSynthesis: speechSynthesis,
        SpeechSynthesisUtterance: SpeechSynthesisUtterance
      };
    },
    speak: function speak(utteranceLike) {
      // console.debug(`QUEUED: ${ utteranceLike.text }`);
      if (utteranceLike.id && queueWithCurrent.find(function (_ref4) {
        var id = _ref4.id;
        return id === utteranceLike.id;
      })) {
        // Do not queue duplicated speak with same unique ID
        // console.debug('NOT QUEUEING DUPE');
        return Promise.reject(new Error('Utterance with same ID is queued'));
      }

      var utterance = new _QueuedUtterance["default"](utteranceLike);
      queueWithCurrent = [].concat((0, _toConsumableArray2["default"])(queueWithCurrent), [utterance]);
      run();
      return utterance.promise;
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVDb250ZXh0LmpzIl0sIm5hbWVzIjpbImNyZWF0ZUNvbnRleHQiLCJzcGVlY2hTeW50aGVzaXMiLCJTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UiLCJwb255ZmlsbCIsInF1ZXVlV2l0aEN1cnJlbnQiLCJydW5uaW5nIiwicnVuIiwidXR0ZXJhbmNlIiwic3BlYWsiLCJtZXNzYWdlIiwiY29uc29sZSIsImVycm9yIiwiZmlsdGVyIiwidGFyZ2V0IiwiY2FuY2VsIiwiaWQiLCJpbmRleCIsImZpbmRJbmRleCIsInNldFBvbnlmaWxsIiwidXR0ZXJhbmNlTGlrZSIsImZpbmQiLCJQcm9taXNlIiwicmVqZWN0IiwiRXJyb3IiLCJRdWV1ZWRVdHRlcmFuY2UiLCJwcm9taXNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFFZSxTQUFTQSxhQUFULE9BQXNFO0FBQUEsTUFBN0NDLGVBQTZDLFFBQTdDQSxlQUE2QztBQUFBLE1BQTVCQyx3QkFBNEIsUUFBNUJBLHdCQUE0QjtBQUNuRixNQUFJQyxRQUFRLEdBQUc7QUFBRUYsSUFBQUEsZUFBZSxFQUFmQSxlQUFGO0FBQW1CQyxJQUFBQSx3QkFBd0IsRUFBeEJBO0FBQW5CLEdBQWY7QUFDQSxNQUFJRSxnQkFBZ0IsR0FBRyxFQUF2QjtBQUNBLE1BQUlDLE9BQUo7O0FBRUEsTUFBTUMsR0FBRztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUNBQUc7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQUNORCxPQURNO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBO0FBS1ZBLGNBQUFBLE9BQU8sR0FBRyxJQUFWO0FBTFU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsOEJBVUFFLFNBQVMsR0FBR0gsZ0JBQWdCLENBQUMsQ0FBRCxDQVY1QjtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUEsK0JBWUVHLFNBQVMsQ0FBQ0MsS0FBVixDQUFnQkwsUUFBaEIsQ0FaRjs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBY0o7QUFDQTtBQUVBLG9DQUFJTSxPQUFKLEtBQWdCLFdBQWhCLElBQStCQyxPQUFPLENBQUNDLEtBQVIsYUFBL0I7O0FBakJJO0FBb0JOUCx3QkFBQUEsZ0JBQWdCLEdBQUdBLGdCQUFnQixDQUFDUSxNQUFqQixDQUF3QixVQUFBQyxNQUFNO0FBQUEsaUNBQUlBLE1BQU0sS0FBS04sU0FBZjtBQUFBLHlCQUE5QixDQUFuQjtBQXBCTTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUF1QlJGLGNBQUFBLE9BQU8sR0FBRyxLQUFWO0FBdkJROztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQUg7O0FBQUEsb0JBQUhDLEdBQUc7QUFBQTtBQUFBO0FBQUEsS0FBVDs7QUEyQkEsU0FBTztBQUNDUSxJQUFBQSxNQUREO0FBQUE7QUFBQTtBQUFBLHFEQUNRQyxFQURSO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVHQyxnQkFBQUEsS0FGSCxHQUVXWixnQkFBZ0IsQ0FBQ2EsU0FBakIsQ0FBMkIsVUFBQVYsU0FBUztBQUFBLHlCQUFJQSxTQUFTLENBQUNRLEVBQVYsS0FBaUJBLEVBQXJCO0FBQUEsaUJBQXBDLENBRlgsRUFJSDs7QUFKRztBQUFBLHVCQUtHWCxnQkFBZ0IsQ0FBQ1ksS0FBRCxDQUFoQixDQUF3QkYsTUFBeEIsRUFMSDs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQU9MSSxJQUFBQSxXQVBLLDhCQU9zRDtBQUFBLFVBQTdDakIsZUFBNkMsU0FBN0NBLGVBQTZDO0FBQUEsVUFBNUJDLHdCQUE0QixTQUE1QkEsd0JBQTRCO0FBQ3pEQyxNQUFBQSxRQUFRLEdBQUc7QUFBRUYsUUFBQUEsZUFBZSxFQUFmQSxlQUFGO0FBQW1CQyxRQUFBQSx3QkFBd0IsRUFBeEJBO0FBQW5CLE9BQVg7QUFDRCxLQVRJO0FBVUxNLElBQUFBLEtBVkssaUJBVUNXLGFBVkQsRUFVZ0I7QUFDbkI7QUFFQSxVQUNFQSxhQUFhLENBQUNKLEVBQWQsSUFDR1gsZ0JBQWdCLENBQUNnQixJQUFqQixDQUFzQjtBQUFBLFlBQUdMLEVBQUgsU0FBR0EsRUFBSDtBQUFBLGVBQVlBLEVBQUUsS0FBS0ksYUFBYSxDQUFDSixFQUFqQztBQUFBLE9BQXRCLENBRkwsRUFHRTtBQUNBO0FBQ0E7QUFFQSxlQUFPTSxPQUFPLENBQUNDLE1BQVIsQ0FBZSxJQUFJQyxLQUFKLENBQVUsa0NBQVYsQ0FBZixDQUFQO0FBQ0Q7O0FBRUQsVUFBTWhCLFNBQVMsR0FBRyxJQUFJaUIsMkJBQUosQ0FBb0JMLGFBQXBCLENBQWxCO0FBRUFmLE1BQUFBLGdCQUFnQixpREFBT0EsZ0JBQVAsSUFBeUJHLFNBQXpCLEVBQWhCO0FBQ0FELE1BQUFBLEdBQUc7QUFFSCxhQUFPQyxTQUFTLENBQUNrQixPQUFqQjtBQUNEO0FBN0JJLEdBQVA7QUErQkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUXVldWVkVXR0ZXJhbmNlIGZyb20gJy4vUXVldWVkVXR0ZXJhbmNlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ29udGV4dCh7IHNwZWVjaFN5bnRoZXNpcywgU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlIH0pIHtcbiAgbGV0IHBvbnlmaWxsID0geyBzcGVlY2hTeW50aGVzaXMsIFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSB9O1xuICBsZXQgcXVldWVXaXRoQ3VycmVudCA9IFtdO1xuICBsZXQgcnVubmluZztcblxuICBjb25zdCBydW4gPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBydW5uaW5nID0gdHJ1ZTtcblxuICAgIHRyeSB7XG4gICAgICBsZXQgdXR0ZXJhbmNlO1xuXG4gICAgICB3aGlsZSAoKHV0dGVyYW5jZSA9IHF1ZXVlV2l0aEN1cnJlbnRbMF0pKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgdXR0ZXJhbmNlLnNwZWFrKHBvbnlmaWxsKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgLy8gVE9ETzogSWYgdGhlIGVycm9yIGlzIGR1ZSB0byBTYWZhcmkgcmVzdHJpY3Rpb24gb24gdXNlciB0b3VjaFxuICAgICAgICAgIC8vICAgICAgIFRoZSBuZXh0IGxvb3Agb24gdGhlIG5leHQgYXVkaW8gd2lsbCBhbHNvIGZhaWwgYmVjYXVzZSBpdCB3YXMgbm90IHF1ZXVlZCB3aXRoIGEgdXNlciB0b3VjaFxuXG4gICAgICAgICAgZXJyLm1lc3NhZ2UgIT09ICdjYW5jZWxsZWQnICYmIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHF1ZXVlV2l0aEN1cnJlbnQgPSBxdWV1ZVdpdGhDdXJyZW50LmZpbHRlcih0YXJnZXQgPT4gdGFyZ2V0ICE9PSB1dHRlcmFuY2UpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhc3luYyBjYW5jZWwoaWQpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gcXVldWVXaXRoQ3VycmVudC5maW5kSW5kZXgodXR0ZXJhbmNlID0+IHV0dGVyYW5jZS5pZCA9PT0gaWQpO1xuXG4gICAgICAvLyBXZSB3b3VsZCBsZWF2ZSB0aGUgY2FuY2VsbGVkIHV0dGVyYW5jZSBpbiB0aGUgcXVldWUgYmVjYXVzZSB3ZSB3YW50IHRvIHJlamVjdCB0aGUgcHJvbWlzZS5cbiAgICAgIGF3YWl0IHF1ZXVlV2l0aEN1cnJlbnRbaW5kZXhdLmNhbmNlbCgpO1xuICAgIH0sXG4gICAgc2V0UG9ueWZpbGwoeyBzcGVlY2hTeW50aGVzaXMsIFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSB9KSB7XG4gICAgICBwb255ZmlsbCA9IHsgc3BlZWNoU3ludGhlc2lzLCBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UgfTtcbiAgICB9LFxuICAgIHNwZWFrKHV0dGVyYW5jZUxpa2UpIHtcbiAgICAgIC8vIGNvbnNvbGUuZGVidWcoYFFVRVVFRDogJHsgdXR0ZXJhbmNlTGlrZS50ZXh0IH1gKTtcblxuICAgICAgaWYgKFxuICAgICAgICB1dHRlcmFuY2VMaWtlLmlkXG4gICAgICAgICYmIHF1ZXVlV2l0aEN1cnJlbnQuZmluZCgoeyBpZCB9KSA9PiBpZCA9PT0gdXR0ZXJhbmNlTGlrZS5pZClcbiAgICAgICkge1xuICAgICAgICAvLyBEbyBub3QgcXVldWUgZHVwbGljYXRlZCBzcGVhayB3aXRoIHNhbWUgdW5pcXVlIElEXG4gICAgICAgIC8vIGNvbnNvbGUuZGVidWcoJ05PVCBRVUVVRUlORyBEVVBFJyk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignVXR0ZXJhbmNlIHdpdGggc2FtZSBJRCBpcyBxdWV1ZWQnKSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHV0dGVyYW5jZSA9IG5ldyBRdWV1ZWRVdHRlcmFuY2UodXR0ZXJhbmNlTGlrZSk7XG5cbiAgICAgIHF1ZXVlV2l0aEN1cnJlbnQgPSBbLi4ucXVldWVXaXRoQ3VycmVudCwgdXR0ZXJhbmNlXTtcbiAgICAgIHJ1bigpO1xuXG4gICAgICByZXR1cm4gdXR0ZXJhbmNlLnByb21pc2U7XG4gICAgfVxuICB9O1xufVxuIl19