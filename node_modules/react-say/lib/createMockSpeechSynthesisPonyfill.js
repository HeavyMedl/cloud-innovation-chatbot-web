"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jestFnWithPromises = jestFnWithPromises;
exports["default"] = createMockSpeechSynthesisPonyfill;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _createDeferred = _interopRequireDefault(require("./createDeferred"));

var _events = _interopRequireDefault(require("events"));

function jestFnWithPromises(implementation) {
  var fn = jest.fn(function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    fn.deferreds[fn.deferreds.length - 1].resolve(args);
    fn.deferreds = [].concat((0, _toConsumableArray2["default"])(fn.deferreds), [(0, _createDeferred["default"])()]);
    fn.promises = fn.deferreds.map(function (_ref) {
      var promise = _ref.promise;
      return promise;
    });
    implementation && implementation.apply(void 0, args);
  });
  var firstDeferred = (0, _createDeferred["default"])();
  fn.deferreds = [firstDeferred];
  fn.promises = [firstDeferred.promise];
  return fn;
}

function createMockSpeechSynthesisPonyfill() {
  var SpeechSynthesisUtterance =
  /*#__PURE__*/
  function () {
    function SpeechSynthesisUtterance(text) {
      (0, _classCallCheck2["default"])(this, SpeechSynthesisUtterance);
      this._events = new _events["default"]();
      this.text = text;
    }

    (0, _createClass2["default"])(SpeechSynthesisUtterance, [{
      key: "addEventListener",
      value: function addEventListener(name, handler) {
        this._events.addListener(name, handler);
      }
    }, {
      key: "dispatchEvent",
      value: function dispatchEvent(event) {
        this._events.emit(event.type, event);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(name, handler) {
        this._events.removeListener(name, handler);
      }
    }]);
    return SpeechSynthesisUtterance;
  }();

  return {
    speechSynthesis: {
      cancel: jestFnWithPromises(),
      getVoices: function getVoices() {
        return [{
          name: 'Cantonese',
          voiceURI: 'http://localhost/voice/zh-YUE'
        }];
      },
      speak: jestFnWithPromises()
    },
    SpeechSynthesisUtterance: SpeechSynthesisUtterance
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVNb2NrU3BlZWNoU3ludGhlc2lzUG9ueWZpbGwuanMiXSwibmFtZXMiOlsiamVzdEZuV2l0aFByb21pc2VzIiwiaW1wbGVtZW50YXRpb24iLCJmbiIsImplc3QiLCJhcmdzIiwiZGVmZXJyZWRzIiwibGVuZ3RoIiwicmVzb2x2ZSIsInByb21pc2VzIiwibWFwIiwicHJvbWlzZSIsImZpcnN0RGVmZXJyZWQiLCJjcmVhdGVNb2NrU3BlZWNoU3ludGhlc2lzUG9ueWZpbGwiLCJTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UiLCJ0ZXh0IiwiX2V2ZW50cyIsIkV2ZW50RW1pdHRlciIsIm5hbWUiLCJoYW5kbGVyIiwiYWRkTGlzdGVuZXIiLCJldmVudCIsImVtaXQiLCJ0eXBlIiwicmVtb3ZlTGlzdGVuZXIiLCJzcGVlY2hTeW50aGVzaXMiLCJjYW5jZWwiLCJnZXRWb2ljZXMiLCJ2b2ljZVVSSSIsInNwZWFrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRU8sU0FBU0Esa0JBQVQsQ0FBNEJDLGNBQTVCLEVBQTRDO0FBQ2pELE1BQU1DLEVBQUUsR0FBR0MsSUFBSSxDQUFDRCxFQUFMLENBQVEsWUFBYTtBQUFBLHNDQUFURSxJQUFTO0FBQVRBLE1BQUFBLElBQVM7QUFBQTs7QUFDOUJGLElBQUFBLEVBQUUsQ0FBQ0csU0FBSCxDQUFhSCxFQUFFLENBQUNHLFNBQUgsQ0FBYUMsTUFBYixHQUFzQixDQUFuQyxFQUFzQ0MsT0FBdEMsQ0FBOENILElBQTlDO0FBQ0FGLElBQUFBLEVBQUUsQ0FBQ0csU0FBSCxpREFBbUJILEVBQUUsQ0FBQ0csU0FBdEIsSUFBaUMsaUNBQWpDO0FBQ0FILElBQUFBLEVBQUUsQ0FBQ00sUUFBSCxHQUFjTixFQUFFLENBQUNHLFNBQUgsQ0FBYUksR0FBYixDQUFpQjtBQUFBLFVBQUdDLE9BQUgsUUFBR0EsT0FBSDtBQUFBLGFBQWlCQSxPQUFqQjtBQUFBLEtBQWpCLENBQWQ7QUFFQVQsSUFBQUEsY0FBYyxJQUFJQSxjQUFjLE1BQWQsU0FBa0JHLElBQWxCLENBQWxCO0FBQ0QsR0FOVSxDQUFYO0FBUUEsTUFBTU8sYUFBYSxHQUFHLGlDQUF0QjtBQUVBVCxFQUFBQSxFQUFFLENBQUNHLFNBQUgsR0FBZSxDQUFDTSxhQUFELENBQWY7QUFDQVQsRUFBQUEsRUFBRSxDQUFDTSxRQUFILEdBQWMsQ0FBQ0csYUFBYSxDQUFDRCxPQUFmLENBQWQ7QUFFQSxTQUFPUixFQUFQO0FBQ0Q7O0FBRWMsU0FBU1UsaUNBQVQsR0FBNkM7QUFBQSxNQUNwREMsd0JBRG9EO0FBQUE7QUFBQTtBQUV4RCxzQ0FBWUMsSUFBWixFQUFrQjtBQUFBO0FBQ2hCLFdBQUtDLE9BQUwsR0FBZSxJQUFJQyxrQkFBSixFQUFmO0FBRUEsV0FBS0YsSUFBTCxHQUFZQSxJQUFaO0FBQ0Q7O0FBTnVEO0FBQUE7QUFBQSx1Q0FRdkNHLElBUnVDLEVBUWpDQyxPQVJpQyxFQVF4QjtBQUM5QixhQUFLSCxPQUFMLENBQWFJLFdBQWIsQ0FBeUJGLElBQXpCLEVBQStCQyxPQUEvQjtBQUNEO0FBVnVEO0FBQUE7QUFBQSxvQ0FZMUNFLEtBWjBDLEVBWW5DO0FBQ25CLGFBQUtMLE9BQUwsQ0FBYU0sSUFBYixDQUFrQkQsS0FBSyxDQUFDRSxJQUF4QixFQUE4QkYsS0FBOUI7QUFDRDtBQWR1RDtBQUFBO0FBQUEsMENBZ0JwQ0gsSUFoQm9DLEVBZ0I5QkMsT0FoQjhCLEVBZ0JyQjtBQUNqQyxhQUFLSCxPQUFMLENBQWFRLGNBQWIsQ0FBNEJOLElBQTVCLEVBQWtDQyxPQUFsQztBQUNEO0FBbEJ1RDtBQUFBO0FBQUE7O0FBcUIxRCxTQUFPO0FBQ0xNLElBQUFBLGVBQWUsRUFBRTtBQUNmQyxNQUFBQSxNQUFNLEVBQUV6QixrQkFBa0IsRUFEWDtBQUVmMEIsTUFBQUEsU0FBUyxFQUFFO0FBQUEsZUFBTSxDQUFDO0FBQ2hCVCxVQUFBQSxJQUFJLEVBQUUsV0FEVTtBQUVoQlUsVUFBQUEsUUFBUSxFQUFFO0FBRk0sU0FBRCxDQUFOO0FBQUEsT0FGSTtBQU1mQyxNQUFBQSxLQUFLLEVBQUU1QixrQkFBa0I7QUFOVixLQURaO0FBU0xhLElBQUFBLHdCQUF3QixFQUF4QkE7QUFUSyxHQUFQO0FBV0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlRGVmZXJyZWQgZnJvbSAnLi9jcmVhdGVEZWZlcnJlZCc7XG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBqZXN0Rm5XaXRoUHJvbWlzZXMoaW1wbGVtZW50YXRpb24pIHtcbiAgY29uc3QgZm4gPSBqZXN0LmZuKCguLi5hcmdzKSA9PiB7XG4gICAgZm4uZGVmZXJyZWRzW2ZuLmRlZmVycmVkcy5sZW5ndGggLSAxXS5yZXNvbHZlKGFyZ3MpO1xuICAgIGZuLmRlZmVycmVkcyA9IFsuLi5mbi5kZWZlcnJlZHMsIGNyZWF0ZURlZmVycmVkKCldO1xuICAgIGZuLnByb21pc2VzID0gZm4uZGVmZXJyZWRzLm1hcCgoeyBwcm9taXNlIH0pID0+IHByb21pc2UpO1xuXG4gICAgaW1wbGVtZW50YXRpb24gJiYgaW1wbGVtZW50YXRpb24oLi4uYXJncyk7XG4gIH0pO1xuXG4gIGNvbnN0IGZpcnN0RGVmZXJyZWQgPSBjcmVhdGVEZWZlcnJlZCgpO1xuXG4gIGZuLmRlZmVycmVkcyA9IFtmaXJzdERlZmVycmVkXTtcbiAgZm4ucHJvbWlzZXMgPSBbZmlyc3REZWZlcnJlZC5wcm9taXNlXTtcblxuICByZXR1cm4gZm47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1vY2tTcGVlY2hTeW50aGVzaXNQb255ZmlsbCgpIHtcbiAgY2xhc3MgU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0KSB7XG4gICAgICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgfVxuXG4gICAgYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVyKSB7XG4gICAgICB0aGlzLl9ldmVudHMuYWRkTGlzdGVuZXIobmFtZSwgaGFuZGxlcik7XG4gICAgfVxuXG4gICAgZGlzcGF0Y2hFdmVudChldmVudCkge1xuICAgICAgdGhpcy5fZXZlbnRzLmVtaXQoZXZlbnQudHlwZSwgZXZlbnQpO1xuICAgIH1cblxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgaGFuZGxlcikge1xuICAgICAgdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKG5hbWUsIGhhbmRsZXIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3BlZWNoU3ludGhlc2lzOiB7XG4gICAgICBjYW5jZWw6IGplc3RGbldpdGhQcm9taXNlcygpLFxuICAgICAgZ2V0Vm9pY2VzOiAoKSA9PiBbe1xuICAgICAgICBuYW1lOiAnQ2FudG9uZXNlJyxcbiAgICAgICAgdm9pY2VVUkk6ICdodHRwOi8vbG9jYWxob3N0L3ZvaWNlL3poLVlVRSdcbiAgICAgIH1dLFxuICAgICAgc3BlYWs6IGplc3RGbldpdGhQcm9taXNlcygpXG4gICAgfSxcbiAgICBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2VcbiAgfTtcbn1cbiJdfQ==