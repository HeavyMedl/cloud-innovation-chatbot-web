"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Composer = _interopRequireDefault(require("./Composer"));

var _SayPrimitive = _interopRequireDefault(require("./SayPrimitive"));

var Say = function Say(props) {
  return _react["default"].createElement(_Composer["default"], {
    speechSynthesis: props.speechSynthesis,
    speechSynthesisUtterance: props.speechSynthesisUtterance
  }, _react["default"].createElement(_SayPrimitive["default"], {
    lang: props.lang,
    onBoundary: props.onBoundary,
    onEnd: props.onEnd,
    onError: props.onError,
    onStart: props.onStart,
    pitch: props.pitch,
    rate: props.rate,
    speak: props.speak,
    voice: props.voice,
    volume: props.volume
  }, props.children));
};

Say.defaultProps = {
  speechSynthesis: window.speechSynthesis || window.webkitSpeechSynthesis,
  speechSynthesisUtterance: window.SpeechSynthesisUtterance || window.webkitSpeechSynthesisUtterance
};
Say.propTypes = {
  lang: _propTypes["default"].string,
  onBoundary: _propTypes["default"].func,
  onEnd: _propTypes["default"].func,
  onError: _propTypes["default"].func,
  onStart: _propTypes["default"].func,
  pitch: _propTypes["default"].number,
  rate: _propTypes["default"].number,
  speechSynthesis: _propTypes["default"].any,
  speechSynthesisUtterance: _propTypes["default"].any,
  speak: _propTypes["default"].string,
  voice: _propTypes["default"].oneOfType([_propTypes["default"].any, _propTypes["default"].func]),
  volume: _propTypes["default"].number
};
var _default = Say;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TYXkuanMiXSwibmFtZXMiOlsiU2F5IiwicHJvcHMiLCJzcGVlY2hTeW50aGVzaXMiLCJzcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UiLCJsYW5nIiwib25Cb3VuZGFyeSIsIm9uRW5kIiwib25FcnJvciIsIm9uU3RhcnQiLCJwaXRjaCIsInJhdGUiLCJzcGVhayIsInZvaWNlIiwidm9sdW1lIiwiY2hpbGRyZW4iLCJkZWZhdWx0UHJvcHMiLCJ3aW5kb3ciLCJ3ZWJraXRTcGVlY2hTeW50aGVzaXMiLCJTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UiLCJ3ZWJraXRTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJmdW5jIiwibnVtYmVyIiwiYW55Iiwib25lT2ZUeXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFFQSxJQUFNQSxHQUFHLEdBQUcsU0FBTkEsR0FBTSxDQUFBQyxLQUFLO0FBQUEsU0FDZixnQ0FBQyxvQkFBRDtBQUNFLElBQUEsZUFBZSxFQUFHQSxLQUFLLENBQUNDLGVBRDFCO0FBRUUsSUFBQSx3QkFBd0IsRUFBR0QsS0FBSyxDQUFDRTtBQUZuQyxLQUlFLGdDQUFDLHdCQUFEO0FBQ0UsSUFBQSxJQUFJLEVBQUdGLEtBQUssQ0FBQ0csSUFEZjtBQUVFLElBQUEsVUFBVSxFQUFHSCxLQUFLLENBQUNJLFVBRnJCO0FBR0UsSUFBQSxLQUFLLEVBQUdKLEtBQUssQ0FBQ0ssS0FIaEI7QUFJRSxJQUFBLE9BQU8sRUFBR0wsS0FBSyxDQUFDTSxPQUpsQjtBQUtFLElBQUEsT0FBTyxFQUFHTixLQUFLLENBQUNPLE9BTGxCO0FBTUUsSUFBQSxLQUFLLEVBQUdQLEtBQUssQ0FBQ1EsS0FOaEI7QUFPRSxJQUFBLElBQUksRUFBR1IsS0FBSyxDQUFDUyxJQVBmO0FBUUUsSUFBQSxLQUFLLEVBQUdULEtBQUssQ0FBQ1UsS0FSaEI7QUFTRSxJQUFBLEtBQUssRUFBR1YsS0FBSyxDQUFDVyxLQVRoQjtBQVVFLElBQUEsTUFBTSxFQUFHWCxLQUFLLENBQUNZO0FBVmpCLEtBWUlaLEtBQUssQ0FBQ2EsUUFaVixDQUpGLENBRGU7QUFBQSxDQUFqQjs7QUFxQkFkLEdBQUcsQ0FBQ2UsWUFBSixHQUFtQjtBQUNqQmIsRUFBQUEsZUFBZSxFQUFFYyxNQUFNLENBQUNkLGVBQVAsSUFBMEJjLE1BQU0sQ0FBQ0MscUJBRGpDO0FBRWpCZCxFQUFBQSx3QkFBd0IsRUFBRWEsTUFBTSxDQUFDRSx3QkFBUCxJQUFtQ0YsTUFBTSxDQUFDRztBQUZuRCxDQUFuQjtBQUtBbkIsR0FBRyxDQUFDb0IsU0FBSixHQUFnQjtBQUNkaEIsRUFBQUEsSUFBSSxFQUFFaUIsc0JBQVVDLE1BREY7QUFFZGpCLEVBQUFBLFVBQVUsRUFBRWdCLHNCQUFVRSxJQUZSO0FBR2RqQixFQUFBQSxLQUFLLEVBQUVlLHNCQUFVRSxJQUhIO0FBSWRoQixFQUFBQSxPQUFPLEVBQUVjLHNCQUFVRSxJQUpMO0FBS2RmLEVBQUFBLE9BQU8sRUFBRWEsc0JBQVVFLElBTEw7QUFNZGQsRUFBQUEsS0FBSyxFQUFFWSxzQkFBVUcsTUFOSDtBQU9kZCxFQUFBQSxJQUFJLEVBQUVXLHNCQUFVRyxNQVBGO0FBUWR0QixFQUFBQSxlQUFlLEVBQUVtQixzQkFBVUksR0FSYjtBQVNkdEIsRUFBQUEsd0JBQXdCLEVBQUVrQixzQkFBVUksR0FUdEI7QUFVZGQsRUFBQUEsS0FBSyxFQUFFVSxzQkFBVUMsTUFWSDtBQVdkVixFQUFBQSxLQUFLLEVBQUVTLHNCQUFVSyxTQUFWLENBQW9CLENBQUNMLHNCQUFVSSxHQUFYLEVBQWdCSixzQkFBVUUsSUFBMUIsQ0FBcEIsQ0FYTztBQVlkVixFQUFBQSxNQUFNLEVBQUVRLHNCQUFVRztBQVpKLENBQWhCO2VBZWV4QixHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBDb21wb3NlciBmcm9tICcuL0NvbXBvc2VyJztcbmltcG9ydCBTYXlQcmltaXRpdmUgZnJvbSAnLi9TYXlQcmltaXRpdmUnO1xuXG5jb25zdCBTYXkgPSBwcm9wcyA9PlxuICA8Q29tcG9zZXJcbiAgICBzcGVlY2hTeW50aGVzaXM9eyBwcm9wcy5zcGVlY2hTeW50aGVzaXMgfVxuICAgIHNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZT17IHByb3BzLnNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSB9XG4gID5cbiAgICA8U2F5UHJpbWl0aXZlXG4gICAgICBsYW5nPXsgcHJvcHMubGFuZyB9XG4gICAgICBvbkJvdW5kYXJ5PXsgcHJvcHMub25Cb3VuZGFyeSB9XG4gICAgICBvbkVuZD17IHByb3BzLm9uRW5kIH1cbiAgICAgIG9uRXJyb3I9eyBwcm9wcy5vbkVycm9yIH1cbiAgICAgIG9uU3RhcnQ9eyBwcm9wcy5vblN0YXJ0IH1cbiAgICAgIHBpdGNoPXsgcHJvcHMucGl0Y2ggfVxuICAgICAgcmF0ZT17IHByb3BzLnJhdGUgfVxuICAgICAgc3BlYWs9eyBwcm9wcy5zcGVhayB9XG4gICAgICB2b2ljZT17IHByb3BzLnZvaWNlIH1cbiAgICAgIHZvbHVtZT17IHByb3BzLnZvbHVtZSB9XG4gICAgPlxuICAgICAgeyBwcm9wcy5jaGlsZHJlbiB9XG4gICAgPC9TYXlQcmltaXRpdmU+XG4gIDwvQ29tcG9zZXI+XG5cblNheS5kZWZhdWx0UHJvcHMgPSB7XG4gIHNwZWVjaFN5bnRoZXNpczogd2luZG93LnNwZWVjaFN5bnRoZXNpcyB8fCB3aW5kb3cud2Via2l0U3BlZWNoU3ludGhlc2lzLFxuICBzcGVlY2hTeW50aGVzaXNVdHRlcmFuY2U6IHdpbmRvdy5TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UgfHwgd2luZG93LndlYmtpdFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZVxufTtcblxuU2F5LnByb3BUeXBlcyA9IHtcbiAgbGFuZzogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25Cb3VuZGFyeTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRW5kOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25FcnJvcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuICBwaXRjaDogUHJvcFR5cGVzLm51bWJlcixcbiAgcmF0ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgc3BlZWNoU3ludGhlc2lzOiBQcm9wVHlwZXMuYW55LFxuICBzcGVlY2hTeW50aGVzaXNVdHRlcmFuY2U6IFByb3BUeXBlcy5hbnksXG4gIHNwZWFrOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB2b2ljZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFueSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgdm9sdW1lOiBQcm9wVHlwZXMubnVtYmVyXG59O1xuXG5leHBvcnQgZGVmYXVsdCBTYXlcbiJdfQ==