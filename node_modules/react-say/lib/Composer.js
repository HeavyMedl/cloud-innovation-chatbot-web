"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _memoizeOne = _interopRequireDefault(require("memoize-one"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Context = _interopRequireDefault(require("./Context"));

var _createContext = _interopRequireDefault(require("./createContext"));

var Composer =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(Composer, _React$Component);

  function Composer(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Composer);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Composer).call(this, props));
    _this.handleVoicesChanged = _this.handleVoicesChanged.bind((0, _assertThisInitialized2["default"])(_this));
    var voices = [];

    if (props.speechSynthesis) {
      props.speechSynthesis.addEventListener && props.speechSynthesis.addEventListener('voiceschanged', _this.handleVoicesChanged);
      voices = props.speechSynthesis.getVoices();
    }

    _this.mergeContext = (0, _memoizeOne["default"])(function (_ref, voices) {
      var cancel = _ref.cancel,
          speak = _ref.speak;
      return {
        cancel: cancel,
        speak: speak,
        voices: voices
      };
    });
    _this.state = {
      context: (0, _createContext["default"])({
        speechSynthesis: props.speechSynthesis,
        SpeechSynthesisUtterance: props.speechSynthesisUtterance
      }),
      voices: voices
    };
    return _this;
  }

  (0, _createClass2["default"])(Composer, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var props = this.props;
      var changed = ['speechSynthesis', 'speechSynthesisUtterance'].some(function (name) {
        return nextProps[name] !== props[name];
      });

      if (changed) {
        var speechSynthesis = props.speechSynthesis;
        var nextSpeechSynthesis = nextProps.speechSynthesis;
        var nextVoices = [];

        if (speechSynthesis && speechSynthesis.removeEventListener) {
          speechSynthesis.removeEventListener('voiceschanged', this.handleVoicesChanged);
        }

        this.state.context.setPonyfill({
          speechSynthesis: nextProps.speechSynthesis,
          SpeechSynthesisUtterance: nextProps.speechSynthesisUtterance
        });

        if (nextSpeechSynthesis) {
          nextSpeechSynthesis.addEventListener && nextSpeechSynthesis.addEventListener('voiceschanged', this.handleVoicesChanged);
          nextVoices = nextSpeechSynthesis.getVoices() || [];
        }

        this.setState(function () {
          return {
            voices: nextVoices
          };
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var speechSynthesis = this.props.speechSynthesis;
      speechSynthesis && speechSynthesis.removeEventListener && speechSynthesis.removeEventListener('voiceschanged', this.handleVoicesChanged);
    }
  }, {
    key: "handleVoicesChanged",
    value: function handleVoicesChanged(_ref2) {
      var target = _ref2.target;
      this.setState(function () {
        return {
          voices: target.getVoices()
        };
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var props = this.props,
          state = this.state;
      var children = props.children;
      return _react["default"].createElement(_Context["default"].Consumer, null, function (context) {
        return context ? typeof children === 'function' ? children(context) : children : _react["default"].createElement(_Context["default"].Provider, {
          value: _this2.mergeContext(state.context, state.voices)
        }, typeof children === 'function' ? _react["default"].createElement(_Context["default"].Consumer, null, function (context) {
          return children(context);
        }) : children);
      });
    }
  }]);
  return Composer;
}(_react["default"].Component);

exports["default"] = Composer;
Composer.defaultProps = {
  speechSynthesis: window.speechSynthesis || window.webkitSpeechSynthesis,
  speechSynthesisUtterance: window.SpeechSynthesisUtterance || window.webkitSpeechSynthesisUtterance
};
Composer.propTypes = {
  speechSynthesis: _propTypes["default"].any,
  speechSynthesisUtterance: _propTypes["default"].any
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,