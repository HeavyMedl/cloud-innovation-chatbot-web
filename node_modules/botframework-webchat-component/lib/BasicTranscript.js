"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactSay = require("react-say");

var _glamor = require("glamor");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _reactScrollToBottom = require("react-scroll-to-bottom");

var _connectToWebChat = _interopRequireDefault(require("./connectToWebChat"));

var _ScrollToEndButton = _interopRequireDefault(require("./Activity/ScrollToEndButton"));

var _Speak = _interopRequireDefault(require("./Activity/Speak"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ROOT_CSS = (0, _glamor.css)({
  overflow: 'hidden',
  position: 'relative'
});
var PANEL_CSS = (0, _glamor.css)({
  display: 'flex',
  flexDirection: 'column',
  WebkitOverflowScrolling: 'touch'
});
var FILLER_CSS = (0, _glamor.css)({
  flex: 1
});
var LIST_CSS = (0, _glamor.css)({
  listStyleType: 'none',
  '& > li.hide-timestamp .transcript-timestamp': {
    display: 'none'
  }
});

function sameTimestampGroup(activityX, activityY, groupTimestamp) {
  if (groupTimestamp === false) {
    return true;
  } else if (activityX && activityY) {
    groupTimestamp = typeof groupTimestamp === 'number' ? groupTimestamp : 5 * 60 * 1000;

    if (activityX.from.role === activityY.from.role) {
      var timeX = new Date(activityX.timestamp).getTime();
      var timeY = new Date(activityY.timestamp).getTime();
      return Math.abs(timeX - timeY) <= groupTimestamp;
    }
  }

  return false;
}

var BasicTranscript = function BasicTranscript(_ref) {
  var activityRenderer = _ref.activityRenderer,
      activities = _ref.activities,
      attachmentRenderer = _ref.attachmentRenderer,
      className = _ref.className,
      groupTimestamp = _ref.groupTimestamp,
      styleSet = _ref.styleSet,
      webSpeechPonyfill = _ref.webSpeechPonyfill;

  var _ref2 = webSpeechPonyfill || {},
      speechSynthesis = _ref2.speechSynthesis,
      SpeechSynthesisUtterance = _ref2.SpeechSynthesisUtterance; // We use 2-pass approach for rendering activities, for show/hide timestamp grouping.
  // Until the activity pass thru middleware, we never know if it is going to show up.
  // After we know which activities will show up, we can compute which activity will show timestamps.
  // If the activity does not render, it will not be spoken if text-to-speech is enabled.


  var activityElements = activities.reduce(function (activityElements, activity) {
    var element = activityRenderer({
      activity: activity,
      timestampClassName: 'transcript-timestamp'
    })(function (_ref3) {
      var attachment = _ref3.attachment;
      return attachmentRenderer({
        activity: activity,
        attachment: attachment
      });
    });
    element && activityElements.push({
      activity: activity,
      element: element
    });
    return activityElements;
  }, []);
  return _react.default.createElement("div", {
    className: (0, _classnames.default)(ROOT_CSS + '', (className || '') + ''),
    role: "log"
  }, _react.default.createElement(_reactScrollToBottom.Panel, {
    className: PANEL_CSS + ''
  }, _react.default.createElement("div", {
    className: FILLER_CSS
  }), _react.default.createElement(_reactSay.Composer, {
    speechSynthesis: speechSynthesis,
    speechSynthesisUtterance: SpeechSynthesisUtterance
  }, _react.default.createElement("ul", {
    "aria-live": "polite",
    className: (0, _classnames.default)(LIST_CSS + '', styleSet.activities + ''),
    role: "list"
  }, activityElements.map(function (_ref4, index) {
    var activity = _ref4.activity,
        element = _ref4.element;
    return _react.default.createElement("li", {
      className: (0, _classnames.default)(styleSet.activity + '', {
        // Hide timestamp if same timestamp group with the next activity
        'hide-timestamp': sameTimestampGroup(activity, (activityElements[index + 1] || {}).activity, groupTimestamp)
      }),
      key: activity.channelData && activity.channelData.clientActivityID || activity.id || index,
      role: "listitem"
    }, element, // TODO: [P2] We should use core/definitions/speakingActivity for this predicate instead
    activity.channelData && activity.channelData.speak && _react.default.createElement(_Speak.default, {
      activity: activity
    }));
  })))), _react.default.createElement(_ScrollToEndButton.default, null));
};

var _default = (0, _connectToWebChat.default)(function (_ref5) {
  var activities = _ref5.activities,
      activityRenderer = _ref5.activityRenderer,
      attachmentRenderer = _ref5.attachmentRenderer,
      groupTimestamp = _ref5.groupTimestamp,
      styleSet = _ref5.styleSet,
      webSpeechPonyfill = _ref5.webSpeechPonyfill;
  return {
    activities: activities,
    activityRenderer: activityRenderer,
    attachmentRenderer: attachmentRenderer,
    groupTimestamp: groupTimestamp,
    styleSet: styleSet,
    webSpeechPonyfill: webSpeechPonyfill
  };
})(BasicTranscript);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,