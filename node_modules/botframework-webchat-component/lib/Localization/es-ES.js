"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function xMinutesAgo(date) {
  var now = Date.now();
  var deltaInMs = now - new Date(date).getTime();
  var deltaInMinutes = Math.floor(deltaInMs / 60000);
  var deltaInHours = Math.floor(deltaInMs / 3600000);

  if (deltaInMinutes < 1) {
    return 'Ahora';
  } else if (deltaInMinutes === 1) {
    return 'Hace un minuto';
  } else if (deltaInHours < 1) {
    return "Hace ".concat(deltaInMinutes, " minutos");
  } else if (deltaInHours === 1) {
    return "Hace una hora";
  } else if (deltaInHours < 5) {
    return "Hace ".concat(deltaInHours, " horas");
  } else if (deltaInHours <= 24) {
    return "Hoy";
  } else if (deltaInHours <= 48) {
    return "Ayer";
  } else {
    return new Intl.DateTimeFormat('es-ES').format(date);
  }
}

var _default = {
  FAILED_CONNECTION_NOTIFICATION: 'Imposible conectar.',
  // Do not localize {Retry}; it is a placeholder for "Retry". English translation should be, "Send failed. Retry."
  SEND_FAILED_KEY: 'No enviado. {Retry}.',
  SLOW_CONNECTION_NOTIFICATION: 'Está tardando mucho en conectar.',
  'X minutes ago': xMinutesAgo,
  'Chat': 'Chat',
  'Microphone off': 'Apagar micrófono',
  'Microphone on': 'Encender micrófono',
  'Download file': 'Descargar archivo',
  'New messages': 'Nuevos mensajes',
  'Listening…': 'Escuchando…',
  'retry': 'reintentar',
  'Retry': 'Reintentar',
  // Please alter this value if 'Retry' at the beginning of a sentence is written differently than at the end of a sentence.
  'Send': 'Enviar',
  'Sending': 'Enviando',
  'Speak': 'Hablar',
  'Starting…': 'Comenzando',
  'Tax': 'Impuestos',
  'Total': 'Total',
  'Type your message': 'Escribe tu mensaje...',
  'Upload file': 'Subir archivo',
  'VAT': 'IVA'
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2NhbGl6YXRpb24vZXMtRVMuanMiXSwibmFtZXMiOlsieE1pbnV0ZXNBZ28iLCJkYXRlIiwibm93IiwiRGF0ZSIsImRlbHRhSW5NcyIsImdldFRpbWUiLCJkZWx0YUluTWludXRlcyIsIk1hdGgiLCJmbG9vciIsImRlbHRhSW5Ib3VycyIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsImZvcm1hdCIsIkZBSUxFRF9DT05ORUNUSU9OX05PVElGSUNBVElPTiIsIlNFTkRfRkFJTEVEX0tFWSIsIlNMT1dfQ09OTkVDVElPTl9OT1RJRklDQVRJT04iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxTQUFTQSxXQUFULENBQXFCQyxJQUFyQixFQUEyQjtBQUN6QixNQUFNQyxHQUFHLEdBQUdDLElBQUksQ0FBQ0QsR0FBTCxFQUFaO0FBQ0EsTUFBTUUsU0FBUyxHQUFHRixHQUFHLEdBQUcsSUFBSUMsSUFBSixDQUFTRixJQUFULEVBQWVJLE9BQWYsRUFBeEI7QUFDQSxNQUFNQyxjQUFjLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSixTQUFTLEdBQUcsS0FBdkIsQ0FBdkI7QUFDQSxNQUFNSyxZQUFZLEdBQUdGLElBQUksQ0FBQ0MsS0FBTCxDQUFXSixTQUFTLEdBQUcsT0FBdkIsQ0FBckI7O0FBRUEsTUFBSUUsY0FBYyxHQUFHLENBQXJCLEVBQXdCO0FBQ3RCLFdBQU8sT0FBUDtBQUNELEdBRkQsTUFFTyxJQUFJQSxjQUFjLEtBQUssQ0FBdkIsRUFBMEI7QUFDL0IsV0FBTyxnQkFBUDtBQUNELEdBRk0sTUFFQSxJQUFJRyxZQUFZLEdBQUcsQ0FBbkIsRUFBc0I7QUFDM0IsMEJBQWVILGNBQWY7QUFDRCxHQUZNLE1BRUEsSUFBSUcsWUFBWSxLQUFLLENBQXJCLEVBQXdCO0FBQzdCO0FBQ0QsR0FGTSxNQUVBLElBQUlBLFlBQVksR0FBRyxDQUFuQixFQUFzQjtBQUMzQiwwQkFBZUEsWUFBZjtBQUNELEdBRk0sTUFFQSxJQUFJQSxZQUFZLElBQUksRUFBcEIsRUFBd0I7QUFDN0I7QUFDRCxHQUZNLE1BRUEsSUFBSUEsWUFBWSxJQUFJLEVBQXBCLEVBQXdCO0FBQzdCO0FBQ0QsR0FGTSxNQUVBO0FBQ0wsV0FBTyxJQUFJQyxJQUFJLENBQUNDLGNBQVQsQ0FBd0IsT0FBeEIsRUFBaUNDLE1BQWpDLENBQXdDWCxJQUF4QyxDQUFQO0FBQ0Q7QUFDRjs7ZUFFYztBQUNiWSxFQUFBQSw4QkFBOEIsRUFBRSxxQkFEbkI7QUFFYjtBQUNBQyxFQUFBQSxlQUFlLEVBQUUsc0JBSEo7QUFJYkMsRUFBQUEsNEJBQTRCLEVBQUUsa0NBSmpCO0FBS2IsbUJBQWlCZixXQUxKO0FBTWIsVUFBUSxNQU5LO0FBT2Isb0JBQWtCLGtCQVBMO0FBUWIsbUJBQWlCLG9CQVJKO0FBU2IsbUJBQWlCLG1CQVRKO0FBVWIsa0JBQWdCLGlCQVZIO0FBV2IsZ0JBQWMsYUFYRDtBQVliLFdBQVMsWUFaSTtBQWFiLFdBQVMsWUFiSTtBQWFVO0FBQ3ZCLFVBQVEsUUFkSztBQWViLGFBQVcsVUFmRTtBQWdCYixXQUFTLFFBaEJJO0FBaUJiLGVBQWEsWUFqQkE7QUFrQmIsU0FBTyxXQWxCTTtBQW1CYixXQUFTLE9BbkJJO0FBb0JiLHVCQUFxQix1QkFwQlI7QUFxQmIsaUJBQWUsZUFyQkY7QUFzQmIsU0FBTztBQXRCTSxDIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24geE1pbnV0ZXNBZ28oZGF0ZSkge1xuICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICBjb25zdCBkZWx0YUluTXMgPSBub3cgLSBuZXcgRGF0ZShkYXRlKS5nZXRUaW1lKCk7XG4gIGNvbnN0IGRlbHRhSW5NaW51dGVzID0gTWF0aC5mbG9vcihkZWx0YUluTXMgLyA2MDAwMCk7XG4gIGNvbnN0IGRlbHRhSW5Ib3VycyA9IE1hdGguZmxvb3IoZGVsdGFJbk1zIC8gMzYwMDAwMCk7XG5cbiAgaWYgKGRlbHRhSW5NaW51dGVzIDwgMSkge1xuICAgIHJldHVybiAnQWhvcmEnO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5NaW51dGVzID09PSAxKSB7XG4gICAgcmV0dXJuICdIYWNlIHVuIG1pbnV0byc7XG4gIH0gZWxzZSBpZiAoZGVsdGFJbkhvdXJzIDwgMSkge1xuICAgIHJldHVybiBgSGFjZSAke2RlbHRhSW5NaW51dGVzfSBtaW51dG9zYDtcbiAgfSBlbHNlIGlmIChkZWx0YUluSG91cnMgPT09IDEpIHtcbiAgICByZXR1cm4gYEhhY2UgdW5hIGhvcmFgO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA8IDUpIHtcbiAgICByZXR1cm4gYEhhY2UgJHtkZWx0YUluSG91cnN9IGhvcmFzYDtcbiAgfSBlbHNlIGlmIChkZWx0YUluSG91cnMgPD0gMjQpIHtcbiAgICByZXR1cm4gYEhveWA7XG4gIH0gZWxzZSBpZiAoZGVsdGFJbkhvdXJzIDw9IDQ4KSB7XG4gICAgcmV0dXJuIGBBeWVyYDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoJ2VzLUVTJykuZm9ybWF0KGRhdGUpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgRkFJTEVEX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OOiAnSW1wb3NpYmxlIGNvbmVjdGFyLicsXG4gIC8vIERvIG5vdCBsb2NhbGl6ZSB7UmV0cnl9OyBpdCBpcyBhIHBsYWNlaG9sZGVyIGZvciBcIlJldHJ5XCIuIEVuZ2xpc2ggdHJhbnNsYXRpb24gc2hvdWxkIGJlLCBcIlNlbmQgZmFpbGVkLiBSZXRyeS5cIlxuICBTRU5EX0ZBSUxFRF9LRVk6ICdObyBlbnZpYWRvLiB7UmV0cnl9LicsXG4gIFNMT1dfQ09OTkVDVElPTl9OT1RJRklDQVRJT046ICdFc3TDoSB0YXJkYW5kbyBtdWNobyBlbiBjb25lY3Rhci4nLFxuICAnWCBtaW51dGVzIGFnbyc6IHhNaW51dGVzQWdvLFxuICAnQ2hhdCc6ICdDaGF0JyxcbiAgJ01pY3JvcGhvbmUgb2ZmJzogJ0FwYWdhciBtaWNyw7Nmb25vJyxcbiAgJ01pY3JvcGhvbmUgb24nOiAnRW5jZW5kZXIgbWljcsOzZm9ubycsXG4gICdEb3dubG9hZCBmaWxlJzogJ0Rlc2NhcmdhciBhcmNoaXZvJyxcbiAgJ05ldyBtZXNzYWdlcyc6ICdOdWV2b3MgbWVuc2FqZXMnLFxuICAnTGlzdGVuaW5n4oCmJzogJ0VzY3VjaGFuZG/igKYnLFxuICAncmV0cnknOiAncmVpbnRlbnRhcicsXG4gICdSZXRyeSc6ICdSZWludGVudGFyJywgLy8gUGxlYXNlIGFsdGVyIHRoaXMgdmFsdWUgaWYgJ1JldHJ5JyBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgc2VudGVuY2UgaXMgd3JpdHRlbiBkaWZmZXJlbnRseSB0aGFuIGF0IHRoZSBlbmQgb2YgYSBzZW50ZW5jZS5cbiAgJ1NlbmQnOiAnRW52aWFyJyxcbiAgJ1NlbmRpbmcnOiAnRW52aWFuZG8nLFxuICAnU3BlYWsnOiAnSGFibGFyJyxcbiAgJ1N0YXJ0aW5n4oCmJzogJ0NvbWVuemFuZG8nLFxuICAnVGF4JzogJ0ltcHVlc3RvcycsXG4gICdUb3RhbCc6ICdUb3RhbCcsXG4gICdUeXBlIHlvdXIgbWVzc2FnZSc6ICdFc2NyaWJlIHR1IG1lbnNhamUuLi4nLFxuICAnVXBsb2FkIGZpbGUnOiAnU3ViaXIgYXJjaGl2bycsXG4gICdWQVQnOiAnSVZBJ1xufVxuIl19