"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function botSaidSomething(avatarInitials, text, timestamp) {
  return "Bot ".concat(avatarInitials, " said, ").concat(text, ", ").concat(xMinutesAgo(timestamp));
}

function userSaidSomething(avatarInitials, text, timestamp) {
  return "User ".concat(avatarInitials, " said, ").concat(text, ", ").concat(xMinutesAgo(timestamp));
}

function xMinutesAgo(dateStr) {
  var date = new Date(dateStr);
  var dateTime = date.getTime();

  if (isNaN(dateTime)) {
    return dateStr;
  }

  var now = Date.now();
  var deltaInMs = now - dateTime;
  var deltaInMinutes = Math.floor(deltaInMs / 60000);
  var deltaInHours = Math.floor(deltaInMs / 3600000);

  if (deltaInMinutes < 1) {
    return 'Just now';
  } else if (deltaInMinutes === 1) {
    return 'A minute ago';
  } else if (deltaInHours < 1) {
    return "".concat(deltaInMinutes, " minutes ago");
  } else if (deltaInHours === 1) {
    return "An hour ago";
  } else if (deltaInHours < 5) {
    return "".concat(deltaInHours, " hours ago");
  } else if (deltaInHours <= 24) {
    return "Today";
  } else if (deltaInHours <= 48) {
    return "Yesterday";
  } else if (window.Intl) {
    return new Intl.DateTimeFormat('en-US').format(date);
  } else {
    return date.toLocaleString('en-US', {
      day: '2-digit',
      hour: '2-digit',
      hour12: false,
      minute: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  }
}

var _default = {
  FAILED_CONNECTION_NOTIFICATION: 'Unable to connect.',
  INITIAL_CONNECTION_NOTIFICATION: 'Connecting…',
  INTERRUPTED_CONNECTION_NOTIFICATION: 'Network interruption occurred. Reconnecting…',
  // Do not localize {Retry}; it is a placeholder for "Retry". English translation should be, "Send failed. Retry."
  RENDER_ERROR_NOTIFICATION: 'Render error. Please check the console or contact the bot developer.',
  SEND_FAILED_KEY: 'Send failed. {Retry}.',
  SLOW_CONNECTION_NOTIFICATION: 'Taking longer than usual to connect.',
  'Bot said something': botSaidSomething,
  'User said something': userSaidSomething,
  'X minutes ago': xMinutesAgo,
  // '[File of type '%1']': '[File of type '%1']",
  // '[Unknown Card '%1']': '[Unknown Card '%1']',
  'Adaptive Card parse error': 'Adaptive Card parse error',
  'Adaptive Card render error': 'Adaptive Card render error',
  'Chat': 'Chat',
  'Download file': 'Download file',
  'Microphone off': 'Microphone off',
  'Microphone on': 'Microphone on',
  'Left': 'Left',
  'Listening…': 'Listening…',
  'New messages': 'New messages',
  'Right': 'Right',
  'retry': 'retry',
  'Retry': 'Retry',
  'Send': 'Send',
  'Sending': 'Sending',
  'Speak': 'Speak',
  'Starting…': 'Starting…',
  'Tax': 'Tax',
  'Total': 'Total',
  'Type your message': 'Type your message',
  'Upload file': 'Upload file',
  'VAT': 'VAT'
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2NhbGl6YXRpb24vZW4tVVMuanMiXSwibmFtZXMiOlsiYm90U2FpZFNvbWV0aGluZyIsImF2YXRhckluaXRpYWxzIiwidGV4dCIsInRpbWVzdGFtcCIsInhNaW51dGVzQWdvIiwidXNlclNhaWRTb21ldGhpbmciLCJkYXRlU3RyIiwiZGF0ZSIsIkRhdGUiLCJkYXRlVGltZSIsImdldFRpbWUiLCJpc05hTiIsIm5vdyIsImRlbHRhSW5NcyIsImRlbHRhSW5NaW51dGVzIiwiTWF0aCIsImZsb29yIiwiZGVsdGFJbkhvdXJzIiwid2luZG93IiwiSW50bCIsIkRhdGVUaW1lRm9ybWF0IiwiZm9ybWF0IiwidG9Mb2NhbGVTdHJpbmciLCJkYXkiLCJob3VyIiwiaG91cjEyIiwibWludXRlIiwibW9udGgiLCJ5ZWFyIiwiRkFJTEVEX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OIiwiSU5JVElBTF9DT05ORUNUSU9OX05PVElGSUNBVElPTiIsIklOVEVSUlVQVEVEX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OIiwiUkVOREVSX0VSUk9SX05PVElGSUNBVElPTiIsIlNFTkRfRkFJTEVEX0tFWSIsIlNMT1dfQ09OTkVDVElPTl9OT1RJRklDQVRJT04iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxTQUFTQSxnQkFBVCxDQUEwQkMsY0FBMUIsRUFBMENDLElBQTFDLEVBQWdEQyxTQUFoRCxFQUEyRDtBQUN6RCx1QkFBZUYsY0FBZixvQkFBeUNDLElBQXpDLGVBQW9ERSxXQUFXLENBQUNELFNBQUQsQ0FBL0Q7QUFDRDs7QUFFRCxTQUFTRSxpQkFBVCxDQUEyQkosY0FBM0IsRUFBMkNDLElBQTNDLEVBQWlEQyxTQUFqRCxFQUE0RDtBQUMxRCx3QkFBZ0JGLGNBQWhCLG9CQUEwQ0MsSUFBMUMsZUFBcURFLFdBQVcsQ0FBQ0QsU0FBRCxDQUFoRTtBQUNEOztBQUVELFNBQVNDLFdBQVQsQ0FBcUJFLE9BQXJCLEVBQThCO0FBQzVCLE1BQU1DLElBQUksR0FBRyxJ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dGltZXN0YW1wKSB7XG4gIHJldHVybiBgQm90ICR7IGF2YXRhckluaXRpYWxzIH0gc2FpZCwgJHsgdGV4dCB9LCAkeyB4TWludXRlc0Fnbyh0aW1lc3RhbXApIH1gO1xufVxuXG5mdW5jdGlvbiB1c2VyU2FpZFNvbWV0aGluZyhhdmF0YXJJbml0aWFscywgdGV4dCwgdGltZXN0YW1wKSB7XG4gIHJldHVybiBgVXNlciAkeyBhdmF0YXJJbml0aWFscyB9IHNhaWQsICR7IHRleHQgfSwgJHsgeE1pbnV0ZXNBZ28odGltZXN0YW1wKSB9YDtcbn1cblxuZnVuY3Rpb24geE1pbnV0ZXNBZ28oZGF0ZVN0cikge1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUoZGF0ZVN0cik7XG4gIGNvbnN0IGRhdGVUaW1lID0gZGF0ZS5nZXRUaW1lKCk7XG5cbiAgaWYgKGlzTmFOKGRhdGVUaW1lKSkge1xuICAgIHJldHVybiBkYXRlU3RyO1xuICB9XG5cbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgY29uc3QgZGVsdGFJbk1zID0gbm93IC0gZGF0ZVRpbWU7XG4gIGNvbnN0IGRlbHRhSW5NaW51dGVzID0gTWF0aC5mbG9vcihkZWx0YUluTXMgLyA2MDAwMCk7XG4gIGNvbnN0IGRlbHRhSW5Ib3VycyA9IE1hdGguZmxvb3IoZGVsdGFJbk1zIC8gMzYwMDAwMCk7XG5cbiAgaWYgKGRlbHRhSW5NaW51dGVzIDwgMSkge1xuICAgIHJldHVybiAnSnVzdCBub3cnO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5NaW51dGVzID09PSAxKSB7XG4gICAgcmV0dXJuICdBIG1pbnV0ZSBhZ28nO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA8IDEpIHtcbiAgICByZXR1cm4gYCR7IGRlbHRhSW5NaW51dGVzIH0gbWludXRlcyBhZ29gO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA9PT0gMSkge1xuICAgIHJldHVybiBgQW4gaG91ciBhZ29gO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA8IDUpIHtcbiAgICByZXR1cm4gYCR7IGRlbHRhSW5Ib3VycyB9IGhvdXJzIGFnb2A7XG4gIH0gZWxzZSBpZiAoZGVsdGFJbkhvdXJzIDw9IDI0KSB7XG4gICAgcmV0dXJuIGBUb2RheWA7XG4gIH0gZWxzZSBpZiAoZGVsdGFJbkhvdXJzIDw9IDQ4KSB7XG4gICAgcmV0dXJuIGBZZXN0ZXJkYXlgO1xuICB9IGVsc2UgaWYgKHdpbmRvdy5JbnRsKSB7XG4gICAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCdlbi1VUycpLmZvcm1hdChkYXRlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZGF0ZS50b0xvY2FsZVN0cmluZygnZW4tVVMnLCB7XG4gICAgICBkYXk6ICcyLWRpZ2l0JyxcbiAgICAgIGhvdXI6ICcyLWRpZ2l0JyxcbiAgICAgIGhvdXIxMjogZmFsc2UsXG4gICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgIG1vbnRoOiAnMi1kaWdpdCcsXG4gICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBGQUlMRURfQ09OTkVDVElPTl9OT1RJRklDQVRJT046ICdVbmFibGUgdG8gY29ubmVjdC4nLFxuICBJTklUSUFMX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OOiAnQ29ubmVjdGluZ+KApicsXG4gIElOVEVSUlVQVEVEX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OOiAnTmV0d29yayBpbnRlcnJ1cHRpb24gb2NjdXJyZWQuIFJlY29ubmVjdGluZ+KApicsXG4gIC8vIERvIG5vdCBsb2NhbGl6ZSB7UmV0cnl9OyBpdCBpcyBhIHBsYWNlaG9sZGVyIGZvciBcIlJldHJ5XCIuIEVuZ2xpc2ggdHJhbnNsYXRpb24gc2hvdWxkIGJlLCBcIlNlbmQgZmFpbGVkLiBSZXRyeS5cIlxuICBSRU5ERVJfRVJST1JfTk9USUZJQ0FUSU9OOiAnUmVuZGVyIGVycm9yLiBQbGVhc2UgY2hlY2sgdGhlIGNvbnNvbGUgb3IgY29udGFjdCB0aGUgYm90IGRldmVsb3Blci4nLFxuICBTRU5EX0ZBSUxFRF9LRVk6ICdTZW5kIGZhaWxlZC4ge1JldHJ5fS4nLFxuICBTTE9XX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OOiAnVGFraW5nIGxvbmdlciB0aGFuIHVzdWFsIHRvIGNvbm5lY3QuJyxcbiAgJ0JvdCBzYWlkIHNvbWV0aGluZyc6IGJvdFNhaWRTb21ldGhpbmcsXG4gICdVc2VyIHNhaWQgc29tZXRoaW5nJzogdXNlclNhaWRTb21ldGhpbmcsXG4gICdYIG1pbnV0ZXMgYWdvJzogeE1pbnV0ZXNBZ28sXG4gIC8vICdbRmlsZSBvZiB0eXBlICclMSddJzogJ1tGaWxlIG9mIHR5cGUgJyUxJ11cIixcbiAgLy8gJ1tVbmtub3duIENhcmQgJyUxJ10nOiAnW1Vua25vd24gQ2FyZCAnJTEnXScsXG4gICdBZGFwdGl2ZSBDYXJkIHBhcnNlIGVycm9yJyA6ICdBZGFwdGl2ZSBDYXJkIHBhcnNlIGVycm9yJyxcbiAgJ0FkYXB0aXZlIENhcmQgcmVuZGVyIGVycm9yJzogJ0FkYXB0aXZlIENhcmQgcmVuZGVyIGVycm9yJyxcbiAgJ0NoYXQnOiAnQ2hhdCcsXG4gICdEb3dubG9hZCBmaWxlJzogJ0Rvd25sb2FkIGZpbGUnLFxuICAnTWljcm9waG9uZSBvZmYnOiAnTWljcm9waG9uZSBvZmYnLFxuICAnTWljcm9waG9uZSBvbic6ICdNaWNyb3Bob25lIG9uJyxcbiAgJ0xlZnQnOiAnTGVmdCcsXG4gICdMaXN0ZW5pbmfigKYnOiAnTGlzdGVuaW5n4oCmJyxcbiAgJ05ldyBtZXNzYWdlcyc6ICdOZXcgbWVzc2FnZXMnLFxuICAnUmlnaHQnOiAnUmlnaHQnLFxuICAncmV0cnknOiAncmV0cnknLFxuICAnUmV0cnknOiAnUmV0cnknLFxuICAnU2VuZCc6ICdTZW5kJyxcbiAgJ1NlbmRpbmcnOiAnU2VuZGluZycsXG4gICdTcGVhayc6ICdTcGVhaycsXG4gICdTdGFydGluZ+KApic6ICdTdGFydGluZ+KApicsXG4gICdUYXgnOiAnVGF4JyxcbiAgJ1RvdGFsJzogJ1RvdGFsJyxcbiAgJ1R5cGUgeW91ciBtZXNzYWdlJzogJ1R5cGUgeW91ciBtZXNzYWdlJyxcbiAgJ1VwbG9hZCBmaWxlJzogJ1VwbG9hZCBmaWxlJyxcbiAgJ1ZBVCc6ICdWQVQnXG59XG4iXX0=