"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function xMinutesAgo(dateStr) {
  var date = new Date(dateStr);
  var dateTime = date.getTime();

  if (isNaN(dateTime)) {
    return dateStr;
  }

  var now = Date.now();
  var deltaInMs = now - dateTime;
  var deltaInMinutes = Math.floor(deltaInMs / 60000);
  var deltaInHours = Math.floor(deltaInMs / 3600000);

  if (deltaInMinutes < 1) {
    return "jetzt";
  } else if (deltaInMinutes === 1) {
    return 'Vor einer Minute';
  } else if (deltaInHours < 1) {
    return "Vor ".concat(deltaInMinutes, " Minuten");
  } else if (deltaInHours === 1) {
    return "Vor eine Stunde";
  } else if (deltaInHours < 5) {
    return "Vor ".concat(deltaInHours, " Stunden");
  } else if (deltaInHours <= 24) {
    return "heute";
  } else if (deltaInHours <= 48) {
    return "gestern";
  } else if (window.Intl) {
    return new Intl.DateTimeFormat('de-DE').format(date);
  } else {
    return date.toLocaleString('de-DE', {
      day: '2-digit',
      hour: '2-digit',
      hour12: false,
      minute: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  }
}

var _default = {
  FAILED_CONNECTION_NOTIFICATION: 'Keine Verbindung',
  // Do not localize {Retry}; it is a placeholder for "Retry". English translation should be, "Send failed. Retry."
  SEND_FAILED_KEY: 'konnte nicht senden, {Retry}.',
  SLOW_CONNECTION_NOTIFICATION: 'Eingeschränkte Konnektivität',
  'Chat': 'Chat',
  'Download file': 'Datei herunterladen',
  'Microphone off': 'Mikrofon aus',
  'Microphone on': 'Mikrofon aus',
  'Left': 'Links',
  'Listening…': 'hört zu…',
  'New messages': 'Neue Nachrichten',
  'retry': 'wiederholen',
  'Right': 'Rechts',
  'Retry': 'Wiederholen',
  // Please alter this value if 'Retry' at the beginning of a sentence is written differently than at the end of a sentence.
  'Send': 'Senden',
  'Sending': 'sendet…',
  'Speak': 'Sprechen',
  'Starting…': 'Startet…',
  'Tax': 'Steuer',
  'Total': 'Total',
  'Type your message': 'Verfasse eine Nachricht',
  'Upload file': 'Datei hochladen',
  'VAT': 'MwSt',
  'X minutes ago': xMinutesAgo
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2NhbGl6YXRpb24vZGUtREUuanMiXSwibmFtZXMiOlsieE1pbnV0ZXNBZ28iLCJkYXRlU3RyIiwiZGF0ZSIsIkRhdGUiLCJkYXRlVGltZSIsImdldFRpbWUiLCJpc05hTiIsIm5vdyIsImRlbHRhSW5NcyIsImRlbHRhSW5NaW51dGVzIiwiTWF0aCIsImZsb29yIiwiZGVsdGFJbkhvdXJzIiwid2luZG93IiwiSW50bCIsIkRhdGVUaW1lRm9ybWF0IiwiZm9ybWF0IiwidG9Mb2NhbGVTdHJpbmciLCJkYXkiLCJob3VyIiwiaG91cjEyIiwibWludXRlIiwibW9udGgiLCJ5ZWFyIiwiRkFJTEVEX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OIiwiU0VORF9GQUlMRURfS0VZIiwiU0xPV19DT05ORUNUSU9OX05PVElGSUNBVElPTiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLFNBQVNBLFdBQVQsQ0FBcUJDLE9BQXJCLEVBQThCO0FBQzVCLE1BQU1DLElBQUksR0FBRyxJQUFJQyxJQUFKLENBQVNGLE9BQVQsQ0FBYjtBQUNBLE1BQU1HLFFBQVEsR0FBR0YsSUFBSSxDQUFDRyxPQUFMLEVBQWpCOztBQUVBLE1BQUlDLEtBQUssQ0FBQ0YsUUFBRCxDQUFULEVBQXFCO0FBQ25CLFdBQU9ILE9BQVA7QUFDRDs7QUFFRCxNQUFNTSxHQUFHLEdBQUdKLElBQUksQ0FBQ0ksR0FBTCxFQUFaO0FBQ0EsTUFBTUMsU0FBUyxHQUFHRCxHQUFHLEdBQUdILFFBQXhCO0FBQ0EsTUFBTUssY0FBYyxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0gsU0FBUyxHQUFHLEtBQXZCLENBQXZCO0FBQ0EsTUFBTUksWUFBWSxHQUFHRixJQUFJLENBQUNDLEtBQUwsQ0FBV0gsU0FBUyxHQUFHLE9BQXZCLENBQXJCOztBQUVBLE1BQUlDLGNBQWMsR0FBRyxDQUFyQixFQUF3QjtBQUN0QixXQUFPLE9BQVA7QUFDRCxHQUZELE1BRU8sSUFBSUEsY0FBYyxLQUFLLENBQXZCLEVBQTBCO0FBQy9CLFdBQU8sa0JBQVA7QUFDRCxHQUZNLE1BRUEsSUFBSUcsWUFBWSxHQUFHLENBQW5CLEVBQXNCO0FBQzNCLHlCQUFlSCxjQUFmO0FBQ0QsR0FGTSxNQUVBLElBQUlHLFlBQVksS0FBSyxDQUFyQixFQUF3QjtBQUM3QjtBQUNELEdBRk0sTUFFQSxJQUFJQSxZQUFZLEdBQUcsQ0FBbkIsRUFBc0I7QUFDM0IseUJBQWVBLFlBQWY7QUFDRCxHQUZNLE1BRUEsSUFBSUEsWUFBWSxJQUFJLEVBQXBCLEVBQXdCO0FBQzdCO0FBQ0QsR0FGTSxNQUVBLElBQUlBLFlBQVksSUFBSSxFQUFwQixFQUF3QjtBQUM3QjtBQUNELEdBRk0sTUFFQSxJQUFJQyxNQUFNLENBQUNDLElBQVgsRUFBaUI7QUFDdEIsV0FBTyxJQUFJQSxJQUFJLENBQUNDLGNBQVQsQ0FBd0IsT0FBeEIsRUFBaUNDLE1BQWpDLENBQXdDZCxJQUF4QyxDQUFQO0FBQ0QsR0FGTSxNQUVBO0FBQ0wsV0FBT0EsSUFBSSxDQUFDZSxjQUFMLENBQW9CLE9BQXBCLEVBQTZCO0FBQ2xDQyxNQUFBQSxHQUFHLEVBQUUsU0FENkI7QUFFbENDLE1BQUFBLElBQUksRUFBRSxTQUY0QjtBQUdsQ0MsTUFBQUEsTUFBTSxFQUFFLEtBSDBCO0FBSWxDQyxNQUFBQSxNQUFNLEVBQUUsU0FKMEI7QUFLbENDLE1BQUFBLEtBQUssRUFBRSxTQUwyQjtBQU1sQ0MsTUFBQUEsSUFBSSxFQUFFO0FBTjRCLEtBQTdCLENBQVA7QUFRRDtBQUNGOztlQUVjO0FBQ1pDLEVBQUFBLDhCQUE4QixFQUFFLGtCQURwQjtBQUViO0FBQ0FDLEVBQUFBLGVBQWUsRUFBRSwrQkFISjtBQUliQyxFQUFBQSw0QkFBNEIsRUFBRSw4QkFKakI7QUFLYixVQUFRLE1BTEs7QUFNYixtQkFBaUIscUJBTko7QUFPYixvQkFBa0IsY0FQTDtBQVFiLG1CQUFpQixjQVJKO0FBU2IsVUFBUSxPQVRLO0FBVWIsZ0JBQWMsVUFWRDtBQVdiLGtCQUFnQixrQkFYSDtBQVliLFdBQVMsYUFaSTtBQWFiLFdBQVMsUUFiSTtBQWNiLFdBQVMsYUFkSTtBQWNXO0FBQ3hCLFVBQVEsUUFmSztBQWdCYixhQUFXLFNBaEJFO0FBaUJiLFdBQVMsVUFqQkk7QUFrQmIsZUFBYSxVQWxCQTtBQW1CYixTQUFPLFFBbkJNO0FBb0JiLFdBQVMsT0FwQkk7QUFxQmIsdUJBQXFCLHlCQXJCUjtBQXNCYixpQkFBZSxpQkF0QkY7QUF1QmIsU0FBTyxNQXZCTTtBQXdCYixtQkFBaUIxQjtBQXhCSixDIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24geE1pbnV0ZXNBZ28oZGF0ZVN0cikge1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUoZGF0ZVN0cik7XG4gIGNvbnN0IGRhdGVUaW1lID0gZGF0ZS5nZXRUaW1lKCk7XG5cbiAgaWYgKGlzTmFOKGRhdGVUaW1lKSkge1xuICAgIHJldHVybiBkYXRlU3RyO1xuICB9XG5cbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgY29uc3QgZGVsdGFJbk1zID0gbm93IC0gZGF0ZVRpbWU7XG4gIGNvbnN0IGRlbHRhSW5NaW51dGVzID0gTWF0aC5mbG9vcihkZWx0YUluTXMgLyA2MDAwMCk7XG4gIGNvbnN0IGRlbHRhSW5Ib3VycyA9IE1hdGguZmxvb3IoZGVsdGFJbk1zIC8gMzYwMDAwMCk7XG5cbiAgaWYgKGRlbHRhSW5NaW51dGVzIDwgMSkge1xuICAgIHJldHVybiBcImpldHp0XCI7XG4gIH0gZWxzZSBpZiAoZGVsdGFJbk1pbnV0ZXMgPT09IDEpIHtcbiAgICByZXR1cm4gJ1ZvciBlaW5lciBNaW51dGUnO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA8IDEpIHtcbiAgICByZXR1cm4gYFZvciAkeyBkZWx0YUluTWludXRlcyB9IE1pbnV0ZW5gO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA9PT0gMSkge1xuICAgIHJldHVybiBgVm9yIGVpbmUgU3R1bmRlYDtcbiAgfSBlbHNlIGlmIChkZWx0YUluSG91cnMgPCA1KSB7XG4gICAgcmV0dXJuIGBWb3IgJHsgZGVsdGFJbkhvdXJzIH0gU3R1bmRlbmA7XG4gIH0gZWxzZSBpZiAoZGVsdGFJbkhvdXJzIDw9IDI0KSB7XG4gICAgcmV0dXJuIGBoZXV0ZWA7XG4gIH0gZWxzZSBpZiAoZGVsdGFJbkhvdXJzIDw9IDQ4KSB7XG4gICAgcmV0dXJuIGBnZXN0ZXJuYDtcbiAgfSBlbHNlIGlmICh3aW5kb3cuSW50bCkge1xuICAgIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgnZGUtREUnKS5mb3JtYXQoZGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRhdGUudG9Mb2NhbGVTdHJpbmcoJ2RlLURFJywge1xuICAgICAgZGF5OiAnMi1kaWdpdCcsXG4gICAgICBob3VyOiAnMi1kaWdpdCcsXG4gICAgICBob3VyMTI6IGZhbHNlLFxuICAgICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgICBtb250aDogJzItZGlnaXQnLFxuICAgICAgeWVhcjogJ251bWVyaWMnLFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgIEZBSUxFRF9DT05ORUNUSU9OX05PVElGSUNBVElPTjogJ0tlaW5lIFZlcmJpbmR1bmcnLFxuICAvLyBEbyBub3QgbG9jYWxpemUge1JldHJ5fTsgaXQgaXMgYSBwbGFjZWhvbGRlciBmb3IgXCJSZXRyeVwiLiBFbmdsaXNoIHRyYW5zbGF0aW9uIHNob3VsZCBiZSwgXCJTZW5kIGZhaWxlZC4gUmV0cnkuXCJcbiAgU0VORF9GQUlMRURfS0VZOiAna29ubnRlIG5pY2h0IHNlbmRlbiwge1JldHJ5fS4nLFxuICBTTE9XX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OOiAnRWluZ2VzY2hyw6Rua3RlIEtvbm5la3Rpdml0w6R0JyxcbiAgJ0NoYXQnOiAnQ2hhdCcsXG4gICdEb3dubG9hZCBmaWxlJzogJ0RhdGVpIGhlcnVudGVybGFkZW4nLFxuICAnTWljcm9waG9uZSBvZmYnOiAnTWlrcm9mb24gYXVzJyxcbiAgJ01pY3JvcGhvbmUgb24nOiAnTWlrcm9mb24gYXVzJyxcbiAgJ0xlZnQnOiAnTGlua3MnLFxuICAnTGlzdGVuaW5n4oCmJzogJ2jDtnJ0IHp14oCmJyxcbiAgJ05ldyBtZXNzYWdlcyc6ICdOZXVlIE5hY2hyaWNodGVuJyxcbiAgJ3JldHJ5JzogJ3dpZWRlcmhvbGVuJyxcbiAgJ1JpZ2h0JzogJ1JlY2h0cycsXG4gICdSZXRyeSc6ICdXaWVkZXJob2xlbicsIC8vIFBsZWFzZSBhbHRlciB0aGlzIHZhbHVlIGlmICdSZXRyeScgYXQgdGhlIGJlZ2lubmluZyBvZiBhIHNlbnRlbmNlIGlzIHdyaXR0ZW4gZGlmZmVyZW50bHkgdGhhbiBhdCB0aGUgZW5kIG9mIGEgc2VudGVuY2UuXG4gICdTZW5kJzogJ1NlbmRlbicsXG4gICdTZW5kaW5nJzogJ3NlbmRldOKApicsXG4gICdTcGVhayc6ICdTcHJlY2hlbicsXG4gICdTdGFydGluZ+KApic6ICdTdGFydGV04oCmJyxcbiAgJ1RheCc6ICdTdGV1ZXInLFxuICAnVG90YWwnOiAnVG90YWwnLFxuICAnVHlwZSB5b3VyIG1lc3NhZ2UnOiAnVmVyZmFzc2UgZWluZSBOYWNocmljaHQnLFxuICAnVXBsb2FkIGZpbGUnOiAnRGF0ZWkgaG9jaGxhZGVuJyxcbiAgJ1ZBVCc6ICdNd1N0JyxcbiAgJ1ggbWludXRlcyBhZ28nOiB4TWludXRlc0Fnb1xufVxuIl19