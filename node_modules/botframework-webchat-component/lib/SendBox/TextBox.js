"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectSendTextBox = exports.default = void 0;

var _glamor = require("glamor");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _TypeFocusSink = require("../Utils/TypeFocusSink");

var _Localize = require("../Localization/Localize");

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ROOT_CSS = (0, _glamor.css)({
  display: 'flex',
  '& > div, input': {
    flex: 1
  }
});

var connectSendTextBox = function connectSendTextBox() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref) {
    var disabled = _ref.disabled,
        language = _ref.language,
        scrollToEnd = _ref.scrollToEnd,
        sendBoxValue = _ref.sendBoxValue,
        setSendBox = _ref.setSendBox,
        submitSendBox = _ref.submitSendBox;
    return {
      disabled: disabled,
      language: language,
      onChange: function onChange(_ref2) {
        var value = _ref2.target.value;
        setSendBox(value);
      },
      onKeyPress: function onKeyPress(event) {
        var key = event.key,
            shiftKey = event.shiftKey;

        if (key === 'Enter' && !shiftKey) {
          event.preventDefault();

          if (sendBoxValue) {
            setSendBox(sendBoxValue.trim());
            scrollToEnd();
            submitSendBox();
          }
        }
      },
      onSubmit: function onSubmit(event) {
        event.preventDefault(); // Consider clearing the send box only after we received POST_ACTIVITY_PENDING
        // E.g. if the connection is bad, sending the message essentially do nothing but just clearing the send box

        if (sendBoxValue) {
          scrollToEnd();
          submitSendBox();
        }
      },
      value: sendBoxValue
    };
  }].concat(selectors));
};

exports.connectSendTextBox = connectSendTextBox;

var _default = connectSendTextBox(function (_ref3) {
  var styleSet = _ref3.styleSet;
  return {
    styleSet: styleSet
  };
})(function (_ref4) {
  var className = _ref4.className,
      disabled = _ref4.disabled,
      language = _ref4.language,
      onChange = _ref4.onChange,
      onKeyPress = _ref4.onKeyPress,
      onSubmit = _ref4.onSubmit,
      styleSet = _ref4.styleSet,
      value = _ref4.value;
  var typeYourMessageString = (0, _Localize.localize)('Type your message', language);
  var sendBoxTextWrap = styleSet.options.sendBoxTextWrap;
  return _react.default.createElement("form", {
    className: (0, _classnames.default)(ROOT_CSS + '', styleSet.sendBoxTextArea + '', styleSet.sendBoxTextBox + '', (className || '') + ''),
    onSubmit: onSubmit
  }, _react.default.createElement(_TypeFocusSink.Context.Consumer, null, function (_ref5) {
    var sendFocusRef = _ref5.sendFocusRef;
    return !sendBoxTextWrap ? _react.default.createElement("input", {
      "aria-label": typeYourMessageString,
      "data-id": "webchat-sendbox-input",
      disabled: disabled,
      onChange: onChange,
      placeholder: typeYourMessageString,
      ref: sendFocusRef,
      type: "text",
      value: value
    }) : _react.default.createElement("div", null, _react.default.createElement("textarea", {
      "aria-label": typeYourMessageString,
      "data-id": "webchat-sendbox-input",
      disabled: disabled,
      onChange: onChange,
      onKeyPress: onKeyPress,
      placeholder: typeYourMessageString,
      ref: sendFocusRef,
      rows: "1",
      value: value
    }), _react.default.createElement("div", null, value + '\n'));
  }));
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TZW5kQm94L1RleHRCb3guanMiXSwibmFtZXMiOlsiUk9PVF9DU1MiLCJkaXNwbGF5IiwiZmxleCIsImNvbm5lY3RTZW5kVGV4dEJveCIsInNlbGVjdG9ycyIsImNvbm5lY3RUb1dlYkNoYXQiLCJkaXNhYmxlZCIsImxhbmd1YWdlIiwic2Nyb2xsVG9FbmQiLCJzZW5kQm94VmFsdWUiLCJzZXRTZW5kQm94Iiwic3VibWl0U2VuZEJveCIsIm9uQ2hhbmdlIiwidmFsdWUiLCJ0YXJnZXQiLCJvbktleVByZXNzIiwiZXZlbnQiLCJrZXkiLCJzaGlmdEtleSIsInByZXZlbnREZWZhdWx0IiwidHJpbSIsIm9uU3VibWl0Iiwic3R5bGVTZXQiLCJjbGFzc05hbWUiLCJ0eXBlWW91ck1lc3NhZ2VTdHJpbmciLCJzZW5kQm94VGV4dFdyYXAiLCJvcHRpb25zIiwic2VuZEJveFRleHRBcmVhIiwic2VuZEJveFRleHRCb3giLCJzZW5kRm9jdXNSZWYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7OztBQUVBLElBQU1BLFFBQVEsR0FBRyxpQkFBSTtBQUNuQkMsRUFBQUEsT0FBTyxFQUFFLE1BRFU7QUFHbkIsb0JBQWtCO0FBQ2hCQyxJQUFBQSxJQUFJLEVBQUU7QUFEVTtBQUhDLENBQUosQ0FBakI7O0FBUUEsSUFBTUMsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFxQjtBQUFBLG9DQUFJQyxTQUFKO0FBQUlBLElBQUFBLFNBQUo7QUFBQTs7QUFBQSxTQUFrQkMseUNBQzNDO0FBQUEsUUFDRUMsUUFERixRQUNFQSxRQURGO0FBQUEsUUFFRUMsUUFGRixRQUVFQSxRQUZGO0FBQUEsUUFHRUMsV0FIRixRQUdFQSxXQUhGO0FBQUEsUUFJRUMsWUFKRixRQUlFQSxZQUpGO0FBQUEsUUFLRUMsVUFMRixRQUtFQSxVQUxGO0FBQUEsUUFNRUMsYUFORixRQU1FQSxhQU5GO0FBQUEsV0FPTztBQUNMTCxNQUFB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RSxNQUFBLEdBQUcsRUFBR0ssWUFQUjtBQVFFLE1BQUEsSUFBSSxFQUFDLEdBUlA7QUFTRSxNQUFBLEtBQUssRUFBR2hCO0FBVFYsTUFERixFQVlFLDBDQUFPQSxLQUFLLEdBQUcsSUFBZixDQVpGLENBWkY7QUFBQSxHQURKLENBVkosQ0FERjtBQTJDRCxDQTFEYyxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgQ29udGV4dCBhcyBUeXBlRm9jdXNTaW5rQ29udGV4dCB9IGZyb20gJy4uL1V0aWxzL1R5cGVGb2N1c1NpbmsnO1xuaW1wb3J0IHsgbG9jYWxpemUgfSBmcm9tICcuLi9Mb2NhbGl6YXRpb24vTG9jYWxpemUnO1xuaW1wb3J0IGNvbm5lY3RUb1dlYkNoYXQgZnJvbSAnLi4vY29ubmVjdFRvV2ViQ2hhdCc7XG5cbmNvbnN0IFJPT1RfQ1NTID0gY3NzKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuXG4gICcmID4gZGl2LCBpbnB1dCc6IHtcbiAgICBmbGV4OiAxXG4gIH1cbn0pO1xuXG5jb25zdCBjb25uZWN0U2VuZFRleHRCb3ggPSAoLi4uc2VsZWN0b3JzKSA9PiBjb25uZWN0VG9XZWJDaGF0KFxuICAoe1xuICAgIGRpc2FibGVkLFxuICAgIGxhbmd1YWdlLFxuICAgIHNjcm9sbFRvRW5kLFxuICAgIHNlbmRCb3hWYWx1ZSxcbiAgICBzZXRTZW5kQm94LFxuICAgIHN1Ym1pdFNlbmRCb3hcbiAgfSkgPT4gKHtcbiAgICBkaXNhYmxlZCxcbiAgICBsYW5ndWFnZSxcbiAgICBvbkNoYW5nZTogKHsgdGFyZ2V0OiB7IHZhbHVlIH0gfSkgPT4ge1xuICAgICAgc2V0U2VuZEJveCh2YWx1ZSk7XG4gICAgfSxcbiAgICBvbktleVByZXNzOiBldmVudCA9PiB7XG4gICAgICBjb25zdCB7IGtleSwgc2hpZnRLZXkgfSA9IGV2ZW50O1xuXG4gICAgICBpZiAoa2V5ID09PSAnRW50ZXInICYmICFzaGlmdEtleSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZihzZW5kQm94VmFsdWUpIHtcbiAgICAgICAgICBzZXRTZW5kQm94KHNlbmRCb3hWYWx1ZS50cmltKCkpO1xuICAgICAgICAgIHNjcm9sbFRvRW5kKCk7XG4gICAgICAgICAgc3VibWl0U2VuZEJveCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBvblN1Ym1pdDogZXZlbnQgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgLy8gQ29uc2lkZXIgY2xlYXJpbmcgdGhlIHNlbmQgYm94IG9ubHkgYWZ0ZXIgd2UgcmVjZWl2ZWQgUE9TVF9BQ1RJVklUWV9QRU5ESU5HXG4gICAgICAvLyBFLmcuIGlmIHRoZSBjb25uZWN0aW9uIGlzIGJhZCwgc2VuZGluZyB0aGUgbWVzc2FnZSBlc3NlbnRpYWxseSBkbyBub3RoaW5nIGJ1dCBqdXN0IGNsZWFyaW5nIHRoZSBzZW5kIGJveFxuXG4gICAgICBpZiAoc2VuZEJveFZhbHVlKSB7XG4gICAgICAgIHNjcm9sbFRvRW5kKCk7XG4gICAgICAgIHN1Ym1pdFNlbmRCb3goKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbHVlOiBzZW5kQm94VmFsdWVcbiAgfSksXG4gIC4uLnNlbGVjdG9yc1xuKVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0U2VuZFRleHRCb3goXG4gICh7IHN0eWxlU2V0IH0pID0+ICh7IHN0eWxlU2V0IH0pXG4pKCh7XG4gIGNsYXNzTmFtZSxcbiAgZGlzYWJsZWQsXG4gIGxhbmd1YWdlLFxuICBvbkNoYW5nZSxcbiAgb25LZXlQcmVzcyxcbiAgb25TdWJtaXQsXG4gIHN0eWxlU2V0LFxuICB2YWx1ZVxufSkgPT4ge1xuICBjb25zdCB0eXBlWW91ck1lc3NhZ2VTdHJpbmcgPSBsb2NhbGl6ZSgnVHlwZSB5b3VyIG1lc3NhZ2UnLCBsYW5ndWFnZSk7XG4gIGNvbnN0IHsgb3B0aW9uczogeyBzZW5kQm94VGV4dFdyYXAgfX0gPSBzdHlsZVNldDtcblxuICByZXR1cm4gKFxuICAgIDxmb3JtXG4gICAgICBjbGFzc05hbWU9eyBjbGFzc05hbWVzKFxuICAgICAgICBST09UX0NTUyArICcnLFxuICAgICAgICBzdHlsZVNldC5zZW5kQm94VGV4dEFyZWEgKyAnJyxcbiAgICAgICAgc3R5bGVTZXQuc2VuZEJveFRleHRCb3ggKyAnJyxcbiAgICAgICAgKGNsYXNzTmFtZSB8fCAnJykgKyAnJyxcbiAgICAgICkgfVxuICAgICAgb25TdWJtaXQ9eyBvblN1Ym1pdCB9XG4gICAgPlxuICAgICAge1xuICAgICAgICA8VHlwZUZvY3VzU2lua0NvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgICAgeyAoeyBzZW5kRm9jdXNSZWYgfSkgPT5cbiAgICAgICAgICAgIXNlbmRCb3hUZXh0V3JhcFxuICAgICAgICAgICAgPyA8aW5wdXRcbiAgICAgICAgICAgICAgYXJpYS1sYWJlbD17IHR5cGVZb3VyTWVzc2FnZVN0cmluZyB9XG4gICAgICAgICAgICAgIGRhdGEtaWQ9XCJ3ZWJjaGF0LXNlbmRib3gtaW5wdXRcIlxuICAgICAgICAgICAgICBkaXNhYmxlZD17IGRpc2FibGVkIH1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyBvbkNoYW5nZSB9XG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXsgdHlwZVlvdXJNZXNzYWdlU3RyaW5nIH1cbiAgICAgICAgICAgICAgcmVmPXsgc2VuZEZvY3VzUmVmIH1cbiAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICB2YWx1ZT17IHZhbHVlIH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA6IDxkaXY+XG4gICAgICAgICAgICAgICAgPHRleHRhcmVhXG4gICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXsgdHlwZVlvdXJNZXNzYWdlU3RyaW5nIH1cbiAgICAgICAgICAgICAgICAgIGRhdGEtaWQ9XCJ3ZWJjaGF0LXNlbmRib3gtaW5wdXRcIlxuICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyBkaXNhYmxlZCB9XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17IG9uQ2hhbmdlIH1cbiAgICAgICAgICAgICAgICAgIG9uS2V5UHJlc3M9IHsgb25LZXlQcmVzcyB9XG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17IHR5cGVZb3VyTWVzc2FnZVN0cmluZyB9XG4gICAgICAgICAgICAgICAgICByZWY9eyBzZW5kRm9jdXNSZWYgfVxuICAgICAgICAgICAgICAgICAgcm93cz1cIjFcIlxuICAgICAgICAgICAgICAgICAgdmFsdWU9eyB2YWx1ZSB9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8ZGl2PnsgdmFsdWUgKyAnXFxuJyB9PC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIH1cbiAgICAgICAgPC9UeXBlRm9jdXNTaW5rQ29udGV4dC5Db25zdW1lcj5cbiAgICAgIH1cbiAgICA8L2Zvcm0+XG4gICk7XG59KVxuXG5leHBvcnQgeyBjb25uZWN0U2VuZFRleHRCb3ggfVxuIl19