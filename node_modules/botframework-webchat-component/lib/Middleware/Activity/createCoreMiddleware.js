"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _react = _interopRequireDefault(require("react"));

var _CarouselLayout = _interopRequireDefault(require("../../Activity/CarouselLayout"));

var _StackedLayout = _interopRequireDefault(require("../../Activity/StackedLayout"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RETURN_FALSE = function RETURN_FALSE() {
  return false;
};

function _default() {
  return function () {
    return function (next) {
      return function (_ref) {
        var activity = _ref.activity,
            timestampClassName = _ref.timestampClassName;
        // TODO: [P4] Can we simplify these if-statement to something more readable?
        var type = activity.type; // Filter out activities that should not be visible

        if (type === 'conversationUpdate' || type === 'event') {
          return RETURN_FALSE;
        } else if (type === 'message') {
          var _activity$attachments = activity.attachments,
              attachments = _activity$attachments === void 0 ? [] : _activity$attachments,
              text = activity.text;

          if ( // Do not show postback
          activity.channelData && activity.channelData.postBack || // Do not show messageBack if displayText is undefined
          activity.channelData && activity.channelData.messageBack && !activity.channelData.messageBack.displayText // Do not show empty bubbles (no text and attachments, and not "typing")
          || !(text || attachments.length)) {
            return RETURN_FALSE;
          }
        } else if (type === 'typing' && activity.from.role === 'user') {
          // Do not show typing by oneself
          return RETURN_FALSE;
        }

        if (type === 'message' || type === 'typing') {
          if (type === 'message' && (activity.attachments || []).length > 1 && activity.attachmentLayout === 'carousel') {
            return function (children) {
              return _react.default.createElement(_CarouselLayout.default, {
                activity: activity,
                timestampClassName: timestampClassName
              }, children);
            };
          } else {
            return function (children) {
              return _react.default.createElement(_StackedLayout.default, {
                activity: activity,
                timestampClassName: timestampClassName
              }, children);
            };
          }
        } else {
          return next({
            activity: activity,
            timestampClassName: timestampClassName
          });
        }
      };
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NaWRkbGV3YXJlL0FjdGl2aXR5L2NyZWF0ZUNvcmVNaWRkbGV3YXJlLmpzIl0sIm5hbWVzIjpbIlJFVFVSTl9GQUxTRSIsIm5leHQiLCJhY3Rpdml0eSIsInRpbWVzdGFtcENsYXNzTmFtZSIsInR5cGUiLCJhdHRhY2htZW50cyIsInRleHQiLCJjaGFubmVsRGF0YSIsInBvc3RCYWNrIiwibWVzc2FnZUJhY2siLCJkaXNwbGF5VGV4dCIsImxlbmd0aCIsImZyb20iLCJyb2xlIiwiYXR0YWNobWVudExheW91dCIsImNoaWxkcmVuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxZQUFZLEdBQUcsU0FBZkEsWUFBZTtBQUFBLFNBQU0sS0FBTjtBQUFBLENBQXJCOztBQUVlLG9CQUFZO0FBQ3pCLFNBQU87QUFBQSxXQUFNLFVBQUFDLElBQUk7QUFBQSxhQUFJLGdCQUFzQztBQUFBLFlBQW5DQyxRQUFtQyxRQUFuQ0EsUUFBbUM7QUFBQSxZQUF6QkMsa0JBQXlCLFFBQXpCQSxrQkFBeUI7QUFDekQ7QUFEeUQsWUFHakRDLElBSGlELEdBR3hDRixRQUh3QyxDQUdqREUsSUFIaUQsRUFLekQ7O0FBQ0EsWUFBSUEsSUFBSSxLQUFLLG9CQUFULElBQWlDQSxJQUFJLEtBQUssT0FBOUMsRUFBdUQ7QUFDckQsaUJBQU9KLFlBQVA7QUFDRCxTQUZELE1BRU8sSUFBSUksSUFBSSxLQUFLLFNBQWIsRUFBd0I7QUFBQSxzQ0FDTUYsUUFETixDQUNyQkcsV0FEcUI7QUFBQSxjQUNyQkEsV0FEcUIsc0NBQ1AsRUFETztBQUFBLGNBQ0hDLElBREcsR0FDTUosUUFETixDQUNISSxJQURHOztBQUc3QixlQUNFO0FBQ0NKLFVBQUFBLFFBQVEsQ0FBQ0ssV0FBVCxJQUF3QkwsUUFBUSxDQUFDSyxXQUFULENBQXFCQyxRQUE5QyxJQUNBO0FBQ0lOLFVBQUFBLFFBQVEsQ0FBQ0ssV0FBVCxJQUF3QkwsUUFBUSxDQUFDSyxXQUFULENBQXFCRSxXQUE3QyxJQUE0RCxDQUFDUCxRQUFRLENBQUNLLFdBQVQsQ0FBcUJFLFdBQXJCLENBQWlDQyxXQUZsRyxDQUdBO0FBSEEsYUFJRyxFQUFFSixJQUFJLElBQUlELFdBQVcsQ0FBQ00sTUFBdEIsQ0FOTCxFQU9FO0FBQ0EsbUJBQU9YLFlBQVA7QUFDRDtBQUNGLFNBYk0sTUFhQSxJQUFJSSxJQUFJLEtBQUssUUFBVCxJQUFxQkYsUUFBUSxDQUFDVSxJQUFULENBQWNDLElBQWQsS0FBdUIsTUFBaEQsRUFBd0Q7QUFDN0Q7QUFDQSxpQkFBT2IsWUFBUDtBQUNEOztBQUVELFlBQUlJLElBQUksS0FBSyxTQUFULElBQXNCQSxJQUFJLEtBQUssUUFBbkMsRUFBNkM7QUFDM0MsY0FDRUEsSUFBSSxLQUFLLFNBQVQsSUFDRyxDQUFDRixRQUFRLENBQUNHLFdBQVQsSUFBd0IsRUFBekIsRUFBNkJNLE1BQTdCLEdBQXNDLENBRHpDLElBRUdULFFBQVEsQ0FBQ1ksZ0JBQVQsS0FBOEIsVUFIbkMsRUFJRTtBQUNBLG1CQUFPLFVBQUFDLFFBQVE7QUFBQSxxQkFBSSw2QkFBQyx1QkFBRDtBQUFnQixnQkFBQSxRQUFRLEVBQUdiLFFBQTNCO0FBQXNDLGdCQUFBLGtCQUFrQixFQUFHQztBQUEzRCxpQkFBa0ZZLFFBQWxGLENBQUo7QUFBQSxhQUFmO0FBQ0QsV0FORCxNQU1PO0FBQ0wsbUJBQU8sVUFBQUEsUUFBUTtBQUFBLHFCQUFJLDZCQUFDLHNCQUFEO0FBQWUsZ0JBQUEsUUFBUSxFQUFHYixRQUExQjtBQUFxQyxnQkFBQSxrQkFBa0IsRUFBR0M7QUFBMUQsaUJBQWlGWSxRQUFqRixDQUFKO0FBQUEsYUFBZjtBQUNEO0FBQ0YsU0FWRCxNQVVPO0FBQ0wsaUJBQU9kLElBQUksQ0FBQztBQUFFQyxZQUFBQSxRQUFRLEVBQVJBLFFBQUY7QUFBWUMsWUFBQUEsa0JBQWtCLEVBQWxCQTtBQUFaLFdBQUQsQ0FBWDtBQUNEO0FBQ0YsT0F2Q2dCO0FBQUEsS0FBVjtBQUFBLEdBQVA7QUF3Q0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQ2Fyb3VzZWxMYXlvdXQgZnJvbSAnLi4vLi4vQWN0aXZpdHkvQ2Fyb3VzZWxMYXlvdXQnO1xuaW1wb3J0IFN0YWNrZWRMYXlvdXQgZnJvbSAnLi4vLi4vQWN0aXZpdHkvU3RhY2tlZExheW91dCc7XG5cbmNvbnN0IFJFVFVSTl9GQUxTRSA9ICgpID0+IGZhbHNlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAoKSA9PiBuZXh0ID0+ICh7IGFjdGl2aXR5LCB0aW1lc3RhbXBDbGFzc05hbWUgfSkgPT4ge1xuICAgIC8vIFRPRE86IFtQNF0gQ2FuIHdlIHNpbXBsaWZ5IHRoZXNlIGlmLXN0YXRlbWVudCB0byBzb21ldGhpbmcgbW9yZSByZWFkYWJsZT9cblxuICAgIGNvbnN0IHsgdHlwZSB9ID0gYWN0aXZpdHk7XG5cbiAgICAvLyBGaWx0ZXIgb3V0IGFjdGl2aXRpZXMgdGhhdCBzaG91bGQgbm90IGJlIHZpc2libGVcbiAgICBpZiAodHlwZSA9PT0gJ2NvbnZlcnNhdGlvblVwZGF0ZScgfHwgdHlwZSA9PT0gJ2V2ZW50Jykge1xuICAgICAgcmV0dXJuIFJFVFVSTl9GQUxTRTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdtZXNzYWdlJykge1xuICAgICAgY29uc3QgeyBhdHRhY2htZW50cyA9IFtdLCB0ZXh0IH0gPSBhY3Rpdml0eTtcblxuICAgICAgaWYgKFxuICAgICAgICAvLyBEbyBub3Qgc2hvdyBwb3N0YmFja1xuICAgICAgICAoYWN0aXZpdHkuY2hhbm5lbERhdGEgJiYgYWN0aXZpdHkuY2hhbm5lbERhdGEucG9zdEJhY2spXG4gICAgICAgIC8vIERvIG5vdCBzaG93IG1lc3NhZ2VCYWNrIGlmIGRpc3BsYXlUZXh0IGlzIHVuZGVmaW5lZFxuICAgICAgICB8fCAoYWN0aXZpdHkuY2hhbm5lbERhdGEgJiYgYWN0aXZpdHkuY2hhbm5lbERhdGEubWVzc2FnZUJhY2sgJiYgIWFjdGl2aXR5LmNoYW5uZWxEYXRhLm1lc3NhZ2VCYWNrLmRpc3BsYXlUZXh0KVxuICAgICAgICAvLyBEbyBub3Qgc2hvdyBlbXB0eSBidWJibGVzIChubyB0ZXh0IGFuZCBhdHRhY2htZW50cywgYW5kIG5vdCBcInR5cGluZ1wiKVxuICAgICAgICB8fCAhKHRleHQgfHwgYXR0YWNobWVudHMubGVuZ3RoKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBSRVRVUk5fRkFMU0U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAndHlwaW5nJyAmJiBhY3Rpdml0eS5mcm9tLnJvbGUgPT09ICd1c2VyJykge1xuICAgICAgLy8gRG8gbm90IHNob3cgdHlwaW5nIGJ5IG9uZXNlbGZcbiAgICAgIHJldHVybiBSRVRVUk5fRkFMU0U7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09ICdtZXNzYWdlJyB8fCB0eXBlID09PSAndHlwaW5nJykge1xuICAgICAgaWYgKFxuICAgICAgICB0eXBlID09PSAnbWVzc2FnZSdcbiAgICAgICAgJiYgKGFjdGl2aXR5LmF0dGFjaG1lbnRzIHx8IFtdKS5sZW5ndGggPiAxXG4gICAgICAgICYmIGFjdGl2aXR5LmF0dGFjaG1lbnRMYXlvdXQgPT09ICdjYXJvdXNlbCdcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW4gPT4gPENhcm91c2VsTGF5b3V0IGFjdGl2aXR5PXsgYWN0aXZpdHkgfSB0aW1lc3RhbXBDbGFzc05hbWU9eyB0aW1lc3RhbXBDbGFzc05hbWUgfT57IGNoaWxkcmVuIH08L0Nhcm91c2VsTGF5b3V0PjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbiA9PiA8U3RhY2tlZExheW91dCBhY3Rpdml0eT17IGFjdGl2aXR5IH0gdGltZXN0YW1wQ2xhc3NOYW1lPXsgdGltZXN0YW1wQ2xhc3NOYW1lIH0+eyBjaGlsZHJlbiB9PC9TdGFja2VkTGF5b3V0PjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5leHQoeyBhY3Rpdml0eSwgdGltZXN0YW1wQ2xhc3NOYW1lIH0pO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==