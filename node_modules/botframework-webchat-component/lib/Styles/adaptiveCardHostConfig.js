"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _adaptivecards = require("adaptivecards");

var _defaultStyleSetOptions = _interopRequireDefault(require("./defaultStyleSetOptions"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// https://docs.microsoft.com/en-us/adaptive-cards/rendering-cards/host-config
var _default = function _default() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _defaultStyleSetOptions.default,
      accent = _ref.accent,
      bubbleTextColor = _ref.bubbleTextColor,
      cardEmphasisBackgroundColor = _ref.cardEmphasisBackgroundColor,
      primaryFont = _ref.primaryFont,
      subtle = _ref.subtle;

  return new _adaptivecards.HostConfig({
    containerStyles: {
      default: {
        foregroundColors: {
          default: {
            default: bubbleTextColor,
            subtle: subtle
          },
          accent: {
            default: accent,
            subtle: accent
          }
        }
      },
      emphasis: {
        backgroundColor: cardEmphasisBackgroundColor,
        default: {
          default: bubbleTextColor,
          subtle: subtle
        }
      }
    },
    supportsInteractivity: true,
    fontFamily: primaryFont,
    imageSizes: {
      small: 40,
      medium: 80,
      large: 160
    },
    actions: {
      actionAlignment: 'stretch',
      actionsOrientation: 'vertical',
      buttonSpacing: 8,
      maxActions: 100,
      showCard: {
        actionMode: 'inline',
        inlineTopMargin: 8
      },
      spacing: 'default'
    },
    adaptiveCard: {
      allowCustomStyle: false
    },
    imageSet: {
      imageSize: 'medium',
      maxImageHeight: 100
    },
    factSet: {
      title: {
        color: 'default',
        size: 'default',
        isSubtle: false,
        weight: 'bolder',
        wrap: true,
        maxWidth: 150
      },
      value: {
        color: 'default',
        size: 'default',
        isSubtle: false,
        weight: 'default',
        wrap: true
      },
      spacing: 8
    }
  });
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TdHlsZXMvYWRhcHRpdmVDYXJkSG9zdENvbmZpZy5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0U3R5bGVTZXRPcHRpb25zIiwiYWNjZW50IiwiYnViYmxlVGV4dENvbG9yIiwiY2FyZEVtcGhhc2lzQmFja2dyb3VuZENvbG9yIiwicHJpbWFyeUZvbnQiLCJzdWJ0bGUiLCJIb3N0Q29uZmlnIiwiY29udGFpbmVyU3R5bGVzIiwiZGVmYXVsdCIsImZvcmVncm91bmRDb2xvcnMiLCJlbXBoYXNpcyIsImJhY2tncm91bmRDb2xvciIsInN1cHBvcnRzSW50ZXJhY3Rpdml0eSIsImZvbnRGYW1pbHkiLCJpbWFnZVNpemVzIiwic21hbGwiLCJtZWRpdW0iLCJsYXJnZSIsImFjdGlvbnMiLCJhY3Rpb25BbGlnbm1lbnQiLCJhY3Rpb25zT3JpZW50YXRpb24iLCJidXR0b25TcGFjaW5nIiwibWF4QWN0aW9ucyIsInNob3dDYXJkIiwiYWN0aW9uTW9kZSIsImlubGluZVRvcE1hcmdpbiIsInNwYWNpbmciLCJhZGFwdGl2ZUNhcmQiLCJhbGxvd0N1c3RvbVN0eWxlIiwiaW1hZ2VTZXQiLCJpbWFnZVNpemUiLCJtYXhJbWFnZUhlaWdodCIsImZhY3RTZXQiLCJ0aXRsZSIsImNvbG9yIiwic2l6ZSIsImlzU3VidGxlIiwid2VpZ2h0Iiwid3JhcCIsIm1heFdpZHRoIiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUNBO2VBRWU7QUFBQSxpRkFNWEEsK0JBTlc7QUFBQSxNQUNiQyxNQURhLFFBQ2JBLE1BRGE7QUFBQSxNQUViQyxlQUZhLFFBRWJBLGVBRmE7QUFBQSxNQUdiQywyQkFIYSxRQUdiQSwyQkFIYTtBQUFBLE1BSWJDLFdBSmEsUUFJYkEsV0FKYTtBQUFBLE1BS2JDLE1BTGEsUUFLYkEsTUFMYTs7QUFBQSxTQU1nQixJQUFJQyx5QkFBSixDQUFlO0FBQzVDQyxJQUFBQSxlQUFlLEVBQUU7QUFDZkMsTUFBQUEsT0FBTyxFQUFFO0FBQ1BDLFFBQUFBLGdCQUFnQixFQUFFO0FBQ2hCRCxVQUFBQSxPQUFPLEVBQUU7QUFDUEEsWUFBQUEsT0FBTyxFQUFFTixlQURGO0FBRVBHLFlBQUFBLE1BQU0sRUFBRUE7QUFGRCxXQURPO0FBS2hCSixVQUFBQSxNQUFNLEVBQUU7QUFDTk8sWUFBQUEsT0FBTyxFQUFFUCxNQURIO0FBRU5JLFlBQUFBLE1BQU0sRUFBRUo7QUFGRjtBQUxRO0FBRFgsT0FETTtBQWFmUyxNQUFBQSxRQUFRLEVBQUU7QUFDUkMsUUFBQUEsZUFBZSxFQUFFUiwyQkFEVDtBQUVSSyxRQUFBQSxPQUFPLEVBQUU7QUFDUEEsVUFBQUEsT0FBTyxFQUFFTixlQURGO0FBRVBHLFVBQUFBLE1BQU0sRUFBRUE7QUFGRDtBQUZEO0FBYkssS0FEMkI7QUFzQjVDTyxJQUFBQSxxQkFBcUIsRUFBRSxJQXRCcUI7QUF1QjVDQyxJQUFBQSxVQUFVLEVBQUVULFdBdkJnQztBQXdCNUNVLElBQUFBLFVBQVUsRUFBRTtBQUNWQyxNQUFBQSxLQUFLLEVBQUUsRUFERztBQUVWQyxNQUFBQSxNQUFNLEVBQUUsRUFGRTtBQUdWQyxNQUFBQSxLQUFLLEVBQUU7QUFIRyxLQXhCZ0M7QUE2QjVDQyxJQUFBQSxPQUFPLEVBQUU7QUFDUEMsTUFBQUEsZUFBZSxFQUFFLFNBRFY7QUFFUEMsTUFBQUEsa0JBQWtCLEVBQUUsVUFGYjtBQUdQQyxNQUFBQSxhQUFhLEVBQUUsQ0FIUjtBQUlQQyxNQUFBQSxVQUFVLEVBQUUsR0FKTDtBQUtQQyxNQUFBQSxRQUFRLEVBQUU7QUFDUkMsUUFBQUEsVUFBVSxFQUFFLFFBREo7QUFFUkMsUUFBQUEsZUFBZSxFQUFFO0FBRlQsT0FMSDtBQVNQQyxNQUFBQSxPQUFPLEVBQUU7QUFURixLQTdCbUM7QUF3QzVDQyxJQUFBQSxZQUFZLEVBQUU7QUFDWkMsTUFBQUEsZ0JBQWdCLEVBQUU7QUFETixLQXhDOEI7QUEyQzVDQyxJQUFBQSxRQUFRLEVBQUU7QUFDUkMsTUFBQUEsU0FBUyxFQUFFLFFBREg7QUFFUkMsTUFBQUEsY0FBYyxFQUFFO0FBRlIsS0EzQ2tDO0FBK0M1Q0MsSUFBQUEsT0FBTyxFQUFFO0FBQ1BDLE1BQUFBLEtBQUssRUFBRTtBQUNMQyxRQUFBQSxLQUFLLEVBQUUsU0FERjtBQUVMQyxRQUFBQSxJQUFJLEVBQUUsU0FGRDtBQUdMQyxRQUFBQSxRQUFRLEVBQUUsS0FITDtBQUlMQyxRQUFBQSxNQUFNLEVBQUUsUUFKSDtBQUtMQyxRQUFBQSxJQUFJLEVBQUUsSUFMRDtBQU1MQyxRQUFBQSxRQUFRLEVBQUU7QUFOTCxPQURBO0FBU1BDLE1BQUFBLEtBQUssRUFBRTtBQUNMTixRQUFBQSxLQUFLLEVBQUUsU0FERjtBQUVMQyxRQUFBQSxJQUFJLEVBQUUsU0FGRDtBQUdMQyxRQUFBQSxRQUFRLEVBQUUsS0FITDtBQUlMQyxRQUFBQSxNQUFNLEVBQUUsU0FKSDtBQUtMQyxRQUFBQSxJQUFJLEVBQUU7QUFMRCxPQVRBO0FBZ0JQWixNQUFBQSxPQUFPLEVBQUU7QUFoQkY7QUEvQ21DLEdBQWYsQ0FOaEI7QUFBQSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSG9zdENvbmZpZyB9IGZyb20gJ2FkYXB0aXZlY2FyZHMnO1xuaW1wb3J0IGRlZmF1bHRTdHlsZVNldE9wdGlvbnMgZnJvbSAnLi9kZWZhdWx0U3R5bGVTZXRPcHRpb25zJztcbi8vIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2FkYXB0aXZlLWNhcmRzL3JlbmRlcmluZy1jYXJkcy9ob3N0LWNvbmZpZ1xuXG5leHBvcnQgZGVmYXVsdCAoe1xuICBhY2NlbnQsXG4gIGJ1YmJsZVRleHRDb2xvcixcbiAgY2FyZEVtcGhhc2lzQmFja2dyb3VuZENvbG9yLFxuICBwcmltYXJ5Rm9udCxcbiAgc3VidGxlXG59ID0gZGVmYXVsdFN0eWxlU2V0T3B0aW9ucykgPT4gbmV3IEhvc3RDb25maWcoe1xuICBjb250YWluZXJTdHlsZXM6IHtcbiAgICBkZWZhdWx0OiB7XG4gICAgICBmb3JlZ3JvdW5kQ29sb3JzOiB7XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICBkZWZhdWx0OiBidWJibGVUZXh0Q29sb3IsXG4gICAgICAgICAgc3VidGxlOiBzdWJ0bGVcbiAgICAgICAgfSxcbiAgICAgICAgYWNjZW50OiB7XG4gICAgICAgICAgZGVmYXVsdDogYWNjZW50LFxuICAgICAgICAgIHN1YnRsZTogYWNjZW50XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGVtcGhhc2lzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNhcmRFbXBoYXNpc0JhY2tncm91bmRDb2xvcixcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgZGVmYXVsdDogYnViYmxlVGV4dENvbG9yLFxuICAgICAgICBzdWJ0bGU6IHN1YnRsZVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgc3VwcG9ydHNJbnRlcmFjdGl2aXR5OiB0cnVlLFxuICBmb250RmFtaWx5OiBwcmltYXJ5Rm9udCxcbiAgaW1hZ2VTaXplczoge1xuICAgIHNtYWxsOiA0MCxcbiAgICBtZWRpdW06IDgwLFxuICAgIGxhcmdlOiAxNjBcbiAgfSxcbiAgYWN0aW9uczoge1xuICAgIGFjdGlvbkFsaWdubWVudDogJ3N0cmV0Y2gnLFxuICAgIGFjdGlvbnNPcmllbnRhdGlvbjogJ3ZlcnRpY2FsJyxcbiAgICBidXR0b25TcGFjaW5nOiA4LFxuICAgIG1heEFjdGlvbnM6IDEwMCxcbiAgICBzaG93Q2FyZDoge1xuICAgICAgYWN0aW9uTW9kZTogJ2lubGluZScsXG4gICAgICBpbmxpbmVUb3BNYXJnaW46IDhcbiAgICB9LFxuICAgIHNwYWNpbmc6ICdkZWZhdWx0J1xuICB9LFxuICBhZGFwdGl2ZUNhcmQ6IHtcbiAgICBhbGxvd0N1c3RvbVN0eWxlOiBmYWxzZVxuICB9LFxuICBpbWFnZVNldDoge1xuICAgIGltYWdlU2l6ZTogJ21lZGl1bScsXG4gICAgbWF4SW1hZ2VIZWlnaHQ6IDEwMFxuICB9LFxuICBmYWN0U2V0OiB7XG4gICAgdGl0bGU6IHtcbiAgICAgIGNvbG9yOiAnZGVmYXVsdCcsXG4gICAgICBzaXplOiAnZGVmYXVsdCcsXG4gICAgICBpc1N1YnRsZTogZmFsc2UsXG4gICAgICB3ZWlnaHQ6ICdib2xkZXInLFxuICAgICAgd3JhcDogdHJ1ZSxcbiAgICAgIG1heFdpZHRoOiAxNTBcbiAgICB9LFxuICAgIHZhbHVlOiB7XG4gICAgICBjb2xvcjogJ2RlZmF1bHQnLFxuICAgICAgc2l6ZTogJ2RlZmF1bHQnLFxuICAgICAgaXNTdWJ0bGU6IGZhbHNlLFxuICAgICAgd2VpZ2h0OiAnZGVmYXVsdCcsXG4gICAgICB3cmFwOiB0cnVlXG4gICAgfSxcbiAgICBzcGFjaW5nOiA4XG4gIH1cbn0pXG4iXX0=