"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createSuggestedActionsStyleSet;

var _glamor = require("glamor");

var _reactFilm = require("react-film");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function createSuggestedActionsStyleSet(_ref) {
  var _hoverScrolling;

  var paddingRegular = _ref.paddingRegular,
      transcriptOverlayButtonBackground = _ref.transcriptOverlayButtonBackground,
      transcriptOverlayButtonBackgroundOnDisabled = _ref.transcriptOverlayButtonBackgroundOnDisabled,
      transcriptOverlayButtonBackgroundOnFocus = _ref.transcriptOverlayButtonBackgroundOnFocus,
      transcriptOverlayButtonBackgroundOnHover = _ref.transcriptOverlayButtonBackgroundOnHover,
      transcriptOverlayButtonColor = _ref.transcriptOverlayButtonColor,
      transcriptOverlayButtonColorOnDisabled = _ref.transcriptOverlayButtonColorOnDisabled,
      transcriptOverlayButtonColorOnFocus = _ref.transcriptOverlayButtonColorOnFocus,
      transcriptOverlayButtonColorOnHover = _ref.transcriptOverlayButtonColorOnHover;
  var originalStyleSet = (0, _reactFilm.createBasicStyleSet)({
    cursor: null,
    flipperBoxWidth: 40,
    flipperSize: 20,
    scrollBarHeight: 6,
    scrollBarMargin: 2
  });
  var flipper = (0, _glamor.css)({
    '& > div.slider > div': {
      background: transcriptOverlayButtonBackground,
      color: transcriptOverlayButtonColor,
      outline: 0
    },
    '&:disabled > div.slider > div': {
      backgroundColor: transcriptOverlayButtonBackgroundOnDisabled,
      color: transcriptOverlayButtonColorOnDisabled
    },
    '&:focus > div.slider > div': {
      backgroundColor: transcriptOverlayButtonBackgroundOnFocus,
      color: transcriptOverlayButtonColorOnFocus
    },
    '&:hover > div.slider > div': {
      backgroundColor: transcriptOverlayButtonBackgroundOnHover,
      color: transcriptOverlayButtonColorOnHover
    }
  });
  var leftFlipper = (0, _glamor.css)(originalStyleSet.leftFlipper, flipper);
  var rightFlipper = (0, _glamor.css)(originalStyleSet.rightFlipper, flipper);
  var carousel = (0, _glamor.css)(originalStyleSet.carousel, {
    '&:hover, &.scrolling': (_hoverScrolling = {}, _defineProperty(_hoverScrolling, "& .".concat(leftFlipper + '', " > div.slider, & .").concat(rightFlipper + '', " > div.slider"), {
      transitionDelay: '0s'
    }), _defineProperty(_hoverScrolling, "& .".concat(leftFlipper + '', " > div.slider"), {
      left: 0
    }), _defineProperty(_hoverScrolling, "& .".concat(rightFlipper + '', " > div.slider"), {
      right: 0
    }), _hoverScrolling),
    '& > div': {
      scrollbarWidth: 'none',
      '& > ul > li': {
        '&:first-child': {
          paddingLeft: paddingRegular / 2
        },
        '&:last-child': {
          paddingRight: paddingRegular / 2
        }
      }
    }
  }); // This is not CSS, but options to create style set for react-film

  return _objectSpread({}, originalStyleSet, {
    carousel: carousel,
    leftFlipper: leftFlipper,
    rightFlipper: rightFlipper
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9TdHlsZXMvU3R5bGVTZXQvU3VnZ2VzdGVkQWN0aW9uc1N0eWxlU2V0LmpzIl0sIm5hbWVzIjpbImNyZWF0ZVN1Z2dlc3RlZEFjdGlvbnNTdHlsZVNldCIsInBhZGRpbmdSZWd1bGFyIiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kIiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kT25EaXNhYmxlZCIsInRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQmFja2dyb3VuZE9uRm9jdXMiLCJ0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmRPbkhvdmVyIiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvciIsInRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3JPbkRpc2FibGVkIiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvck9uRm9jdXMiLCJ0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yT25Ib3ZlciIsIm9yaWdpbmFsU3R5bGVTZXQiLCJjdXJzb3IiLCJmbGlwcGVyQm94V2lkdGgiLCJmbGlwcGVyU2l6ZSIsInNjcm9sbEJhckhlaWdodCIsInNjcm9sbEJhck1hcmdpbiIsImZsaXBwZXIiLCJiYWNrZ3JvdW5kIiwiY29sb3IiLCJvdXRsaW5lIiwiYmFja2dyb3VuZENvbG9yIiwibGVmdEZsaXBwZXIiLCJyaWdodEZsaXBwZXIiLCJjYXJvdXNlbCIsInRyYW5zaXRpb25EZWxheSIsImxlZnQiLCJyaWdodCIsInNjcm9sbGJhcldpZHRoIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7O0FBRWUsU0FBU0EsOEJBQVQsT0FVWjtBQUFBOztBQUFBLE1BVERDLGNBU0MsUUFUREEsY0FTQztBQUFBLE1BUkRDLGlDQVFDLFFBUkRBLGlDQVFDO0FBQUEsTUFQREMsMkNBT0MsUUFQREEsMkNBT0M7QUFBQSxNQU5EQyx3Q0FNQyxRQU5EQSx3Q0FNQztBQUFBLE1BTERDLHdDQUtDLFFBTERBLHdDQUtDO0FBQUEsTUFKREMsNEJBSUMsUUFKREEsNEJBSUM7QUFBQSxNQUhEQyxzQ0FHQyxRQUhEQSxzQ0FHQztBQUFBLE1BRkRDLG1DQUVDLFFBRkRBLG1DQUVDO0FBQUEsTUFEREMsbUNBQ0MsUUFEREEsbUNBQ0M7QUFDRCxNQUFNQyxnQkFBZ0IsR0FBRyxvQ0FBb0I7QUFDM0NDLElBQUFBLE1BQU0sRUFBRSxJQURtQztBQUUzQ0MsSUFBQUEsZUFBZSxFQUFFLEVBRjBCO0FBRzNDQyxJQUFBQSxXQUFXLEVBQUUsRUFIOEI7QUFJM0NDLElBQUFBLGVBQWUsRUFBRSxDQUowQjtBQUszQ0MsSUFBQUEsZUFBZSxFQUFFO0FBTDBCLEdBQXBCLENBQXpCO0FBUUEsTUFBTUMsT0FBTyxHQUFHLGlCQUFJO0FBQ2xCLDRCQUF3QjtBQUN0QkMsTUFBQUEsVUFBVSxFQUFFZixpQ0FEVTtBQUV0QmdCLE1BQUFBLEtBQUssRUFBRVosNEJBRmU7QUFHdEJhLE1BQUFBLE9BQU8sRUFBRTtBQUhhLEtBRE47QUFPbEIscUNBQWlDO0FBQy9CQyxNQUFBQSxlQUFlLEVBQUVqQiwyQ0FEYztBQUUvQmUsTUFBQUEsS0FBSyxFQUFFWDtBQUZ3QixLQVBmO0FBWWxCLGtDQUE4QjtBQUM1QmEsTUFBQUEsZUFBZSxFQUFFaEIsd0NBRFc7QUFFNUJjLE1BQUFBLEtBQUssRUFBRVY7QUFGcUIsS0FaWjtBQWlCbEIsa0NBQThCO0FBQzVCWSxNQUFBQSxlQUFlLEVBQUVmLHdDQURXO0FBRTVCYSxNQUFBQSxLQUFLLEVBQUVUO0FBRnFCO0FBakJaLEdBQUosQ0FBaEI7QUF1QkEsTUFBTVksV0FBVyxHQUFHLGlCQUFJWCxnQkFBZ0IsQ0FBQ1csV0FBckIsRUFBa0NMLE9BQWxDLENBQXBCO0FBQ0EsTUFBTU0sWUFBWSxHQUFHLGlCQUFJWixnQkFBZ0IsQ0FBQ1ksWUFBckIsRUFBbUNOLE9BQW5DLENBQXJCO0FBQ0EsTUFBTU8sUUFBUSxHQUFHLGlCQUFJYixnQkFBZ0IsQ0FBQ2EsUUFBckIsRUFBK0I7QUFDOUMsaUdBQ1VGLFdBQVcsR0FBRyxFQUR4QiwrQkFDaURDLFlBQVksR0FBRyxFQURoRSxvQkFDcUY7QUFDakZFLE1BQUFBLGVBQWUsRUFBRTtBQURnRSxLQURyRixpREFJVUgsV0FBVyxHQUFHLEVBSnhCLG9CQUk2QztBQUFFSSxNQUFBQSxJQUFJLEVBQUU7QUFBUixLQUo3QyxpREFLVUgsWUFBWSxHQUFHLEVBTHpCLG9CQUs4QztBQUFFSSxNQUFBQSxLQUFLLEVBQUU7QUFBVCxLQUw5QyxtQkFEOEM7QUFTOUMsZUFBVztBQUNUQyxNQUFBQSxjQUFjLEVBQUUsTUFEUDtBQUdULHFCQUFlO0FBQ2IseUJBQWlCO0FBQ2ZDLFVBQUFBLFdBQVcsRUFBRTNCLGNBQWMsR0FBRztBQURmLFNBREo7QUFLYix3QkFBZ0I7QUFDZDRCLFVBQUFBLFlBQVksRUFBRTVCLGNBQWMsR0FBRztBQURqQjtBQUxIO0FBSE47QUFUbUMsR0FBL0IsQ0FBakIsQ0FsQ0MsQ0EwREQ7O0FBQ0EsMkJBQ0tTLGdCQURMO0FBR0VhLElBQUFBLFFBQVEsRUFBUkEsUUFIRjtBQUlFRixJQUFBQSxXQUFXLEVBQVhBLFdBSkY7QUFLRUMsSUFBQUEsWUFBWSxFQUFaQTtBQUxGO0FBT0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xuaW1wb3J0IHsgY3JlYXRlQmFzaWNTdHlsZVNldCB9IGZyb20gJ3JlYWN0LWZpbG0nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdWdnZXN0ZWRBY3Rpb25zU3R5bGVTZXQoe1xuICBwYWRkaW5nUmVndWxhcixcbiAgdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kLFxuICB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmRPbkRpc2FibGVkLFxuICB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmRPbkZvY3VzLFxuICB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmRPbkhvdmVyLFxuICB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yLFxuICB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yT25EaXNhYmxlZCxcbiAgdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvck9uRm9jdXMsXG4gIHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3JPbkhvdmVyXG59KSB7XG4gIGNvbnN0IG9yaWdpbmFsU3R5bGVTZXQgPSBjcmVhdGVCYXNpY1N0eWxlU2V0KHtcbiAgICBjdXJzb3I6IG51bGwsXG4gICAgZmxpcHBlckJveFdpZHRoOiA0MCxcbiAgICBmbGlwcGVyU2l6ZTogMjAsXG4gICAgc2Nyb2xsQmFySGVpZ2h0OiA2LFxuICAgIHNjcm9sbEJhck1hcmdpbjogMlxuICB9KTtcblxuICBjb25zdCBmbGlwcGVyID0gY3NzKHtcbiAgICAnJiA+IGRpdi5zbGlkZXIgPiBkaXYnOiB7XG4gICAgICBiYWNrZ3JvdW5kOiB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmQsXG4gICAgICBjb2xvcjogdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvcixcbiAgICAgIG91dGxpbmU6IDBcbiAgICB9LFxuXG4gICAgJyY6ZGlzYWJsZWQgPiBkaXYuc2xpZGVyID4gZGl2Jzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmRPbkRpc2FibGVkLFxuICAgICAgY29sb3I6IHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3JPbkRpc2FibGVkXG4gICAgfSxcblxuICAgICcmOmZvY3VzID4gZGl2LnNsaWRlciA+IGRpdic6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kT25Gb2N1cyxcbiAgICAgIGNvbG9yOiB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yT25Gb2N1c1xuICAgIH0sXG5cbiAgICAnJjpob3ZlciA+IGRpdi5zbGlkZXIgPiBkaXYnOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQmFja2dyb3VuZE9uSG92ZXIsXG4gICAgICBjb2xvcjogdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvck9uSG92ZXJcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IGxlZnRGbGlwcGVyID0gY3NzKG9yaWdpbmFsU3R5bGVTZXQubGVmdEZsaXBwZXIsIGZsaXBwZXIpO1xuICBjb25zdCByaWdodEZsaXBwZXIgPSBjc3Mob3JpZ2luYWxTdHlsZVNldC5yaWdodEZsaXBwZXIsIGZsaXBwZXIpO1xuICBjb25zdCBjYXJvdXNlbCA9IGNzcyhvcmlnaW5hbFN0eWxlU2V0LmNhcm91c2VsLCB7XG4gICAgJyY6aG92ZXIsICYuc2Nyb2xsaW5nJzoge1xuICAgICAgW2AmIC4keyBsZWZ0RmxpcHBlciArICcnIH0gPiBkaXYuc2xpZGVyLCAmIC4keyByaWdodEZsaXBwZXIgKyAnJyB9ID4gZGl2LnNsaWRlcmBdOiB7XG4gICAgICAgIHRyYW5zaXRpb25EZWxheTogJzBzJ1xuICAgICAgfSxcbiAgICAgIFtgJiAuJHsgbGVmdEZsaXBwZXIgKyAnJyB9ID4gZGl2LnNsaWRlcmBdOiB7IGxlZnQ6IDAgfSxcbiAgICAgIFtgJiAuJHsgcmlnaHRGbGlwcGVyICsgJycgfSA+IGRpdi5zbGlkZXJgXTogeyByaWdodDogMCB9XG4gICAgfSxcblxuICAgICcmID4gZGl2Jzoge1xuICAgICAgc2Nyb2xsYmFyV2lkdGg6ICdub25lJyxcblxuICAgICAgJyYgPiB1bCA+IGxpJzoge1xuICAgICAgICAnJjpmaXJzdC1jaGlsZCc6IHtcbiAgICAgICAgICBwYWRkaW5nTGVmdDogcGFkZGluZ1JlZ3VsYXIgLyAyXG4gICAgICAgIH0sXG5cbiAgICAgICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgICAgICBwYWRkaW5nUmlnaHQ6IHBhZGRpbmdSZWd1bGFyIC8gMlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyBUaGlzIGlzIG5vdCBDU1MsIGJ1dCBvcHRpb25zIHRvIGNyZWF0ZSBzdHlsZSBzZXQgZm9yIHJlYWN0LWZpbG1cbiAgcmV0dXJuIHtcbiAgICAuLi5vcmlnaW5hbFN0eWxlU2V0LFxuXG4gICAgY2Fyb3VzZWwsXG4gICAgbGVmdEZsaXBwZXIsXG4gICAgcmlnaHRGbGlwcGVyXG4gIH07XG59XG4iXX0=