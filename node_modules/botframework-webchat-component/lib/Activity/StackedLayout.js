"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectStackedLayout = exports.default = void 0;

var _glamor = require("glamor");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _Localize = require("../Localization/Localize");

var _Avatar = _interopRequireDefault(require("./Avatar"));

var _Bubble = _interopRequireDefault(require("./Bubble"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _SendStatus = _interopRequireDefault(require("./SendStatus"));

var _textFormatToContentType = _interopRequireDefault(require("../Utils/textFormatToContentType"));

var _Timestamp = _interopRequireDefault(require("./Timestamp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _Constants$ActivityCl = _botframeworkWebchatCore.Constants.ActivityClientState,
    SENDING = _Constants$ActivityCl.SENDING,
    SEND_FAILED = _Constants$ActivityCl.SEND_FAILED;
var ROOT_CSS = (0, _glamor.css)({
  display: 'flex',
  '& > .avatar': {
    flexShrink: 0
  },
  '& > .content': {
    flexGrow: 1,
    overflow: 'hidden',
    '& > .webchat__row': {
      display: 'flex',
      '& > .bubble, & > .timestamp': {
        flexGrow: 1,
        overflow: 'hidden'
      },
      '& > .filler': {
        flexGrow: 10000,
        flexShrink: 1
      }
    }
  },
  '& > .filler': {
    flexShrink: 0
  },
  '&.from-user': {
    flexDirection: 'row-reverse',
    '& > .content > .webchat__row': {
      flexDirection: 'row-reverse'
    }
  }
});

var connectStackedLayout = function connectStackedLayout() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref, _ref2) {
    var language = _ref.language,
        _ref$styleSet$options = _ref.styleSet.options,
        botAvatarInitials = _ref$styleSet$options.botAvatarInitials,
        userAvatarInitials = _ref$styleSet$options.userAvatarInitials;
    var activity = _ref2.activity;
    return {
      avatarInitials: activity.from && activity.from.role === 'user' ? userAvatarInitials : botAvatarInitials,
      language: language,
      // TODO: [P4] We want to deprecate botAvatarInitials/userAvatarInitials because they are not as helpful as avatarInitials
      botAvatarInitials: botAvatarInitials,
      userAvatarInitials: userAvatarInitials
    };
  }].concat(selectors));
};

exports.connectStackedLayout = connectStackedLayout;

var _default = connectStackedLayout(function (_ref3) {
  var avatarInitials = _ref3.avatarInitials,
      language = _ref3.language,
      styleSet = _ref3.styleSet;
  return {
    avatarInitials: avatarInitials,
    language: language,
    styleSet: styleSet
  };
})(function (_ref4) {
  var activity = _ref4.activity,
      avatarInitials = _ref4.avatarInitials,
      children = _ref4.children,
      language = _ref4.language,
      styleSet = _ref4.styleSet,
      timestampClassName = _ref4.timestampClassName;
  var fromUser = activity.from.role === 'user';

  var _ref5 = activity.channelData || {},
      state = _ref5.state;

  var showSendStatus = state === SENDING || state === SEND_FAILED;
  var ariaLabel = (0, _Localize.localize)(fromUser ? 'User said something' : 'Bot said something', language, avatarInitials, activity.text, activity.timestamp);
  var activityDisplayText = activity.channelData && activity.channelData.messageBack && activity.channelData.messageBack.displayText || activity.text;
  return _react.default.createElement("div", {
    className: (0, _classnames.default)(ROOT_CSS + '', styleSet.stackedLayout + '', {
      'from-user': fromUser
    })
  }, _react.default.createElement(_Avatar.default, {
    "aria-hidden": true,
    className: "avatar",
    fromUser: fromUser
  }), _react.default.createElement("div", {
    className: "content"
  }, activity.type === 'typing' ? _react.default.createElement("div", {
    className: "webchat__row typing"
  }, children({
    activity: activity,
    attachment: {
      contentType: 'typing'
    }
  }), _react.default.createElement("div", {
    className: "filler"
  })) : !!activityDisplayText && _react.default.createElement("div", {
    className: "webchat__row message"
  }, _react.default.createElement(_Bubble.default, {
    "aria-label": ariaLabel,
    className: "bubble",
    fromUser: fromUser
  }, children({
    activity: activity,
    attachment: {
      contentType: (0, _textFormatToContentType.default)(activity.textFormat),
      content: activityDisplayText
    }
  })), _react.default.createElement("div", {
    className: "filler"
  })), (activity.attachments || []).map(function (attachment, index) {
    return _react.default.createElement("div", {
      className: "webchat__row attachment",
      key: index
    }, _react.default.createElement(_Bubble.default, {
      className: "attachment bubble",
      fromUser: fromUser,
      key: index
    }, children({
      attachment: attachment
    })));
  }), _react.default.createElement("div", {
    "aria-hidden": true,
    className: "webchat__row"
  }, showSendStatus ? _react.default.createElement(_SendStatus.default, {
    activity: activity,
    className: "timestamp"
  }) : _react.default.createElement(_Timestamp.default, {
    activity: activity,
    className: (0, _classnames.default)('timestamp', timestampClassName)
  }), _react.default.createElement("div", {
    className: "filler"
  }))), _react.default.createElement("div", {
    className: "filler"
  }));
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,