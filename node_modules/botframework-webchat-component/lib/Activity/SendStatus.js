"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectSendStatus = exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _Localize = _interopRequireWildcard(require("../Localization/Localize"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _Constants$ActivityCl = _botframeworkWebchatCore.Constants.ActivityClientState,
    SEND_FAILED = _Constants$ActivityCl.SEND_FAILED,
    SENDING = _Constants$ActivityCl.SENDING; // TODO: [P4] Currently, this is the only place which use a templated string
//       We could refactor this into a general component if there are more templated strings

function sendFailed(language, replace) {
  var text = (0, _Localize.localize)('SEND_FAILED_KEY', language);
  var retry = (0, _Localize.localize)('Retry', language);
  var match = /\{Retry\}/.exec(text);

  if (match) {
    return _react.default.createElement(_react.default.Fragment, null, text.substr(0, match.index), replace(retry), text.substr(match.index + match[0].length));
  } else {
    return text;
  }
}

var connectSendStatus = function connectSendStatus() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref, _ref2) {
    var focusSendBox = _ref.focusSendBox,
        language = _ref.language,
        postActivity = _ref.postActivity;
    var activity = _ref2.activity;
    return {
      language: language,
      retrySend: function retrySend(evt) {
        evt.preventDefault();
        postActivity(activity); // After clicking on "retry", the button will be gone and focus will be lost (back to document.body)
        // We want to make sure the user stay inside Web Chat

        focusSendBox();
      }
    };
  }].concat(selectors));
};

exports.connectSendStatus = connectSendStatus;

var _default = connectSendStatus(function (_ref3) {
  var styleSet = _ref3.styleSet;
  return {
    styleSet: styleSet
  };
})(function (_ref4) {
  var _ref4$activity$channe = _ref4.activity.channelData;
  _ref4$activity$channe = _ref4$activity$channe === void 0 ? {} : _ref4$activity$channe;
  var state = _ref4$activity$channe.state,
      language = _ref4.language,
      retrySend = _ref4.retrySend,
      styleSet = _ref4.styleSet;
  return _react.default.createElement("span", {
    "aria-live": "polite",
    className: styleSet.sendStatus
  }, state === SENDING ? _react.default.createElement(_Localize.default, {
    text: "Sending"
  }) : state === SEND_FAILED ? sendFailed(language, function (retry) {
    return _react.default.createElement("button", {
      onClick: retrySend,
      type: "button"
    }, retry);
  }) : false);
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BY3Rpdml0eS9TZW5kU3RhdHVzLmpzIl0sIm5hbWVzIjpbIkNvbnN0YW50cyIsIkFjdGl2aXR5Q2xpZW50U3RhdGUiLCJTRU5EX0ZBSUxFRCIsIlNFTkRJTkciLCJzZW5kRmFpbGVkIiwibGFuZ3VhZ2UiLCJyZXBsYWNlIiwidGV4dCIsInJldHJ5IiwibWF0Y2giLCJleGVjIiwic3Vic3RyIiwiaW5kZXgiLCJsZW5ndGgiLCJjb25uZWN0U2VuZFN0YXR1cyIsInNlbGVjdG9ycyIsImNvbm5lY3RUb1dlYkNoYXQiLCJmb2N1c1NlbmRCb3giLCJwb3N0QWN0aXZpdHkiLCJhY3Rpdml0eSIsInJldHJ5U2VuZCIsImV2dCIsInByZXZlbnREZWZhdWx0Iiwic3R5bGVTZXQiLCJjaGFubmVsRGF0YSIsInN0YXRlIiwic2VuZFN0YXR1cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQUVBOztBQUNBOzs7Ozs7NEJBRTBEQSxrQyxDQUFsREMsbUI7SUFBdUJDLFcseUJBQUFBLFc7SUFBYUMsTyx5QkFBQUEsTyxFQUU1QztBQUNBOztBQUNBLFNBQVNDLFVBQVQsQ0FBb0JDLFFBQXBCLEVBQThCQyxPQUE5QixFQUF1QztBQUNyQyxNQUFNQyxJQUFJLEdBQUcsd0JBQVMsaUJBQVQsRUFBNEJGLFFBQTVCLENBQWI7QUFDQSxNQUFNRyxLQUFLLEdBQUcsd0JBQVMsT0FBVCxFQUFrQkgsUUFBbEIsQ0FBZDtBQUNBLE1BQU1JLEtBQUssR0FBRyxZQUFZQyxJQUFaLENBQWlCSCxJQUFqQixDQUFkOztBQUVBLE1BQUlFLEtBQUosRUFBVztBQUNULFdBQ0UsNkJBQUMsY0FBRCxDQUFPLFFBQVAsUUFDSUYsSUFBSSxDQUFDSSxNQUFMLENBQVksQ0FBWixFQUFlRixLQUFLLENBQUNHLEtBQXJCLENBREosRUFFSU4sT0FBTyxDQUFDRSxLQUFELENBRlgsRUFHSUQsSUFBSSxDQUFDSSxNQUFMLENBQVlGLEtBQUssQ0FBQ0csS0FBTixHQUFjSCxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVNJLE1BQW5DLENBSEosQ0FERjtBQU9ELEdBUkQsTUFRTztBQUNMLFdBQU9OLElBQVA7QUFDRDtBQUNGOztBQUVELElBQU1PLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0I7QUFBQSxvQ0FBSUMsU0FBSjtBQUFJQSxJQUFBQSxTQUFKO0FBQUE7O0FBQUEsU0FBa0JDLHlDQUMxQztBQUFBLFFBQ0VDLFlBREYsUUFDRUEsWUFERjtBQUFBLFFBRUVaLFFBRkYsUUFFRUEsUUFGRjtBQUFBLFFBR0VhLFlBSEYsUUFHRUEsWUFIRjtBQUFBLFFBS0VDLFFBTEYsU0FLRUEsUUFMRjtBQUFBLFdBTU87QUFDTGQsTUFBQUEsUUFBUSxFQUFSQSxRQURLO0FBRUxlLE1BQUFBLFNBQVMsRUFBRSxtQkFBQUMsR0FBRyxFQUFJO0FBQ2hCQSxRQUFBQSxHQUFHLENBQUNDLGNBQUo7QUFFQUosUUFBQUEsWUFBWSxDQUFDQyxRQUFELENBQVosQ0FIZ0IsQ0FLaEI7QUFDQTs7QUFDQUYsUUFBQUEsWUFBWTtBQUNiO0FBVkksS0FOUDtBQUFBLEdBRDBDLFNBbUJ2Q0YsU0FuQnVDLEVBQWxCO0FBQUEsQ0FBMUI7Ozs7ZUFzQmVELGlCQUFpQixDQUM5QjtBQUFBLE1BQUdTLFFBQUgsU0FBR0EsUUFBSDtBQUFBLFNBQW1CO0FBQUVBLElBQUFBLFFBQVEsRUFBUkE7QUFBRixHQUFuQjtBQUFBLENBRDhCLENBQWpCLENBR2I7QUFBQSxvQ0FDRUosUUFERixDQUNjSyxXQURkO0FBQUEsNkRBQ3VDLEVBRHZDO0FBQUEsTUFDNkJDLEtBRDdCLHlCQUM2QkEsS0FEN0I7QUFBQSxNQUVFcEIsUUFGRixTQUVFQSxRQUZGO0FBQUEsTUFHRWUsU0FIRixTQUdFQSxTQUhGO0FBQUEsTUFJRUcsUUFKRixTQUlFQSxRQUpGO0FBQUEsU0FNRTtBQUFNLGlCQUFVLFFBQWhCO0FBQXlCLElBQUEsU0FBUyxFQUFHQSxRQUFRLENBQUNHO0FBQTlDLEtBRUlELEtBQUssS0FBS3RCLE9BQVYsR0FDRSw2QkFBQyxpQkFBRDtBQUFVLElBQUEsSUFBSSxFQUFDO0FBQWYsSUFERixHQUVFc0IsS0FBSyxLQUFLdkIsV0FBVixHQUNBRSxVQUFVLENBQ1JDLFFBRFEsRUFFUixVQUFBRyxLQUFLO0FBQUEsV0FDSDtBQUNFLE1BQUEsT0FBTyxFQUFHWSxTQURaO0FBRUUsTUFBQSxJQUFJLEVBQUM7QUFGUCxPQUlJWixLQUpKLENBREc7QUFBQSxHQUZHLENBRFYsR0FZQSxLQWhCTixDQU5GO0FBQUEsQ0FIYSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSAnYm90ZnJhbWV3b3JrLXdlYmNoYXQtY29yZSc7XG5cbmltcG9ydCBjb25uZWN0VG9XZWJDaGF0IGZyb20gJy4uL2Nvbm5lY3RUb1dlYkNoYXQnO1xuaW1wb3J0IExvY2FsaXplLCB7IGxvY2FsaXplIH0gZnJvbSAnLi4vTG9jYWxpemF0aW9uL0xvY2FsaXplJztcblxuY29uc3QgeyBBY3Rpdml0eUNsaWVudFN0YXRlOiB7IFNFTkRfRkFJTEVELCBTRU5ESU5HIH0gfSA9IENvbnN0YW50cztcblxuLy8gVE9ETzogW1A0XSBDdXJyZW50bHksIHRoaXMgaXMgdGhlIG9ubHkgcGxhY2Ugd2hpY2ggdXNlIGEgdGVtcGxhdGVkIHN0cmluZ1xuLy8gICAgICAgV2UgY291bGQgcmVmYWN0b3IgdGhpcyBpbnRvIGEgZ2VuZXJhbCBjb21wb25lbnQgaWYgdGhlcmUgYXJlIG1vcmUgdGVtcGxhdGVkIHN0cmluZ3NcbmZ1bmN0aW9uIHNlbmRGYWlsZWQobGFuZ3VhZ2UsIHJlcGxhY2UpIHtcbiAgY29uc3QgdGV4dCA9IGxvY2FsaXplKCdTRU5EX0ZBSUxFRF9LRVknLCBsYW5ndWFnZSk7XG4gIGNvbnN0IHJldHJ5ID0gbG9jYWxpemUoJ1JldHJ5JywgbGFuZ3VhZ2UpO1xuICBjb25zdCBtYXRjaCA9IC9cXHtSZXRyeVxcfS8uZXhlYyh0ZXh0KTtcblxuICBpZiAobWF0Y2gpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICB7IHRleHQuc3Vic3RyKDAsIG1hdGNoLmluZGV4KSB9XG4gICAgICAgIHsgcmVwbGFjZShyZXRyeSkgfVxuICAgICAgICB7IHRleHQuc3Vic3RyKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKSB9XG4gICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cbn1cblxuY29uc3QgY29ubmVjdFNlbmRTdGF0dXMgPSAoLi4uc2VsZWN0b3JzKSA9PiBjb25uZWN0VG9XZWJDaGF0KFxuICAoe1xuICAgIGZvY3VzU2VuZEJveCxcbiAgICBsYW5ndWFnZSxcbiAgICBwb3N0QWN0aXZpdHlcbiAgfSwge1xuICAgIGFjdGl2aXR5XG4gIH0pID0+ICh7XG4gICAgbGFuZ3VhZ2UsXG4gICAgcmV0cnlTZW5kOiBldnQgPT4ge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIHBvc3RBY3Rpdml0eShhY3Rpdml0eSk7XG5cbiAgICAgIC8vIEFmdGVyIGNsaWNraW5nIG9uIFwicmV0cnlcIiwgdGhlIGJ1dHRvbiB3aWxsIGJlIGdvbmUgYW5kIGZvY3VzIHdpbGwgYmUgbG9zdCAoYmFjayB0byBkb2N1bWVudC5ib2R5KVxuICAgICAgLy8gV2Ugd2FudCB0byBtYWtlIHN1cmUgdGhlIHVzZXIgc3RheSBpbnNpZGUgV2ViIENoYXRcbiAgICAgIGZvY3VzU2VuZEJveCgpO1xuICAgIH1cbiAgfSksXG4gIC4uLnNlbGVjdG9yc1xuKVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0U2VuZFN0YXR1cyhcbiAgKHsgc3R5bGVTZXQgfSkgPT4gKHsgc3R5bGVTZXQgfSlcbikoXG4gICh7XG4gICAgYWN0aXZpdHk6IHsgY2hhbm5lbERhdGE6IHsgc3RhdGUgfSA9IHt9IH0sXG4gICAgbGFuZ3VhZ2UsXG4gICAgcmV0cnlTZW5kLFxuICAgIHN0eWxlU2V0XG4gIH0pID0+XG4gICAgPHNwYW4gYXJpYS1saXZlPVwicG9saXRlXCIgY2xhc3NOYW1lPXsgc3R5bGVTZXQuc2VuZFN0YXR1cyB9PlxuICAgICAge1xuICAgICAgICBzdGF0ZSA9PT0gU0VORElORyA/XG4gICAgICAgICAgPExvY2FsaXplIHRleHQ9XCJTZW5kaW5nXCIgLz5cbiAgICAgICAgOiBzdGF0ZSA9PT0gU0VORF9GQUlMRUQgP1xuICAgICAgICAgIHNlbmRGYWlsZWQoXG4gICAgICAgICAgICBsYW5ndWFnZSxcbiAgICAgICAgICAgIHJldHJ5ID0+XG4gICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsgcmV0cnlTZW5kIH1cbiAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHsgcmV0cnkgfVxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICApXG4gICAgICAgIDpcbiAgICAgICAgICBmYWxzZVxuICAgICAgfVxuICAgIDwvc3Bhbj5cbilcblxuZXhwb3J0IHsgY29ubmVjdFNlbmRTdGF0dXMgfVxuIl19