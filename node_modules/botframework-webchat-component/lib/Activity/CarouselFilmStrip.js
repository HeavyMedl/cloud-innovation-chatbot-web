"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectCarouselFilmStrip = exports.default = void 0;

var _glamor = require("glamor");

var _reactFilm = require("react-film");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _Localize = require("../Localization/Localize");

var _Avatar = _interopRequireDefault(require("./Avatar"));

var _Bubble = _interopRequireDefault(require("./Bubble"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _SendStatus = _interopRequireDefault(require("./SendStatus"));

var _textFormatToContentType = _interopRequireDefault(require("../Utils/textFormatToContentType"));

var _Timestamp = _interopRequireDefault(require("./Timestamp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _Constants$ActivityCl = _botframeworkWebchatCore.Constants.ActivityClientState,
    SENDING = _Constants$ActivityCl.SENDING,
    SEND_FAILED = _Constants$ActivityCl.SEND_FAILED;
var ROOT_CSS = (0, _glamor.css)({
  display: 'flex',
  MsOverflowStyle: 'none',
  overflowX: 'scroll',
  overflowY: 'hidden',
  touchAction: 'manipulation',
  WebkitOverflowScrolling: 'touch',
  '&::-webkit-scrollbar': {
    display: 'none'
  },
  '& > .avatar': {
    flexShrink: 0
  },
  '& > .content': {
    flex: 1,
    '& > .message': {
      display: 'flex',
      '& > .bubble': {
        flexGrow: 1,
        overflow: 'hidden'
      },
      '& > .filler': {
        flexGrow: 10000,
        flexShrink: 1
      }
    },
    '& > ul': {
      display: 'flex',
      listStyleType: 'none',
      margin: 0,
      padding: 0,
      '& > li': {
        flex: 1
      }
    }
  }
});

var connectCarouselFilmStrip = function connectCarouselFilmStrip() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref, _ref2) {
    var language = _ref.language,
        _ref$styleSet$options = _ref.styleSet.options,
        botAvatarInitials = _ref$styleSet$options.botAvatarInitials,
        userAvatarInitials = _ref$styleSet$options.userAvatarInitials;
    var activity = _ref2.activity;
    return {
      avatarInitials: activity.from && activity.from.role === 'user' ? userAvatarInitials : botAvatarInitials,
      language: language
    };
  }].concat(selectors));
};

exports.connectCarouselFilmStrip = connectCarouselFilmStrip;
var ConnectedCarouselFilmStrip = connectCarouselFilmStrip(function (_ref3) {
  var avatarInitials = _ref3.avatarInitials,
      language = _ref3.language,
      styleSet = _ref3.styleSet;
  return {
    avatarInitials: avatarInitials,
    language: language,
    styleSet: styleSet
  };
})(function (_ref4) {
  var activity = _ref4.activity,
      avatarInitials = _ref4.avatarInitials,
      children = _ref4.children,
      language = _ref4.language,
      className = _ref4.className,
      itemContainerRef = _ref4.itemContainerRef,
      scrollableRef = _ref4.scrollableRef,
      styleSet = _ref4.styleSet,
      timestampClassName = _ref4.timestampClassName;
  var fromUser = activity.from.role === 'user';
  var ariaLabel = (0, _Localize.localize)('Bot said something', language, avatarInitials, activity.text, activity.timestamp);
  var activityDisplayText = activity.channelData && activity.channelData.messageBack && activity.channelData.messageBack.displayText || activity.text;
  return _react.default.createElement("div", {
    className: (0, _classnames.default)(ROOT_CSS + '', styleSet.carouselFilmStrip + '', (className || '') + ''),
    ref: scrollableRef
  }, _react.default.createElement(_Avatar.default, {
    "aria-hidden": true,
    className: "avatar",
    fromUser: fromUser
  }), _react.default.createElement("div", {
    className: "content"
  }, !!activityDisplayText && _react.default.createElement("div", {
    className: "message"
  }, _react.default.createElement(_Bubble.default, {
    "aria-label": ariaLabel,
    className: "bubble",
    fromUser: fromUser
  }, children({
    activity: activity,
    attachment: {
      contentType: (0, _textFormatToContentType.default)(activity.textFormat),
      content: activityDisplayText
    }
  })), _react.default.createElement("div", {
    className: "filler"
  })), _react.default.createElement("ul", {
    ref: itemContainerRef
  }, activity.attachments.map(function (attachment, index) {
    return _react.default.createElement("li", {
      key: index
    }, _react.default.createElement(_Bubble.default, {
      fromUser: fromUser,
      key: index
    }, children({
      attachment: attachment
    })));
  })), _react.default.createElement("div", {
    "aria-hidden": true,
    className: "webchat__row"
  }, activity.channelData && (activity.channelData.state === SENDING || activity.channelData.state === SEND_FAILED) ? _react.default.createElement(_SendStatus.default, {
    activity: activity
  }) : _react.default.createElement(_Timestamp.default, {
    activity: activity,
    className: timestampClassName
  }))));
});

var _default = function _default(props) {
  return _react.default.createElement(_reactFilm.Context.Consumer, null, function (_ref5) {
    var itemContainerRef = _ref5.itemContainerRef,
        scrollableRef = _ref5.scrollableRef;
    return _react.default.createElement(ConnectedCarouselFilmStrip, _extends({
      itemContainerRef: itemContainerRef,
      scrollableRef: scrollableRef
    }, props));
  });
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,