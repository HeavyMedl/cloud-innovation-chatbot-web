"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AdaptiveCardBuilder = void 0;

var _adaptivecards = require("adaptivecards");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function addCardAction(cardAction, includesOAuthButtons) {
  var type = cardAction.type;

  if (type === 'imBack' || type === 'messageBack' || type === 'postBack' || type === 'signin' && includesOAuthButtons) {
    var action = new _adaptivecards.SubmitAction();
    action.data = {
      __isBotFrameworkCardAction: true,
      cardAction: cardAction
    };
    action.title = cardAction.title;
    return action;
  } else {
    var _action = new _adaptivecards.OpenUrlAction();

    _action.title = cardAction.title;
    _action.url = cardAction.type === 'call' ? 'tel:' + cardAction.value : cardAction.value;
    return _action;
  }
}

var AdaptiveCardBuilder =
/*#__PURE__*/
function () {
  function AdaptiveCardBuilder(adaptiveCards) {
    _classCallCheck(this, AdaptiveCardBuilder);

    _defineProperty(this, "card", void 0);

    _defineProperty(this, "container", void 0);

    this.card = new adaptiveCards.AdaptiveCard();
    this.container = new _adaptivecards.Container();
    this.card.addItem(this.container);
  }

  _createClass(AdaptiveCardBuilder, [{
    key: "addColumnSet",
    value: function addColumnSet(sizes) {
      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;
      var columnSet = new _adaptivecards.ColumnSet();
      container.addItem(columnSet);
      return sizes.map(function (size) {
        var column = new _adaptivecards.Column();
        column.width = _adaptivecards.SizeAndUnit.parse(size);
        columnSet.addColumn(column);
        return column;
      });
    }
  }, {
    key: "addItems",
    value: function addItems(cardElements) {
      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;
      cardElements.forEach(function (cardElement) {
        return container.addItem(cardElement);
      });
    }
  }, {
    key: "addTextBlock",
    value: function addTextBlock(text, template) {
      var container = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.container;

      if (typeof text !== 'undefined') {
        var textblock = new _adaptivecards.TextBlock(); // tslint:disable-next-line:forin

        for (var prop in template) {
          textblock[prop] = template[prop];
        }

        textblock.speak = text;
        textblock.text = text;
        container.addItem(textblock);
      }
    }
  }, {
    key: "addButtons",
    value: function addButtons(cardActions, includesOAuthButtons) {
      var _this = this;

      cardActions && cardActions.forEach(function (cardAction) {
        _this.card.addAction(addCardAction(cardAction, includesOAuthButtons));
      });
    }
  }, {
    key: "addCommonHeaders",
    value: function addCommonHeaders(content) {
      this.addTextBlock(content.title, {
        size: _adaptivecards.TextSize.Medium,
        weight: _adaptivecards.TextWeight.Bolder
      });
      this.addTextBlock(content.subtitle, {
        isSubtle: true,
        wrap: true
      });
      this.addTextBlock(content.text, {
        wrap: true
      });
    }
  }, {
    key: "addCommon",
    value: function addCommon(content) {
      this.addCommonHeaders(content);
      this.addButtons(content.buttons);
    }
  }, {
    key: "addImage",
    value: function addImage(url, container, selectAction) {
      container = container || this.container;
      var image = new _adaptivecards.Image();
      image.url = url;
      image.selectAction = selectAction && addCardAction(selectAction);
      image.size = _adaptivecards.Size.Stretch;
      container.addItem(image);
    }
  }]);

  return AdaptiveCardBuilder;
}();

exports.AdaptiveCardBuilder = AdaptiveCardBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,