"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _Localize = require("../Localization/Localize");

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _ErrorBox = _interopRequireDefault(require("../ErrorBox"));

var _getTabIndex = _interopRequireDefault(require("../Utils/TypeFocusSink/getTabIndex"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var AdaptiveCardRenderer =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(AdaptiveCardRenderer, _React$PureComponent);

  function AdaptiveCardRenderer(props) {
    var _this;

    _classCallCheck(this, AdaptiveCardRenderer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdaptiveCardRenderer).call(this, props));
    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));
    _this.handleExecuteAction = _this.handleExecuteAction.bind(_assertThisInitialized(_this));
    _this.contentRef = _react.default.createRef();
    _this.state = {
      error: null
    };
    return _this;
  }

  _createClass(AdaptiveCardRenderer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.renderCard();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.adaptiveCard !== this.props.adaptiveCard) {
        this.renderCard();
      }
    }
  }, {
    key: "handleClick",
    value: function handleClick(_ref) {
      var target = _ref.target;

      // Some items, e.g. tappable text, cannot be disabled thru DOM attributes
      if (this.props.disabled) {
        return;
      }

      var tabIndex = (0, _getTabIndex.default)(target); // If the user is clicking on something that is already clickable, do not allow them to click the card.
      // E.g. a hero card can be tappable, and image and buttons inside the hero card can also be tappable.

      if (typeof tabIndex !== 'number' || tabIndex < 0) {
        var _this$props = this.props,
            onCardAction = _this$props.onCardAction,
            tapAction = _this$props.tapAction;
        tapAction && onCardAction(tapAction);
      }
    }
  }, {
    key: "handleExecuteAction",
    value: function handleExecuteAction(action) {
      var props = this.props; // Some items, e.g. tappable image, cannot be disabled thru DOM attributes

      if (props.disabled) {
        return;
      }

      var actionTypeName = action.getJsonTypeName();

      if (actionTypeName === 'Action.OpenUrl') {
        props.onCardAction({
          type: 'openUrl',
          value: action.url
        });
      } else if (actionTypeName === 'Action.Submit') {
        if (typeof action.data !== 'undefined') {
          var actionData = action.data;

          if (actionData && actionData.__isBotFrameworkCardAction) {
            var cardAction = actionData.cardAction;
            var displayText = cardAction.displayText,
                type = cardAction.type,
                value = cardAction.value;
            props.onCardAction({
              displayText: displayText,
              type: type,
              value: value
            });
          } else {
            props.onCardAction({
              type: typeof action.data === 'string' ? 'imBack' : 'postBack',
              value: action.data
            });
          }
        }
      } else {
        console.error("Web Chat: received unknown action from Adaptive Cards");
        console.error(action);
      }
    }
  }, {
    key: "renderCard",
    value: function renderCard() {
      var current = this.contentRef.current;
      var _this$props2 = this.props,
          adaptiveCard = _this$props2.adaptiveCard,
          adaptiveCardHostConfig = _this$props2.adaptiveCardHostConfig,
          renderMarkdown = _this$props2.renderMarkdown;

      if (current && adaptiveCard) {
        // Currently, the only way to set the Markdown engine is to set it thru static member of AdaptiveCard class
        // TODO: [P3] Checks if we could make the "renderMarkdown" per card
        //       This could be limitations from Adaptive Cards package
        //       Because there could be timing difference between .parse and .render, we could be using wrong Markdown engine
        adaptiveCard.constructor.onProcessMarkdown = function (text, result) {
          if (renderMarkdown) {
            result.outputHtml = renderMarkdown(text);
            result.didProcess = true;
          }
        };

        adaptiveCard.hostConfig = adaptiveCardHostConfig;
        adaptiveCard.onExecuteAction = this.handleExecuteAction;
        var errors = adaptiveCard.validate();

        if (errors.length) {
          return this.setState(function () {
            return {
              error: errors
            };
          });
        }

        var element;

        try {
          element = adaptiveCard.render();
        } catch (err) {
          return this.setState(function () {
            return {
              errors: err
            };
          });
        }

        if (!element) {
          return this.setState(function () {
            return {
              error: 'Adaptive Card rendered as empty element'
            };
          });
        }

        if (this.state.error) {
          this.setState(function () {
            return {
              error: null
            };
          });
        }

        if (this.props.disabled) {
          var hyperlinks = element.querySelectorAll('a');
          var inputs = element.querySelectorAll('button, input, select, textarea');
          [].forEach.call(inputs, function (input) {
            input.disabled = true;
          });
          [].forEach.call(hyperlinks, function (hyperlink) {
            hyperlink.addEventListener('click', function (event) {
              event.preventDefault();
              event.stopImmediatePropagation();
              event.stopPropagation();
            });
          });
        }

        var firstChild = current.children[0];

        if (firstChild) {
          current.replaceChild(element, firstChild);
        } else {
          current.appendChild(element);
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          language = _this$props3.language,
          styleSet = _this$props3.styleSet,
          error = this.state.error;
      return error ? _react.default.createElement(_ErrorBox.default, {
        message: (0, _Localize.localize)('Adaptive Card render error', language)
      }, _react.default.createElement("pre", null, JSON.stringify(error, null, 2))) : _react.default.createElement("div", {
        className: styleSet.adaptiveCardRenderer,
        onClick: this.handleClick,
        ref: this.contentRef
      });
    }
  }]);

  return AdaptiveCardRenderer;
}(_react.default.PureComponent);

var _default = (0, _connectToWebChat.default)(function (_ref2) {
  var adaptiveCardHostConfig = _ref2.adaptiveCardHostConfig,
      disabled = _ref2.disabled,
      language = _ref2.language,
      onCardAction = _ref2.onCardAction,
      renderMarkdown = _ref2.renderMarkdown,
      styleSet = _ref2.styleSet,
      tapAction = _ref2.tapAction;
  return {
    adaptiveCardHostConfig: adaptiveCardHostConfig,
    disabled: disabled,
    language: language,
    onCardAction: onCardAction,
    renderMarkdown: renderMarkdown,
    styleSet: styleSet,
    tapAction: tapAction
  };
})(AdaptiveCardRenderer);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,