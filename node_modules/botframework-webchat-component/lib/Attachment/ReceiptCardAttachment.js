"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _memoizeOne = _interopRequireDefault(require("memoize-one"));

var _react = _interopRequireDefault(require("react"));

var _AdaptiveCardBuilder = require("../Utils/AdaptiveCardBuilder");

var _Localize = require("../Localization/Localize");

var _AdaptiveCardRenderer = _interopRequireDefault(require("./AdaptiveCardRenderer"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function nullOrUndefined(obj) {
  return obj === null || typeof obj === 'undefined';
}

var ReceiptCardAttachment =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ReceiptCardAttachment, _React$Component);

  function ReceiptCardAttachment(props) {
    var _this;

    _classCallCheck(this, ReceiptCardAttachment);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReceiptCardAttachment).call(this, props));
    _this.buildCard = (0, _memoizeOne.default)(function (adaptiveCards, content, language) {
      var builder = new _AdaptiveCardBuilder.AdaptiveCardBuilder(adaptiveCards);
      var HorizontalAlignment = adaptiveCards.HorizontalAlignment,
          TextSize = adaptiveCards.TextSize,
          TextWeight = adaptiveCards.TextWeight;
      builder.addTextBlock(content.title, {
        size: TextSize.Medium,
        weight: TextWeight.Bolder
      });
      var columns = builder.addColumnSet([75, 25]); // tslint:disable-next-line:no-unused-expression

      content.facts && content.facts.map(function (fact) {
        builder.addTextBlock(fact.key, {
          size: TextSize.Medium
        }, columns[0]);
        builder.addTextBlock(fact.value, {
          size: TextSize.Medium,
          horizontalAlignment: HorizontalAlignment.Right
        }, columns[1]);
      }); // tslint:disable-next-line:no-unused-expression

      content.items && content.items.map(function (item) {
        if (item.image) {
          var _columns = builder.addColumnSet([15, 75, 10]);

          builder.addImage(item.image.url, _columns[0], item.image.tap);
          builder.addTextBlock(item.title, {
            size: TextSize.Medium,
            weight: TextWeight.Bolder,
            wrap: true
          }, _columns[1]);
          builder.addTextBlock(item.subtitle, {
            size: TextSize.Medium,
            wrap: true
          }, _columns[1]);
          builder.addTextBlock(item.price, {
            horizontalAlignment: HorizontalAlignment.Right
          }, _columns[2]);
        } else {
          var _columns2 = builder.addColumnSet([75, 25]);

          builder.addTextBlock(item.title, {
            size: TextSize.Medium,
            weight: TextWeight.Bolder,
            wrap: true
          }, _columns2[0]);
          builder.addTextBlock(item.subtitle, {
            size: TextSize.Medium,
            wrap: true
          }, _columns2[0]);
          builder.addTextBlock(item.price, {
            horizontalAlignment: HorizontalAlignment.Right
          }, _columns2[1]);
        }
      });

      if (!nullOrUndefined(content.vat)) {
        var vatCol = builder.addColumnSet([75, 25]);
        builder.addTextBlock((0, _Localize.localize)('VAT', language), {
          size: TextSize.Medium,
          weight: TextWeight.Bolder
        }, vatCol[0]);
        builder.addTextBlock(content.vat, {
          horizontalAlignment: HorizontalAlignment.Right
        }, vatCol[1]);
      }

      if (!nullOrUndefined(content.tax)) {
        var taxCol = builder.addColumnSet([75, 25]);
        builder.addTextBlock((0, _Localize.localize)('Tax', language), {
          size: TextSize.Medium,
          weight: TextWeight.Bolder
        }, taxCol[0]);
        builder.addTextBlock(content.tax, {
          horizontalAlignment: HorizontalAlignment.Right
        }, taxCol[1]);
      }

      if (!nullOrUndefined(content.total)) {
        var totalCol = builder.addColumnSet([75, 25]);
        builder.addTextBlock((0, _Localize.localize)('Total', language), {
          size: TextSize.Medium,
          weight: TextWeight.Bolder
        }, totalCol[0]);
        builder.addTextBlock(content.total, {
          horizontalAlignment: HorizontalAlignment.Right,
          size: TextSize.Medium,
          weight: TextWeight.Bolder
        }, totalCol[1]);
      }

      builder.addButtons(content.buttons);
      return builder.card;
    });
    return _this;
  }

  _createClass(ReceiptCardAttachment, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          adaptiveCards = _this$props.adaptiveCards,
          _this$props$attachmen = _this$props.attachment;
      _this$props$attachmen = _this$props$attachmen === void 0 ? {} : _this$props$attachmen;
      var content = _this$props$attachmen.content,
          language = _this$props.language;
      return _react.default.createElement(_AdaptiveCardRenderer.default, {
        adaptiveCard: content && this.buildCard(adaptiveCards, content, language),
        tapAction: content && content.tap
      });
    }
  }]);

  return ReceiptCardAttachment;
}(_react.default.Component);

var _default = (0, _connectToWebChat.default)(function (_ref) {
  var language = _ref.language;
  return {
    language: language
  };
})(ReceiptCardAttachment);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,