"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactScrollToBottom = require("react-scroll-to-bottom");

var _reactRedux = require("react-redux");

var _glamor = require("glamor");

var _memoizeOne = _interopRequireDefault(require("memoize-one"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _concatMiddleware = _interopRequireDefault(require("./Middleware/concatMiddleware"));

var _Context = _interopRequireDefault(require("./Context"));

var _createCoreMiddleware = _interopRequireDefault(require("./Middleware/CardAction/createCoreMiddleware"));

var _createStyleSet = _interopRequireDefault(require("./Styles/createStyleSet"));

var _adaptiveCardHostConfig = _interopRequireDefault(require("./Styles/adaptiveCardHostConfig"));

var _Dictation = _interopRequireDefault(require("./Dictation"));

var _mapMap = _interopRequireDefault(require("./Utils/mapMap"));

var _observableToPromise = _interopRequireDefault(require("./Utils/observableToPromise"));

var _shallowEquals = _interopRequireDefault(require("./Utils/shallowEquals"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// Flywheel object
var EMPTY_ARRAY = [];
var DISPATCHERS = {
  markActivity: _botframeworkWebchatCore.markActivity,
  postActivity: _botframeworkWebchatCore.postActivity,
  sendEvent: _botframeworkWebchatCore.sendEvent,
  sendFiles: _botframeworkWebchatCore.sendFiles,
  sendMessage: _botframeworkWebchatCore.sendMessage,
  sendMessageBack: _botframeworkWebchatCore.sendMessageBack,
  sendPostBack: _botframeworkWebchatCore.sendPostBack,
  setDictateInterims: _botframeworkWebchatCore.setDictateInterims,
  setDictateState: _botframeworkWebchatCore.setDictateState,
  setSendBox: _botframeworkWebchatCore.setSendBox,
  setSendTimeout: _botframeworkWebchatCore.setSendTimeout,
  startDictate: _botframeworkWebchatCore.startDictate,
  startSpeakingActivity: _botframeworkWebchatCore.startSpeakingActivity,
  stopDictate: _botframeworkWebchatCore.stopDictate,
  stopSpeakingActivity: _botframeworkWebchatCore.stopSpeakingActivity,
  submitSendBox: _botframeworkWebchatCore.submitSendBox
};

function styleSetToClassNames(styleSet) {
  return (0, _mapMap.default)(styleSet, function (style, key) {
    return key === 'options' ? style : (0, _glamor.css)(style);
  });
}

function createCardActionLogic(_ref) {
  var cardActionMiddleware = _ref.cardActionMiddleware,
      directLine = _ref.directLine,
      dispatch = _ref.dispatch;
  var runMiddleware = (0, _concatMiddleware.default)(cardActionMiddleware, (0, _createCoreMiddleware.default)())({
    dispatch: dispatch
  });
  return {
    onCardAction: function onCardAction(cardAction) {
      return runMiddleware(function (_ref2) {
        var type = _ref2.cardAction.type;
        throw new Error("Web Chat: received unknown card action \"".concat(type, "\""));
      })({
        cardAction: cardAction,
        getSignInUrl: cardAction.type === 'signin' ? function () {
          var value = cardAction.value;

          if (directLine.getSessionId) {
            // TODO: [P3] We should change this one to async/await.
            //       This is the first place in this project to use async.
            //       Thus, we need to add @babel/plugin-transform-runtime and @babel/runtime.
            return (0, _observableToPromise.default)(directLine.getSessionId()).then(function (sessionId) {
              return "".concat(value).concat(encodeURIComponent("&code_challenge=".concat(sessionId)));
            });
          } else {
            return value;
          }
        } : null
      });
    }
  };
}

function createFocusSendBoxLogic(_ref3) {
  var sendBoxRef = _ref3.sendBoxRef;
  return {
    focusSendBox: function focusSendBox() {
      var _ref4 = sendBoxRef || {},
          current = _ref4.current;

      current && current.focus();
    }
  };
}

function createStyleSetLogic(_ref5) {
  var styleOptions = _ref5.styleOptions,
      styleSet = _ref5.styleSet;
  return {
    styleSet: styleSetToClassNames(styleSet || (0, _createStyleSet.default)(styleOptions))
  };
} // TODO: [P3] Take this deprecation code out when releasing on or after 2019 December 11


function patchPropsForAvatarInitials(_ref6) {
  var botAvatarInitials = _ref6.botAvatarInitials,
      userAvatarInitials = _ref6.userAvatarInitials,
      props = _objectWithoutProperties(_ref6, ["botAvatarInitials", "userAvatarInitials"]);

  // This code will take out "botAvatarInitials" and "userAvatarInitials" from props
  var styleOptions = props.styleOptions;

  if (botAvatarInitials) {
    styleOptions = _objectSpread({}, styleOptions, {
      botAvatarInitials: botAvatarInitials
    });
    console.warn('Web Chat: "botAvatarInitials" is deprecated. Please use "styleOptions.botAvatarInitials" instead. "botAvatarInitials" will be removed on or after December 11 2019 .');
  }

  if (userAvatarInitials) {
    styleOptions = _objectSpread({}, styleOptions, {
      userAvatarInitials: userAvatarInitials
    });
    console.warn('Web Chat: "botAvatarInitials" is deprecated. Please use "styleOptions.botAvatarInitials" instead. "botAvatarInitials" will be removed on or after December 11 2019 .');
  }

  return _objectSpread({}, props, {
    styleOptions: styleOptions
  });
}

function createLogic(props) {
  // This is a heavy function, and it is expected to be only called when there is a need to recreate business logic, e.g.
  // - User ID changed, causing all send* functions to be updated
  // - send
  // TODO: [P4] We should break this into smaller pieces using memoization function, so we don't recreate styleSet if userID is changed
  // TODO: [P3] We should think about if we allow the user to change onSendBoxValueChanged/sendBoxValue, e.g.
  // 1. Turns text into UPPERCASE
  // 2. Filter out profanity
  // TODO: [P4] Revisit all members of context
  props = patchPropsForAvatarInitials(props);
  return _objectSpread({}, props, createCardActionLogic(props), createFocusSendBoxLogic(props), createStyleSetLogic(props));
}

var Composer =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Composer, _React$Component);

  function Composer(props) {
    var _this;

    _classCallCheck(this, Composer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Composer).call(this, props));
    _this.createContextFromProps = (0, _memoizeOne.default)(createLogic, _shallowEquals.default);
    _this.createWebSpeechPonyfill = (0, _memoizeOne.default)(function (webSpeechPonyfillFactory, referenceGrammarID) {
      return webSpeechPonyfillFactory && webSpeechPonyfillFactory({
        referenceGrammarID: referenceGrammarID
      });
    });
    _this.mergeContext = (0, _memoizeOne.default)(function () {
      for (var _len = arguments.length, contexts = new Array(_len), _key = 0; _key < _len; _key++) {
        contexts[_key] = arguments[_key];
      }

      return Object.assign.apply(Object, [{}].concat(contexts));
    }, _shallowEquals.default);
    _this.state = {
      hoistedDispatchers: (0, _mapMap.default)(DISPATCHERS, function (dispatcher) {
        return function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          return _this.props.dispatch(dispatcher.apply(_assertThisInitialized(_this), args));
        };
      })
    };
    return _this;
  }

  _createClass(Composer, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      var props = this.props;
      var directLine = props.directLine,
          userID = props.userID,
          username = props.username;
      this.setLanguageFromProps(props);
      this.setSendTimeoutFromProps(props);
      this.setSendTypingIndicatorFromProps(props);
      props.dispatch((0, _botframeworkWebchatCore.connect)({
        directLine: directLine,
        userID: userID,
        username: username
      }));
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var props = this.props;
      var directLine = props.directLine,
          locale = props.locale,
          sendTimeout = props.sendTimeout,
          sendTyping = props.sendTyping,
          sendTypingIndicator = props.sendTypingIndicator,
          userID = props.userID,
          username = props.username;

      if (prevProps.locale !== locale) {
        this.setLanguageFromProps(props);
      }

      if (prevProps.sendTimeout !== sendTimeout) {
        this.setSendTimeoutFromProps(props);
      }

      if (!prevProps.sendTypingIndicator !== !sendTypingIndicator // TODO: [P3] Take this deprecation code out when releasing on or after January 13 2020
      || !prevProps.sendTyping !== !sendTyping) {
        this.setSendTypingIndicatorFromProps(props);
      }

      if (prevProps.directLine !== directLine || prevProps.userID !== userID || prevProps.username !== username) {
        // TODO: [P3] disconnect() is an async call (pending -> fulfilled), we need to wait, or change it to reconnect()
        props.dispatch((0, _botframeworkWebchatCore.disconnect)());
        props.dispatch((0, _botframeworkWebchatCore.connect)({
          directLine: directLine,
          userID: userID,
          username: username
        }));
      }
    }
  }, {
    key: "setLanguageFromProps",
    value: function setLanguageFromProps(props) {
      props.dispatch((0, _botframeworkWebchatCore.setLanguage)(props.locale || window.navigator.language || 'en-US'));
    }
  }, {
    key: "setSendTimeoutFromProps",
    value: function setSendTimeoutFromProps(props) {
      props.dispatch((0, _botframeworkWebchatCore.setSendTimeout)(props.sendTimeout || 20000));
    }
  }, {
    key: "setSendTypingIndicatorFromProps",
    value: function setSendTypingIndicatorFromProps(props) {
      if (typeof props.sendTyping === 'undefined') {
        props.dispatch((0, _botframeworkWebchatCore.setSendTypingIndicator)(!!props.sendTypingIndicator));
      } else {
        // TODO: [P3] Take this deprecation code out when releasing on or after January 13 2020
        console.warn('Web Chat: "sendTyping" has been renamed to "sendTypingIndicator". Please use "sendTypingIndicator" instead. This deprecation migration will be removed on or after January 13 2020.');
        props.dispatch((0, _botframeworkWebchatCore.setSendTypingIndicator)(!!props.sendTyping));
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          activityRenderer = _this$props.activityRenderer,
          adaptiveCardHostConfig = _this$props.adaptiveCardHostConfig,
          attachmentRenderer = _this$props.attachmentRenderer,
          children = _this$props.children,
          disabled = _this$props.disabled,
          grammars = _this$props.grammars,
          groupTimestamp = _this$props.groupTimestamp,
          referenceGrammarID = _this$props.referenceGrammarID,
          renderMarkdown = _this$props.renderMarkdown,
          scrollToEnd = _this$props.scrollToEnd,
          store = _this$props.store,
          userID = _this$props.userID,
          username = _this$props.username,
          webSpeechPonyfillFactory = _this$props.webSpeechPonyfillFactory,
          propsForLogic = _objectWithoutProperties(_this$props, ["activityRenderer", "adaptiveCardHostConfig", "attachmentRenderer", "children", "disabled", "grammars", "groupTimestamp", "referenceGrammarID", "renderMarkdown", "scrollToEnd", "store", "userID", "username", "webSpeechPonyfillFactory"]),
          state = this.state;

      var contextFromProps = this.createContextFromProps(propsForLogic);
      var context = this.mergeContext(contextFromProps, state.hoistedDispatchers, // TODO: [P4] Should we normalize empties here? Or should we let it thru?
      //       If we let it thru, the code below become simplified and the user can plug in whatever they want for context, via Composer.props
      {
        activityRenderer: activityRenderer,
        adaptiveCardHostConfig: adaptiveCardHostConfig || (0, _adaptiveCardHostConfig.default)(this.props.styleOptions),
        attachmentRenderer: attachmentRenderer,
        groupTimestamp: groupTimestamp,
        disabled: disabled,
        grammars: grammars || EMPTY_ARRAY,
        renderMarkdown: renderMarkdown,
        scrollToEnd: scrollToEnd,
        store: store,
        webSpeechPonyfill: this.createWebSpeechPonyfill(webSpeechPonyfillFactory, referenceGrammarID)
      }); // TODO: [P3] Check how many times we do re-render context

      return _react.default.createElement(_Context.default.Provider, {
        value: context
      }, typeof children === 'function' ? children(context) : children, _react.default.createElement(_Dictation.default, null));
    }
  }]);

  return Composer;
}(_react.default.Component);

var ConnectedComposer = (0, _reactRedux.connect)(function (_ref7) {
  var referenceGrammarID = _ref7.referenceGrammarID;
  return {
    referenceGrammarID: referenceGrammarID
  };
})(function (props) {
  return _react.default.createElement(_reactScrollToBottom.Composer, null, _react.default.createElement(_reactScrollToBottom.FunctionContext.Consumer, null, function (_ref8) {
    var scrollToEnd = _ref8.scrollToEnd;
    return _react.default.createElement(Composer, _extends({
      scrollToEnd: scrollToEnd
    }, props));
  }));
}); // We will create a Redux store if it was not passed in

var ConnectedComposerWithStore =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(ConnectedComposerWithStore, _React$Component2);

  function ConnectedComposerWithStore(props) {
    var _this2;

    _classCallCheck(this, ConnectedComposerWithStore);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ConnectedComposerWithStore).call(this, props));
    _this2.createMemoizedStore = (0, _memoizeOne.default)(function () {
      return (0, _botframeworkWebchatCore.createStore)();
    });
    return _this2;
  }

  _createClass(ConnectedComposerWithStore, [{
    key: "render",
    value: function render() {
      var props = this.props;
      return _react.default.createElement(ConnectedComposer, _extends({}, props, {
        store: props.store || this.createMemoizedStore()
      }));
    }
  }]);

  return ConnectedComposerWithStore;
}(_react.default.Component);

var _default = ConnectedComposerWithStore; // TODO: [P3] We should consider moving some props to Redux store
//       Although we use `connectToWebChat` to hide the details of accessor of Redux store,
//       we should clean up the responsibility between Context and Redux store
//       We should decide which data is needed for React but not in other environment such as CLI/VSCode

exports.default = _default;
ConnectedComposerWithStore.propTypes = {
  activityRenderer: _propTypes.default.func,
  adaptiveCardHostConfig: _propTypes.default.any,
  attachmentRenderer: _propTypes.default.func,
  cardActionMiddleware: _propTypes.default.func,
  groupTimestamp: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number]),
  disabled: _propTypes.default.bool,
  grammars: _propTypes.default.arrayOf(_propTypes.default.string),
  renderMarkdown: _propTypes.default.func,
  sendTimeout: _propTypes.default.number,
  sendTypingIndicator: _propTypes.default.bool,
  store: _propTypes.default.any,
  userID: _propTypes.default.string,
  username: _propTypes.default.string,
  webSpeechPonyfillFactory: _propTypes.default.func
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,