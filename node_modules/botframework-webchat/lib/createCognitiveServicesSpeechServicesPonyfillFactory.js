"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _SpeechServices = _interopRequireDefault(require("web-speech-cognitive-services/lib/SpeechServices"));

function _default(_x) {
  return _ref2.apply(this, arguments);
}

function _ref2() {
  _ref2 = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(_ref) {
    var authorizationToken, region, subscriptionKey, textNormalization, ponyfill, SpeechGrammarList, speechSynthesis, SpeechSynthesisUtterance;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            authorizationToken = _ref.authorizationToken, region = _ref.region, subscriptionKey = _ref.subscriptionKey, textNormalization = _ref.textNormalization;
            console.warn('Web Chat: Cognitive Services Speech Services support is currently in preview. If you encounter any problems, please file us an issue at https://github.com/Microsoft/BotFramework-WebChat/issues/.');
            _context.next = 4;
            return (0, _SpeechServices.default)({
              authorizationToken: authorizationToken,
              region: region,
              subscriptionKey: subscriptionKey,
              textNormalization: textNormalization
            });

          case 4:
            ponyfill = _context.sent;
            SpeechGrammarList = ponyfill.SpeechGrammarList, speechSynthesis = ponyfill.speechSynthesis, SpeechSynthesisUtterance = ponyfill.SpeechSynthesisUtterance;
            return _context.abrupt("return", function (_ref4) {
              var referenceGrammarID = _ref4.referenceGrammarID;
              return {
                SpeechGrammarList: SpeechGrammarList,
                SpeechRecognition: injectReferenceGrammarID(ponyfill, referenceGrammarID),
                speechSynthesis: speechSynthesis,
                SpeechSynthesisUtterance: SpeechSynthesisUtterance
              };
            });

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _ref2.apply(this, arguments);
}

function injectReferenceGrammarID(_ref3, referenceGrammarID) {
  var SpeechGrammarList = _ref3.SpeechGrammarList,
      SpeechRecognition = _ref3.SpeechRecognition;
  return (
    /*#__PURE__*/
    function (_SpeechRecognition) {
      (0, _inherits2.default)(_class, _SpeechRecognition);

      function _class() {
        (0, _classCallCheck2.default)(this, _class);
        return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(_class).apply(this, arguments));
      }

      (0, _createClass2.default)(_class, [{
        key: "start",
        value: function start() {
          this.grammars = new SpeechGrammarList();
          this.grammars.referenceGrammar = referenceGrammarID || '';
          return (0, _get2.default)((0, _getPrototypeOf2.default)(_class.prototype), "start", this).call(this);
        }
      }]);
      return _class;
    }(SpeechRecognition)
  );
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVDb2duaXRpdmVTZXJ2aWNlc1NwZWVjaFNlcnZpY2VzUG9ueWZpbGxGYWN0b3J5LmpzIl0sIm5hbWVzIjpbImF1dGhvcml6YXRpb25Ub2tlbiIsInJlZ2lvbiIsInN1YnNjcmlwdGlvbktleSIsInRleHROb3JtYWxpemF0aW9uIiwiY29uc29sZSIsIndhcm4iLCJwb255ZmlsbCIsIlNwZWVjaEdyYW1tYXJMaXN0Iiwic3BlZWNoU3ludGhlc2lzIiwiU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlIiwicmVmZXJlbmNlR3JhbW1hcklEIiwiU3BlZWNoUmVjb2duaXRpb24iLCJpbmplY3RSZWZlcmVuY2VHcmFtbWFySUQiLCJncmFtbWFycyIsInJlZmVyZW5jZUdyYW1tYXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7OzRCQUVlO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNiQSxZQUFBQSxrQkFEYSxRQUNiQSxrQkFEYSxFQUViQyxNQUZhLFFBRWJBLE1BRmEsRUFHYkMsZUFIYSxRQUdiQSxlQUhhLEVBSWJDLGlCQUphLFFBSWJBLGlCQUphO0FBTWJDLFlBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLG9NQUFiO0FBTmE7QUFBQSxtQkFRVSw2QkFBZTtBQUNwQ0wsY0FBQUEsa0JBQWtCLEVBQWxCQSxrQkFEb0M7QUFFcENDLGNBQUFBLE1BQU0sRUFBTkEsTUFGb0M7QUFHcENDLGNBQUFBLGVBQWUsRUFBZkEsZUFIb0M7QUFJcENDLGNBQUFBLGlCQUFpQixFQUFqQkE7QUFKb0MsYUFBZixDQVJWOztBQUFBO0FBUVBHLFlBQUFBLFFBUk87QUFnQlhDLFlBQUFBLGlCQWhCVyxHQW1CVEQsUUFuQlMsQ0FnQlhDLGlCQWhCVyxFQWlCWEMsZUFqQlcsR0FtQlRGLFFBbkJTLENBaUJYRSxlQWpCVyxFQWtCWEMsd0JBbEJXLEdBbUJUSCxRQW5CUyxDQWtCWEcsd0JBbEJXO0FBQUEsNkNBcUJOO0FBQUEsa0JBQUdDLGtCQUFILFNBQUdBLGtCQUFIO0FBQUEscUJBQTZCO0FBQ2xDSCxnQkFBQUEsaUJBQWlCLEVBQWpCQSxpQkFEa0M7QUFFbENJLGdCQUFBQSxpQkFBaUIsRUFBRUMsd0JBQXdCLENBQUNOLFFBQUQsRUFBV0ksa0JBQVgsQ0FGVDtBQUdsQ0YsZ0JBQUFBLGVBQWUsRUFBZkEsZUFIa0M7QUFJbENDLGdCQUFBQSx3QkFBd0IsRUFBeEJBO0FBSmtDLGVBQTdCO0FBQUEsYUFyQk07O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRzs7OztBQTZCZixTQUFTRyx3QkFBVCxRQUE0RUYsa0JBQTVFLEVBQWdHO0FBQUEsTUFBNURILGlCQUE0RCxTQUE1REEsaUJBQTREO0FBQUEsTUFBekNJLGlCQUF5QyxTQUF6Q0EsaUJBQXlDO0FBQzlGO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQSxnQ0FDVTtBQUNOLGVBQUtFLFFBQUwsR0FBZ0IsSUFBSU4saUJBQUosRUFBaEI7QUFDQSxlQUFLTSxRQUFMLENBQWNDLGdCQUFkLEdBQWlDSixrQkFBa0IsSUFBSSxFQUF2RDtBQUVBO0FBQ0Q7QUFOSDtBQUFBO0FBQUEsTUFBcUJDLGlCQUFyQjtBQUFBO0FBUUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlUG9ueWZpbGwgZnJvbSAnd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbGliL1NwZWVjaFNlcnZpY2VzJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gKHtcbiAgYXV0aG9yaXphdGlvblRva2VuLFxuICByZWdpb24sXG4gIHN1YnNjcmlwdGlvbktleSxcbiAgdGV4dE5vcm1hbGl6YXRpb25cbn0pIHtcbiAgY29uc29sZS53YXJuKCdXZWIgQ2hhdDogQ29nbml0aXZlIFNlcnZpY2VzIFNwZWVjaCBTZXJ2aWNlcyBzdXBwb3J0IGlzIGN1cnJlbnRseSBpbiBwcmV2aWV3LiBJZiB5b3UgZW5jb3VudGVyIGFueSBwcm9ibGVtcywgcGxlYXNlIGZpbGUgdXMgYW4gaXNzdWUgYXQgaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9Cb3RGcmFtZXdvcmstV2ViQ2hhdC9pc3N1ZXMvLicpO1xuXG4gIGNvbnN0IHBvbnlmaWxsID0gYXdhaXQgY3JlYXRlUG9ueWZpbGwoe1xuICAgIGF1dGhvcml6YXRpb25Ub2tlbixcbiAgICByZWdpb24sXG4gICAgc3Vic2NyaXB0aW9uS2V5LFxuICAgIHRleHROb3JtYWxpemF0aW9uXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBTcGVlY2hHcmFtbWFyTGlzdCxcbiAgICBzcGVlY2hTeW50aGVzaXMsXG4gICAgU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlXG4gIH0gPSBwb255ZmlsbDtcblxuICByZXR1cm4gKHsgcmVmZXJlbmNlR3JhbW1hcklEIH0pID0+ICh7XG4gICAgU3BlZWNoR3JhbW1hckxpc3QsXG4gICAgU3BlZWNoUmVjb2duaXRpb246IGluamVjdFJlZmVyZW5jZUdyYW1tYXJJRChwb255ZmlsbCwgcmVmZXJlbmNlR3JhbW1hcklEKSxcbiAgICBzcGVlY2hTeW50aGVzaXMsXG4gICAgU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbmplY3RSZWZlcmVuY2VHcmFtbWFySUQoeyBTcGVlY2hHcmFtbWFyTGlzdCwgU3BlZWNoUmVjb2duaXRpb24gfSwgcmVmZXJlbmNlR3JhbW1hcklEKSB7XG4gIHJldHVybiBjbGFzcyBleHRlbmRzIFNwZWVjaFJlY29nbml0aW9uIHtcbiAgICBzdGFydCgpIHtcbiAgICAgIHRoaXMuZ3JhbW1hcnMgPSBuZXcgU3BlZWNoR3JhbW1hckxpc3QoKTtcbiAgICAgIHRoaXMuZ3JhbW1hcnMucmVmZXJlbmNlR3JhbW1hciA9IHJlZmVyZW5jZUdyYW1tYXJJRCB8fCAnJztcblxuICAgICAgcmV0dXJuIHN1cGVyLnN0YXJ0KCk7XG4gICAgfVxuICB9O1xufVxuIl19