"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = render;

var _markdownItForInline = _interopRequireDefault(require("markdown-it-for-inline"));

var _markdownIt = _interopRequireDefault(require("markdown-it"));

var _sanitizeHtml = _interopRequireDefault(require("sanitize-html"));

var SANITIZE_HTML_OPTIONS = {
  allowedAttributes: {
    a: ['href', 'name', 'target', 'title'],
    img: ['alt', 'src']
  },
  allowedTags: ['a', 'b', 'blockquote', 'br', 'caption', 'code', 'div', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i', 'img', 'li', 'nl', 'ol', 'p', 'pre', 'span', 'strike', 'strong', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul']
};
var customMarkdownIt = new _markdownIt.default({
  breaks: true,
  html: false,
  linkify: true,
  typographer: true,
  xhtmlOut: true
}).use(_markdownItForInline.default, 'url_new_win', 'link_open', function (tokens, index) {
  // TODO: [P4] This is copied from v3 and looks clunky
  //       We should refactor this code
  var targetAttrIndex = tokens[index].attrIndex('target');

  if (~targetAttrIndex) {
    tokens[index].attrs[targetAttrIndex][1] = '_blank';
  } else {
    tokens[index].attrPush(['target', '_blank']);
  }

  var relAttrIndex = tokens[index].attrIndex('rel');

  if (~relAttrIndex) {
    tokens[index].attrs[relAttrIndex][1] = 'noopener noreferrer';
  } else {
    tokens[index].attrPush(['target', 'noopener noreferrer']);
  }
});

function render(markdown) {
  var html = customMarkdownIt.render(markdown);
  return (0, _sanitizeHtml.default)(html, SANITIZE_HTML_OPTIONS);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5kZXJNYXJrZG93bi5qcyJdLCJuYW1lcyI6WyJTQU5JVElaRV9IVE1MX09QVElPTlMiLCJhbGxvd2VkQXR0cmlidXRlcyIsImEiLCJpbWciLCJhbGxvd2VkVGFncyIsImN1c3RvbU1hcmtkb3duSXQiLCJNYXJrZG93bkl0IiwiYnJlYWtzIiwiaHRtbCIsImxpbmtpZnkiLCJ0eXBvZ3JhcGhlciIsInhodG1sT3V0IiwidXNlIiwiaXRlcmF0b3IiLCJ0b2tlbnMiLCJpbmRleCIsInRhcmdldEF0dHJJbmRleCIsImF0dHJJbmRleCIsImF0dHJzIiwiYXR0clB1c2giLCJyZWxBdHRySW5kZXgiLCJyZW5kZXIiLCJtYXJrZG93biJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUEsSUFBTUEscUJBQXFCLEdBQUc7QUFDNUJDLEVBQUFBLGlCQUFpQixFQUFFO0FBQ2pCQyxJQUFBQSxDQUFDLEVBQUUsQ0FBQyxNQUFELEVBQVMsTUFBVCxFQUFpQixRQUFqQixFQUEyQixPQUEzQixDQURjO0FBRWpCQyxJQUFBQSxHQUFHLEVBQUUsQ0FBQyxLQUFELEVBQVEsS0FBUjtBQUZZLEdBRFM7QUFLNUJDLEVBQUFBLFdBQVcsRUFBRSxDQUNYLEdBRFcsRUFFWCxHQUZXLEVBR1gsWUFIVyxFQUlYLElBSlcsRUFLWCxTQUxXLEVBTVgsTUFOVyxFQU9YLEtBUFcsRUFRWCxJQVJXLEVBU1gsSUFUVyxFQVVYLElBVlcsRUFXWCxJQVhXLEVBWVgsSUFaVyxFQWFYLElBYlcsRUFjWCxJQWRXLEVBZVgsSUFmVyxFQWdCWCxHQWhCVyxFQWlCWCxLQWpCVyxFQWtCWCxJQWxCVyxFQW1CWCxJQW5CVyxFQW9CWCxJQXBCVyxFQXFCWCxHQXJCVyxFQXNCWCxLQXRCVyxFQXVCWCxNQXZCVyxFQXdCWCxRQXhCVyxFQXlCWCxRQXpCVyxFQTBCWCxPQTFCVyxFQTJCWCxPQTNCVyxFQTRCWCxJQTVCVyxFQTZCWCxPQTdCVyxFQThCWCxJQTlCVyxFQStCWCxPQS9CVyxFQWdDWCxJQWhDVyxFQWlDWCxJQWpDVztBQUxlLENBQTlCO0FBMENBLElBQU1DLGdCQUFnQixHQUFHLElBQUlDLG1CQUFKLENBQWU7QUFDdENDLEVBQUFBLE1BQU0sRUFBRSxJQUQ4QjtBQUV0Q0MsRUFBQUEsSUFBSSxFQUFFLEtBRmdDO0FBR3RDQyxFQUFBQSxPQUFPLEVBQUUsSUFINkI7QUFJdENDLEVBQUFBLFdBQVcsRUFBRSxJQUp5QjtBQUt0Q0MsRUFBQUEsUUFBUSxFQUFFO0FBTDRCLENBQWYsRUFNdEJDLEdBTnNCLENBTWxCQyw0QkFOa0IsRUFNUixhQU5RLEVBTU8sV0FOUCxFQU1vQixVQUFDQyxNQUFELEVBQVNDLEtBQVQsRUFBbUI7QUFDOUQ7QUFDQTtBQUNBLE1BQU1DLGVBQWUsR0FBR0YsTUFBTSxDQUFDQyxLQUFELENBQU4sQ0FBY0UsU0FBZCxDQUF3QixRQUF4QixDQUF4Qjs7QUFFQSxNQUFJLENBQUNELGVBQUwsRUFBc0I7QUFDcEJGLElBQUFBLE1BQU0sQ0FBQ0MsS0FBRCxDQUFOLENBQWNHLEtBQWQsQ0FBb0JGLGVBQXBCLEVBQXFDLENBQXJDLElBQTBDLFFBQTFDO0FBQ0QsR0FGRCxNQUVPO0FBQ0xGLElBQUFBLE1BQU0sQ0FBQ0MsS0FBRCxDQUFOLENBQWNJLFFBQWQsQ0FBdUIsQ0FBQyxRQUFELEVBQVcsUUFBWCxDQUF2QjtBQUNEOztBQUVELE1BQU1DLFlBQVksR0FBR04sTUFBTSxDQUFDQyxLQUFELENBQU4sQ0FBY0UsU0FBZCxDQUF3QixLQUF4QixDQUFyQjs7QUFFQSxNQUFJLENBQUNHLFlBQUwsRUFBbUI7QUFDakJOLElBQUFBLE1BQU0sQ0FBQ0MsS0FBRCxDQUFOLENBQWNHLEtBQWQsQ0FBb0JFLFlBQXBCLEVBQWtDLENBQWxDLElBQXVDLHFCQUF2QztBQUNELEdBRkQsTUFFTztBQUNMTixJQUFBQSxNQUFNLENBQUNDLEtBQUQsQ0FBTixDQUFjSSxRQUFkLENBQXVCLENBQUMsUUFBRCxFQUFXLHFCQUFYLENBQXZCO0FBQ0Q7QUFDRixDQXhCd0IsQ0FBekI7O0FBMEJlLFNBQVNFLE1BQVQsQ0FBZ0JDLFFBQWhCLEVBQTBCO0FBQ3ZDLE1BQU1kLElBQUksR0FBR0gsZ0JBQWdCLENBQUNnQixNQUFqQixDQUF3QkMsUUFBeEIsQ0FBYjtBQUVBLFNBQU8sMkJBQWFkLElBQWIsRUFBbUJSLHFCQUFuQixDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaXRlcmF0b3IgZnJvbSAnbWFya2Rvd24taXQtZm9yLWlubGluZSc7XG5pbXBvcnQgTWFya2Rvd25JdCBmcm9tICdtYXJrZG93bi1pdCc7XG5pbXBvcnQgc2FuaXRpemVIVE1MIGZyb20gJ3Nhbml0aXplLWh0bWwnO1xuXG5jb25zdCBTQU5JVElaRV9IVE1MX09QVElPTlMgPSB7XG4gIGFsbG93ZWRBdHRyaWJ1dGVzOiB7XG4gICAgYTogWydocmVmJywgJ25hbWUnLCAndGFyZ2V0JywgJ3RpdGxlJ10sXG4gICAgaW1nOiBbJ2FsdCcsICdzcmMnXVxuICB9LFxuICBhbGxvd2VkVGFnczogW1xuICAgICdhJyxcbiAgICAnYicsXG4gICAgJ2Jsb2NrcXVvdGUnLFxuICAgICdicicsXG4gICAgJ2NhcHRpb24nLFxuICAgICdjb2RlJyxcbiAgICAnZGl2JyxcbiAgICAnZW0nLFxuICAgICdoMScsXG4gICAgJ2gyJyxcbiAgICAnaDMnLFxuICAgICdoNCcsXG4gICAgJ2g1JyxcbiAgICAnaDYnLFxuICAgICdocicsXG4gICAgJ2knLFxuICAgICdpbWcnLFxuICAgICdsaScsXG4gICAgJ25sJyxcbiAgICAnb2wnLFxuICAgICdwJyxcbiAgICAncHJlJyxcbiAgICAnc3BhbicsXG4gICAgJ3N0cmlrZScsXG4gICAgJ3N0cm9uZycsXG4gICAgJ3RhYmxlJyxcbiAgICAndGJvZHknLFxuICAgICd0ZCcsXG4gICAgJ3Rmb290JyxcbiAgICAndGgnLFxuICAgICd0aGVhZCcsXG4gICAgJ3RyJyxcbiAgICAndWwnXG4gIF1cbn07XG5cbmNvbnN0IGN1c3RvbU1hcmtkb3duSXQgPSBuZXcgTWFya2Rvd25JdCh7XG4gIGJyZWFrczogdHJ1ZSxcbiAgaHRtbDogZmFsc2UsXG4gIGxpbmtpZnk6IHRydWUsXG4gIHR5cG9ncmFwaGVyOiB0cnVlLFxuICB4aHRtbE91dDogdHJ1ZVxufSkudXNlKGl0ZXJhdG9yLCAndXJsX25ld193aW4nLCAnbGlua19vcGVuJywgKHRva2VucywgaW5kZXgpID0+IHtcbiAgLy8gVE9ETzogW1A0XSBUaGlzIGlzIGNvcGllZCBmcm9tIHYzIGFuZCBsb29rcyBjbHVua3lcbiAgLy8gICAgICAgV2Ugc2hvdWxkIHJlZmFjdG9yIHRoaXMgY29kZVxuICBjb25zdCB0YXJnZXRBdHRySW5kZXggPSB0b2tlbnNbaW5kZXhdLmF0dHJJbmRleCgndGFyZ2V0Jyk7XG5cbiAgaWYgKH50YXJnZXRBdHRySW5kZXgpIHtcbiAgICB0b2tlbnNbaW5kZXhdLmF0dHJzW3RhcmdldEF0dHJJbmRleF1bMV0gPSAnX2JsYW5rJztcbiAgfSBlbHNlIHtcbiAgICB0b2tlbnNbaW5kZXhdLmF0dHJQdXNoKFsndGFyZ2V0JywgJ19ibGFuayddKTtcbiAgfVxuXG4gIGNvbnN0IHJlbEF0dHJJbmRleCA9IHRva2Vuc1tpbmRleF0uYXR0ckluZGV4KCdyZWwnKTtcblxuICBpZiAofnJlbEF0dHJJbmRleCkge1xuICAgIHRva2Vuc1tpbmRleF0uYXR0cnNbcmVsQXR0ckluZGV4XVsxXSA9ICdub29wZW5lciBub3JlZmVycmVyJztcbiAgfSBlbHNlIHtcbiAgICB0b2tlbnNbaW5kZXhdLmF0dHJQdXNoKFsndGFyZ2V0JywgJ25vb3BlbmVyIG5vcmVmZXJyZXInXSk7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXIobWFya2Rvd24pIHtcbiAgY29uc3QgaHRtbCA9IGN1c3RvbU1hcmtkb3duSXQucmVuZGVyKG1hcmtkb3duKTtcblxuICByZXR1cm4gc2FuaXRpemVIVE1MKGh0bWwsIFNBTklUSVpFX0hUTUxfT1BUSU9OUyk7XG59XG4iXX0=