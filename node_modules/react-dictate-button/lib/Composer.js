'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _memoizeOne = require('memoize-one');

var _memoizeOne2 = _interopRequireDefault(_memoizeOne);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Context = require('./Context');

var _Context2 = _interopRequireDefault(_Context);

var _prefix = require('./prefix');

var _prefix2 = _interopRequireDefault(_prefix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function chainListener() {
  for (var _len = arguments.length, listeners = Array(_len), _key = 0; _key < _len; _key++) {
    listeners[_key] = arguments[_key];
  }

  return function () {
    var _this = this,
        _arguments = arguments;

    listeners.forEach(function (listener) {
      return listener.apply(_this, _arguments);
    });
  };
}

var Composer = function (_React$Component) {
  _inherits(Composer, _React$Component);

  function Composer(props) {
    _classCallCheck(this, Composer);

    var _this2 = _possibleConstructorReturn(this, (Composer.__proto__ || Object.getPrototypeOf(Composer)).call(this, props));

    _this2.createGrammarList = (0, _memoizeOne2.default)(function (speechGrammarList, grammar) {
      var grammarList = new speechGrammarList();

      grammar && grammarList.addFromString(grammar, 1);

      return grammarList;
    });

    _this2.createRecognition = (0, _memoizeOne2.default)(function (speechRecognition) {
      return speechRecognition && new speechRecognition();
    });

    _this2.handleAudioEnd = _this2.handleAudioEnd.bind(_this2);
    _this2.handleAudioStart = _this2.handleAudioStart.bind(_this2);
    _this2.handleEnd = _this2.handleEnd.bind(_this2);
    _this2.handleError = _this2.handleError.bind(_this2);
    _this2.handleRawEvent = _this2.handleRawEvent.bind(_this2);
    _this2.handleResult = _this2.handleResult.bind(_this2);
    _this2.handleStart = _this2.handleStart.bind(_this2);

    _this2.state = {
      readyState: 0,
      supported: !!props.speechRecognition
    };
    return _this2;
  }

  _createClass(Composer, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var recognition = this.recognition;

      var nextState = void 0;

      if (nextProps.speechRecognition !== this.props.speechRecognition) {
        recognition && recognition.abort();
        recognition = this.recognition = null;

        nextState = _extends({}, nextState, { supported: !!nextProps.speechRecognition });
      }

      if (nextProps.started !== this.props.started) {
        if (nextProps.started) {
          this.start(nextProps);
        } else {
          recognition && recognition.abort();
        }
      }

      nextState && this.setState(function () {
        return nextState;
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.recognition && this.recognition.abort();
    }
  }, {
    key: 'handleAudioEnd',
    value: function handleAudioEnd() {
      this.setState(function () {
        return { readyState: 3 };
      });
    }
  }, {
    key: 'handleAudioStart',
    value: function handleAudioStart() {
      this.setState(function () {
        return { readyState: 2 };
      });

      // Web Speech API does not emit "result" when nothing is heard, and Chrome does not emit "nomatch" event.
      // Because we emitted onProgress, we should emit "dictate" if not error, so they works in pair.
      this.emitDictateOnEnd = true;
      this.props.onProgress && this.props.onProgress({});
    }
  }, {
    key: 'handleEnd',
    value: function handleEnd() {
      if (this.emitDictateOnEnd) {
        this.props.onDictate && this.props.onDictate({});
      }

      this.setState(function () {
        return { readyState: 0 };
      });
    }
  }, {
    key: 'handleError',
    value: function handleError(event) {
      this.setState(function () {
        return _extends({
          readyState: 0
        }, event.error === 'not-allowed' && { supported: false });
      });

      // Error out, no need to emit "dictate"
      this.emitDictateOnEnd = false;
      this.props.onError && this.props.onError(event);
    }
  }, {
    key: 'handleRawEvent',
    value: function handleRawEvent(event) {
      this.props.onRawEvent && this.props.onRawEvent(event);
    }
  }, {
    key: 'handleResult',
    value: function handleResult(event) {
      var props = this.props;
      var rawResults = event.results;


      if (rawResults.length) {
        var results = [].map.call(rawResults, function (_ref) {
          var _ref2 = _slicedToArray(_ref, 1),
              firstAlt = _ref2[0];

          return {
            confidence: firstAlt.confidence,
            transcript: firstAlt.transcript
          };
        });

        var _rawResults = _slicedToArray(rawResults, 1),
            first = _rawResults[0];

        if (first.isFinal) {
          this.emitDictateOnEnd = false;
          props.onDictate && props.onDictate({ result: results[0] });
        } else {
          props.onProgress && props.onProgress({ results: results });
        }
      }
    }
  }, {
    key: 'handleStart',
    value: function handleStart() {
      this.setState(function () {
        return { readyState: 1 };
      });
    }
  }, {
    key: 'start',
    value: function start(props) {
      this.recognition && this.recognition.abort();

      if (!this.state.supported) {
        throw new Error('Speech recognition is not supported');
      }

      var recognition = this.recognition = this.createRecognition(props.speechRecognition);

      recognition.grammars = this.createGrammarList(props.speechGrammarList, props.grammar);
      recognition.lang = props.lang;
      recognition.interimResults = true;
      recognition.onaudioend = chainListener(this.handleAudioEnd, this.handleRawEvent);
      recognition.onaudiostart = chainListener(this.handleAudioStart, this.handleRawEvent);
      recognition.onend = chainListener(this.handleEnd, this.handleRawEvent);
      recognition.onerror = chainListener(this.handleError, this.handleRawEvent);
      recognition.onnomatch = this.handleRawEvent;
      recognition.onresult = chainListener(this.handleResult, this.handleRawEvent);
      recognition.onsoundend = this.handleRawEvent;
      recognition.onsoundstart = this.handleRawEvent;
      recognition.onspeechend = this.handleRawEvent;
      recognition.onspeechstart = this.handleRawEvent;
      recognition.onstart = chainListener(this.handleStart, this.handleRawEvent);

      props.extra && Object.keys(props.extra).forEach(function (key) {
        recognition[key] = props.extra[key];
      });

      recognition.start();
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props,
          state = this.state;
      var children = props.children;


      return _react2.default.createElement(
        _Context2.default.Provider,
        { value: state },
        _react2.default.createElement(
          _Context2.default.Consumer,
          null,
          function (context) {
            return typeof children === 'function' ? children(context) : children;
          }
        )
      );
    }
  }]);

  return Composer;
}(_react2.default.Component);

exports.default = Composer;


Composer.defaultProps = {
  speechGrammarList: (0, _prefix2.default)('SpeechGrammarList'),
  speechRecognition: (0, _prefix2.default)('SpeechRecognition')
};

Composer.propTypes = {
  extra: _propTypes2.default.any,
  lang: _propTypes2.default.string,
  onDictate: _propTypes2.default.func,
  onError: _propTypes2.default.func,
  onProgress: _propTypes2.default.func,
  onRawEvent: _propTypes2.default.func,
  speechGrammarList: _propTypes2.default.any,
  speechRecognition: _propTypes2.default.any
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,