'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Composer = require('./Composer');

var _Composer2 = _interopRequireDefault(_Composer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DictateCheckbox = function (_React$Component) {
  _inherits(DictateCheckbox, _React$Component);

  function DictateCheckbox(props) {
    _classCallCheck(this, DictateCheckbox);

    var _this = _possibleConstructorReturn(this, (DictateCheckbox.__proto__ || Object.getPrototypeOf(DictateCheckbox)).call(this, props));

    _this.handleChange = _this.handleChange.bind(_this);
    _this.handleDictate = _this.handleDictate.bind(_this);
    _this.handleError = _this.handleError.bind(_this);

    _this.state = {
      started: false
    };
    return _this;
  }

  _createClass(DictateCheckbox, [{
    key: 'handleChange',
    value: function handleChange(_ref) {
      var started = _ref.target.checked;

      this.setState(function () {
        return { started: started };
      });
    }
  }, {
    key: 'handleDictate',
    value: function handleDictate(event) {
      this.setState(function () {
        return { started: false };
      });
      this.props.onDictate && this.props.onDictate(event);
    }
  }, {
    key: 'handleError',
    value: function handleError(event) {
      this.setState(function () {
        return { started: false };
      });
      this.props.onError && this.props.onError(event);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var props = this.props,
          state = this.state;


      return _react2.default.createElement(
        _Composer2.default,
        {
          extra: props.extra,
          grammar: props.grammar,
          lang: props.lang,
          onDictate: this.handleDictate,
          onError: this.handleError,
          onProgress: props.onProgress,
          onRawEvent: props.onRawEvent,
          speechGrammarList: props.speechGrammarList,
          speechRecognition: props.speechRecognition,
          started: state.started && !props.disabled
        },
        function (context) {
          return _react2.default.createElement(
            'label',
            null,
            _react2.default.createElement('input', {
              checked: state.started,
              className: props.className,
              disabled: context.readyState === 1 || context.readyState === 3 || !context.supported || props.disabled,
              onChange: _this2.handleChange,
              type: 'checkbox'
            }),
            typeof props.children === 'function' ? props.children({ readyState: context.readyState }) : props.children
          );
        }
      );
    }
  }]);

  return DictateCheckbox;
}(_react2.default.Component);

exports.default = DictateCheckbox;


DictateCheckbox.propTypes = {
  className: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  extra: _propTypes2.default.any,
  grammar: _propTypes2.default.string,
  lang: _propTypes2.default.string,
  onDictate: _propTypes2.default.func,
  onError: _propTypes2.default.func,
  onProgress: _propTypes2.default.func,
  onRawEvent: _propTypes2.default.func,
  speechGrammarList: _propTypes2.default.any,
  speechRecognition: _propTypes2.default.any
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9EaWN0YXRlQ2hlY2tib3guanMiXSwibmFtZXMiOlsiRGljdGF0ZUNoZWNrYm94IiwicHJvcHMiLCJoYW5kbGVDaGFuZ2UiLCJiaW5kIiwiaGFuZGxlRGljdGF0ZSIsImhhbmRsZUVycm9yIiwic3RhdGUiLCJzdGFydGVkIiwidGFyZ2V0IiwiY2hlY2tlZCIsInNldFN0YXRlIiwiZXZlbnQiLCJvbkRpY3RhdGUiLCJvbkVycm9yIiwiZXh0cmEiLCJncmFtbWFyIiwibGFuZyIsIm9uUHJvZ3Jlc3MiLCJvblJhd0V2ZW50Iiwic3BlZWNoR3JhbW1hckxpc3QiLCJzcGVlY2hSZWNvZ25pdGlvbiIsImRpc2FibGVkIiwiY2xhc3NOYW1lIiwiY29udGV4dCIsInJlYWR5U3RhdGUiLCJzdXBwb3J0ZWQiLCJjaGlsZHJlbiIsIlJlYWN0IiwiQ29tcG9uZW50IiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiYm9vbCIsImFueSIsImZ1bmMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUVBOzs7Ozs7Ozs7Ozs7SUFFcUJBLGU7OztBQUNuQiwyQkFBWUMsS0FBWixFQUFtQjtBQUFBOztBQUFBLGtJQUNYQSxLQURXOztBQUdqQixVQUFLQyxZQUFMLEdBQW9CLE1BQUtBLFlBQUwsQ0FBa0JDLElBQWxCLE9BQXBCO0FBQ0EsVUFBS0MsYUFBTCxHQUFxQixNQUFLQSxhQUFMLENBQW1CRCxJQUFuQixPQUFyQjtBQUNBLFVBQUtFLFdBQUwsR0FBbUIsTUFBS0EsV0FBTCxDQUFpQkYsSUFBakIsT0FBbkI7O0FBRUEsVUFBS0csS0FBTCxHQUFhO0FBQ1hDLGVBQVM7QUFERSxLQUFiO0FBUGlCO0FBVWxCOzs7O3VDQUU4QztBQUFBLFVBQWJBLE9BQWEsUUFBaENDLE1BQWdDLENBQXRCQyxPQUFzQjs7QUFDN0MsV0FBS0MsUUFBTCxDQUFjO0FBQUEsZUFBTyxFQUFFSCxnQkFBRixFQUFQO0FBQUEsT0FBZDtBQUNEOzs7a0NBRWFJLEssRUFBTztBQUNuQixXQUFLRCxRQUFMLENBQWM7QUFBQSxlQUFPLEVBQUVILFNBQVMsS0FBWCxFQUFQO0FBQUEsT0FBZDtBQUNBLFdBQUtOLEtBQUwsQ0FBV1csU0FBWCxJQUF3QixLQUFLWCxLQUFMLENBQVdXLFNBQVgsQ0FBcUJELEtBQXJCLENBQXhCO0FBQ0Q7OztnQ0FFV0EsSyxFQUFPO0FBQ2pCLFdBQUtELFFBQUwsQ0FBYztBQUFBLGVBQU8sRUFBRUgsU0FBUyxLQUFYLEVBQVA7QUFBQSxPQUFkO0FBQ0EsV0FBS04sS0FBTCxDQUFXWSxPQUFYLElBQXNCLEtBQUtaLEtBQUwsQ0FBV1ksT0FBWCxDQUFtQkYsS0FBbkIsQ0FBdEI7QUFDRDs7OzZCQUVRO0FBQUE7O0FBQUEsVUFDQ1YsS0FERCxHQUNrQixJQURsQixDQUNDQSxLQUREO0FBQUEsVUFDUUssS0FEUixHQUNrQixJQURsQixDQUNRQSxLQURSOzs7QUFHUCxhQUNFO0FBQUMsMEJBQUQ7QUFBQTtBQUNFLGlCQUFRTCxNQUFNYSxLQURoQjtBQUVFLG1CQUFVYixNQUFNYyxPQUZsQjtBQUdFLGdCQUFPZCxNQUFNZSxJQUhmO0FBSUUscUJBQVksS0FBS1osYUFKbkI7QUFLRSxtQkFBVSxLQUFLQyxXQUxqQjtBQU1FLHNCQUFhSixNQUFNZ0IsVUFOckI7QUFPRSxzQkFBYWhCLE1BQU1pQixVQVByQjtBQVFFLDZCQUFvQmpCLE1BQU1rQixpQkFSNUI7QUFTRSw2QkFBb0JsQixNQUFNbUIsaUJBVDVCO0FBVUUsbUJBQVVkLE1BQU1DLE9BQU4sSUFBaUIsQ0FBQ04sTUFBTW9CO0FBVnBDO0FBWUk7QUFBQSxpQkFDQTtBQUFBO0FBQUE7QUFDRTtBQUNFLHVCQUFVZixNQUFNQyxPQURsQjtBQUVFLHlCQUFZTixNQUFNcUIsU0FGcEI7QUFHRSx3QkFDRUMsUUFBUUMsVUFBUixLQUF1QixDQUF2QixJQUNHRCxRQUFRQyxVQUFSLEtBQXVCLENBRDFCLElBRUcsQ0FBQ0QsUUFBUUUsU0FGWixJQUdHeEIsTUFBTW9CLFFBUGI7QUFTRSx3QkFBVyxPQUFLbkIsWUFUbEI7QUFVRSxvQkFBSztBQVZQLGNBREY7QUFjSSxtQkFBT0QsTUFBTXlCLFFBQWIsS0FBMEIsVUFBMUIsR0FDRXpCLE1BQU15QixRQUFOLENBQWUsRUFBRUYsWUFBWUQsUUFBUUMsVUFBdEIsRUFBZixDQURGLEdBR0V2QixNQUFNeUI7QUFqQlosV0FEQTtBQUFBO0FBWkosT0FERjtBQXFDRDs7OztFQW5FMENDLGdCQUFNQyxTOztrQkFBOUI1QixlOzs7QUFzRXJCQSxnQkFBZ0I2QixTQUFoQixHQUE0QjtBQUMxQlAsYUFBV1Esb0JBQVVDLE1BREs7QUFFMUJWLFlBQVVTLG9CQUFVRSxJQUZNO0FBRzFCbEIsU0FBT2dCLG9CQUFVRyxHQUhTO0FBSTFCbEIsV0FBU2Usb0JBQVVDLE1BSk87QUFLMUJmLFFBQU1jLG9CQUFVQyxNQUxVO0FBTTFCbkIsYUFBV2tCLG9CQUFVSSxJQU5LO0FBTzFCckIsV0FBU2lCLG9CQUFVSSxJQVBPO0FBUTFCakIsY0FBWWEsb0JBQVVJLElBUkk7QUFTMUJoQixjQUFZWSxvQkFBVUksSUFUSTtBQVUxQmYscUJBQW1CVyxvQkFBVUcsR0FWSDtBQVcxQmIscUJBQW1CVSxvQkFBVUc7QUFYSCxDQUE1QiIsImZpbGUiOiJEaWN0YXRlQ2hlY2tib3guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IENvbXBvc2VyIGZyb20gJy4vQ29tcG9zZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaWN0YXRlQ2hlY2tib3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuaGFuZGxlQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZURpY3RhdGUgPSB0aGlzLmhhbmRsZURpY3RhdGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZUVycm9yID0gdGhpcy5oYW5kbGVFcnJvci5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0YXJ0ZWQ6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZSh7IHRhcmdldDogeyBjaGVja2VkOiBzdGFydGVkIH0gfSkge1xuICAgIHRoaXMuc2V0U3RhdGUoKCkgPT4gKHsgc3RhcnRlZCB9KSk7XG4gIH1cblxuICBoYW5kbGVEaWN0YXRlKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSgoKSA9PiAoeyBzdGFydGVkOiBmYWxzZSB9KSk7XG4gICAgdGhpcy5wcm9wcy5vbkRpY3RhdGUgJiYgdGhpcy5wcm9wcy5vbkRpY3RhdGUoZXZlbnQpO1xuICB9XG5cbiAgaGFuZGxlRXJyb3IoZXZlbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKCgpID0+ICh7IHN0YXJ0ZWQ6IGZhbHNlIH0pKTtcbiAgICB0aGlzLnByb3BzLm9uRXJyb3IgJiYgdGhpcy5wcm9wcy5vbkVycm9yKGV2ZW50KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHByb3BzLCBzdGF0ZSB9ID0gdGhpcztcblxuICAgIHJldHVybiAoXG4gICAgICA8Q29tcG9zZXJcbiAgICAgICAgZXh0cmE9eyBwcm9wcy5leHRyYSB9XG4gICAgICAgIGdyYW1tYXI9eyBwcm9wcy5ncmFtbWFyIH1cbiAgICAgICAgbGFuZz17IHByb3BzLmxhbmcgfVxuICAgICAgICBvbkRpY3RhdGU9eyB0aGlzLmhhbmRsZURpY3RhdGUgfVxuICAgICAgICBvbkVycm9yPXsgdGhpcy5oYW5kbGVFcnJvciB9XG4gICAgICAgIG9uUHJvZ3Jlc3M9eyBwcm9wcy5vblByb2dyZXNzIH1cbiAgICAgICAgb25SYXdFdmVudD17IHByb3BzLm9uUmF3RXZlbnQgfVxuICAgICAgICBzcGVlY2hHcmFtbWFyTGlzdD17IHByb3BzLnNwZWVjaEdyYW1tYXJMaXN0IH1cbiAgICAgICAgc3BlZWNoUmVjb2duaXRpb249eyBwcm9wcy5zcGVlY2hSZWNvZ25pdGlvbiB9XG4gICAgICAgIHN0YXJ0ZWQ9eyBzdGF0ZS5zdGFydGVkICYmICFwcm9wcy5kaXNhYmxlZCB9XG4gICAgICA+XG4gICAgICAgIHsgY29udGV4dCA9PlxuICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICBjaGVja2VkPXsgc3RhdGUuc3RhcnRlZCB9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17IHByb3BzLmNsYXNzTmFtZSB9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlYWR5U3RhdGUgPT09IDFcbiAgICAgICAgICAgICAgICB8fCBjb250ZXh0LnJlYWR5U3RhdGUgPT09IDNcbiAgICAgICAgICAgICAgICB8fCAhY29udGV4dC5zdXBwb3J0ZWRcbiAgICAgICAgICAgICAgICB8fCBwcm9wcy5kaXNhYmxlZFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsgdGhpcy5oYW5kbGVDaGFuZ2UgfVxuICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdHlwZW9mIHByb3BzLmNoaWxkcmVuID09PSAnZnVuY3Rpb24nID9cbiAgICAgICAgICAgICAgICBwcm9wcy5jaGlsZHJlbih7IHJlYWR5U3RhdGU6IGNvbnRleHQucmVhZHlTdGF0ZSB9KVxuICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgcHJvcHMuY2hpbGRyZW5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICB9XG4gICAgICA8L0NvbXBvc2VyPlxuICAgICk7XG4gIH1cbn1cblxuRGljdGF0ZUNoZWNrYm94LnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGV4dHJhOiBQcm9wVHlwZXMuYW55LFxuICBncmFtbWFyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBsYW5nOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvbkRpY3RhdGU6IFByb3BUeXBlcy5mdW5jLFxuICBvbkVycm9yOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Qcm9ncmVzczogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uUmF3RXZlbnQ6IFByb3BUeXBlcy5mdW5jLFxuICBzcGVlY2hHcmFtbWFyTGlzdDogUHJvcFR5cGVzLmFueSxcbiAgc3BlZWNoUmVjb2duaXRpb246IFByb3BUeXBlcy5hbnlcbn07XG4iXX0=