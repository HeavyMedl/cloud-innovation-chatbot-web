'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Composer = require('./Composer');

var _Composer2 = _interopRequireDefault(_Composer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DictateButton = function (_React$Component) {
  _inherits(DictateButton, _React$Component);

  function DictateButton(props) {
    _classCallCheck(this, DictateButton);

    var _this = _possibleConstructorReturn(this, (DictateButton.__proto__ || Object.getPrototypeOf(DictateButton)).call(this, props));

    _this.handleClick = _this.handleClick.bind(_this);
    _this.handleDictate = _this.handleDictate.bind(_this);
    _this.handleError = _this.handleError.bind(_this);

    _this.state = {
      started: false
    };
    return _this;
  }

  _createClass(DictateButton, [{
    key: 'handleClick',
    value: function handleClick(event) {
      this.props.onClick && this.props.onClick(event);
      !event.isDefaultPrevented() && this.setState(function (_ref) {
        var started = _ref.started;
        return { started: !started };
      });
    }
  }, {
    key: 'handleDictate',
    value: function handleDictate(event) {
      this.setState(function () {
        return { started: false };
      });
      this.props.onDictate && this.props.onDictate(event);
    }
  }, {
    key: 'handleError',
    value: function handleError(event) {
      this.setState(function () {
        return { started: false };
      });
      this.props.onError && this.props.onError(event);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var props = this.props,
          state = this.state;


      return _react2.default.createElement(
        _Composer2.default,
        {
          extra: props.extra,
          grammar: props.grammar,
          lang: props.lang,
          onDictate: this.handleDictate,
          onError: this.handleError,
          onProgress: props.onProgress,
          onRawEvent: props.onRawEvent,
          speechGrammarList: props.speechGrammarList,
          speechRecognition: props.speechRecognition,
          started: state.started && !props.disabled
        },
        function (context) {
          return _react2.default.createElement(
            'button',
            {
              className: props.className,
              disabled: context.readyState === 1 || context.readyState === 3 || !context.supported || props.disabled,
              onClick: _this2.handleClick
            },
            typeof props.children === 'function' ? props.children({ readyState: context.readyState }) : props.children
          );
        }
      );
    }
  }]);

  return DictateButton;
}(_react2.default.Component);

exports.default = DictateButton;


DictateButton.propTypes = {
  className: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  extra: _propTypes2.default.any,
  grammar: _propTypes2.default.string,
  lang: _propTypes2.default.string,
  onClick: _propTypes2.default.func,
  onDictate: _propTypes2.default.func,
  onError: _propTypes2.default.func,
  onProgress: _propTypes2.default.func,
  onRawEvent: _propTypes2.default.func,
  speechGrammarList: _propTypes2.default.any,
  speechRecognition: _propTypes2.default.any
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9EaWN0YXRlQnV0dG9uLmpzIl0sIm5hbWVzIjpbIkRpY3RhdGVCdXR0b24iLCJwcm9wcyIsImhhbmRsZUNsaWNrIiwiYmluZCIsImhhbmRsZURpY3RhdGUiLCJoYW5kbGVFcnJvciIsInN0YXRlIiwic3RhcnRlZCIsImV2ZW50Iiwib25DbGljayIsImlzRGVmYXVsdFByZXZlbnRlZCIsInNldFN0YXRlIiwib25EaWN0YXRlIiwib25FcnJvciIsImV4dHJhIiwiZ3JhbW1hciIsImxhbmciLCJvblByb2dyZXNzIiwib25SYXdFdmVudCIsInNwZWVjaEdyYW1tYXJMaXN0Iiwic3BlZWNoUmVjb2duaXRpb24iLCJkaXNhYmxlZCIsImNsYXNzTmFtZSIsImNvbnRleHQiLCJyZWFkeVN0YXRlIiwic3VwcG9ydGVkIiwiY2hpbGRyZW4iLCJSZWFjdCIsIkNvbXBvbmVudCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsInN0cmluZyIsImJvb2wiLCJhbnkiLCJmdW5jIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFFQTs7Ozs7Ozs7Ozs7O0lBRXFCQSxhOzs7QUFDbkIseUJBQVlDLEtBQVosRUFBbUI7QUFBQTs7QUFBQSw4SEFDWEEsS0FEVzs7QUFHakIsVUFBS0MsV0FBTCxHQUFtQixNQUFLQSxXQUFMLENBQWlCQyxJQUFqQixPQUFuQjtBQUNBLFVBQUtDLGFBQUwsR0FBcUIsTUFBS0EsYUFBTCxDQUFtQkQsSUFBbkIsT0FBckI7QUFDQSxVQUFLRSxXQUFMLEdBQW1CLE1BQUtBLFdBQUwsQ0FBaUJGLElBQWpCLE9BQW5COztBQUVBLFVBQUtHLEtBQUwsR0FBYTtBQUNYQyxlQUFTO0FBREUsS0FBYjtBQVBpQjtBQVVsQjs7OztnQ0FFV0MsSyxFQUFPO0FBQ2pCLFdBQUtQLEtBQUwsQ0FBV1EsT0FBWCxJQUFzQixLQUFLUixLQUFMLENBQVdRLE9BQVgsQ0FBbUJELEtBQW5CLENBQXRCO0FBQ0EsT0FBQ0EsTUFBTUUsa0JBQU4sRUFBRCxJQUErQixLQUFLQyxRQUFMLENBQWM7QUFBQSxZQUFHSixPQUFILFFBQUdBLE9BQUg7QUFBQSxlQUFrQixFQUFFQSxTQUFTLENBQUNBLE9BQVosRUFBbEI7QUFBQSxPQUFkLENBQS9CO0FBQ0Q7OztrQ0FFYUMsSyxFQUFPO0FBQ25CLFdBQUtHLFFBQUwsQ0FBYztBQUFBLGVBQU8sRUFBRUosU0FBUyxLQUFYLEVBQVA7QUFBQSxPQUFkO0FBQ0EsV0FBS04sS0FBTCxDQUFXVyxTQUFYLElBQXdCLEtBQUtYLEtBQUwsQ0FBV1csU0FBWCxDQUFxQkosS0FBckIsQ0FBeEI7QUFDRDs7O2dDQUVXQSxLLEVBQU87QUFDakIsV0FBS0csUUFBTCxDQUFjO0FBQUEsZUFBTyxFQUFFSixTQUFTLEtBQVgsRUFBUDtBQUFBLE9BQWQ7QUFDQSxXQUFLTixLQUFMLENBQVdZLE9BQVgsSUFBc0IsS0FBS1osS0FBTCxDQUFXWSxPQUFYLENBQW1CTCxLQUFuQixDQUF0QjtBQUNEOzs7NkJBRVE7QUFBQTs7QUFBQSxVQUNDUCxLQURELEdBQ2tCLElBRGxCLENBQ0NBLEtBREQ7QUFBQSxVQUNRSyxLQURSLEdBQ2tCLElBRGxCLENBQ1FBLEtBRFI7OztBQUdQLGFBQ0U7QUFBQywwQkFBRDtBQUFBO0FBQ0UsaUJBQVFMLE1BQU1hLEtBRGhCO0FBRUUsbUJBQVViLE1BQU1jLE9BRmxCO0FBR0UsZ0JBQU9kLE1BQU1lLElBSGY7QUFJRSxxQkFBWSxLQUFLWixhQUpuQjtBQUtFLG1CQUFVLEtBQUtDLFdBTGpCO0FBTUUsc0JBQWFKLE1BQU1nQixVQU5yQjtBQU9FLHNCQUFhaEIsTUFBTWlCLFVBUHJCO0FBUUUsNkJBQW9CakIsTUFBTWtCLGlCQVI1QjtBQVNFLDZCQUFvQmxCLE1BQU1tQixpQkFUNUI7QUFVRSxtQkFBVWQsTUFBTUMsT0FBTixJQUFpQixDQUFDTixNQUFNb0I7QUFWcEM7QUFZSTtBQUFBLGlCQUNBO0FBQUE7QUFBQTtBQUNFLHlCQUFZcEIsTUFBTXFCLFNBRHBCO0FBRUUsd0JBQ0VDLFFBQVFDLFVBQVIsS0FBdUIsQ0FBdkIsSUFDR0QsUUFBUUMsVUFBUixLQUF1QixDQUQxQixJQUVHLENBQUNELFFBQVFFLFNBRlosSUFHR3hCLE1BQU1vQixRQU5iO0FBUUUsdUJBQVUsT0FBS25CO0FBUmpCO0FBV0ksbUJBQU9ELE1BQU15QixRQUFiLEtBQTBCLFVBQTFCLEdBQ0V6QixNQUFNeUIsUUFBTixDQUFlLEVBQUVGLFlBQVlELFFBQVFDLFVBQXRCLEVBQWYsQ0FERixHQUdFdkIsTUFBTXlCO0FBZFosV0FEQTtBQUFBO0FBWkosT0FERjtBQWtDRDs7OztFQWpFd0NDLGdCQUFNQyxTOztrQkFBNUI1QixhOzs7QUFvRXJCQSxjQUFjNkIsU0FBZCxHQUEwQjtBQUN4QlAsYUFBV1Esb0JBQVVDLE1BREc7QUFFeEJWLFlBQVVTLG9CQUFVRSxJQUZJO0FBR3hCbEIsU0FBT2dCLG9CQUFVRyxHQUhPO0FBSXhCbEIsV0FBU2Usb0JBQVVDLE1BSks7QUFLeEJmLFFBQU1jLG9CQUFVQyxNQUxRO0FBTXhCdEIsV0FBU3FCLG9CQUFVSSxJQU5LO0FBT3hCdEIsYUFBV2tCLG9CQUFVSSxJQVBHO0FBUXhCckIsV0FBU2lCLG9CQUFVSSxJQVJLO0FBU3hCakIsY0FBWWEsb0JBQVVJLElBVEU7QUFVeEJoQixjQUFZWSxvQkFBVUksSUFWRTtBQVd4QmYscUJBQW1CVyxvQkFBVUcsR0FYTDtBQVl4QmIscUJBQW1CVSxvQkFBVUc7QUFaTCxDQUExQiIsImZpbGUiOiJEaWN0YXRlQnV0dG9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBDb21wb3NlciBmcm9tICcuL0NvbXBvc2VyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGljdGF0ZUJ1dHRvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5oYW5kbGVDbGljayA9IHRoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZURpY3RhdGUgPSB0aGlzLmhhbmRsZURpY3RhdGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZUVycm9yID0gdGhpcy5oYW5kbGVFcnJvci5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0YXJ0ZWQ6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgdGhpcy5wcm9wcy5vbkNsaWNrICYmIHRoaXMucHJvcHMub25DbGljayhldmVudCk7XG4gICAgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICYmIHRoaXMuc2V0U3RhdGUoKHsgc3RhcnRlZCB9KSA9PiAoeyBzdGFydGVkOiAhc3RhcnRlZCB9KSk7XG4gIH1cblxuICBoYW5kbGVEaWN0YXRlKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSgoKSA9PiAoeyBzdGFydGVkOiBmYWxzZSB9KSk7XG4gICAgdGhpcy5wcm9wcy5vbkRpY3RhdGUgJiYgdGhpcy5wcm9wcy5vbkRpY3RhdGUoZXZlbnQpO1xuICB9XG5cbiAgaGFuZGxlRXJyb3IoZXZlbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKCgpID0+ICh7IHN0YXJ0ZWQ6IGZhbHNlIH0pKTtcbiAgICB0aGlzLnByb3BzLm9uRXJyb3IgJiYgdGhpcy5wcm9wcy5vbkVycm9yKGV2ZW50KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHByb3BzLCBzdGF0ZSB9ID0gdGhpcztcblxuICAgIHJldHVybiAoXG4gICAgICA8Q29tcG9zZXJcbiAgICAgICAgZXh0cmE9eyBwcm9wcy5leHRyYSB9XG4gICAgICAgIGdyYW1tYXI9eyBwcm9wcy5ncmFtbWFyIH1cbiAgICAgICAgbGFuZz17IHByb3BzLmxhbmcgfVxuICAgICAgICBvbkRpY3RhdGU9eyB0aGlzLmhhbmRsZURpY3RhdGUgfVxuICAgICAgICBvbkVycm9yPXsgdGhpcy5oYW5kbGVFcnJvciB9XG4gICAgICAgIG9uUHJvZ3Jlc3M9eyBwcm9wcy5vblByb2dyZXNzIH1cbiAgICAgICAgb25SYXdFdmVudD17IHByb3BzLm9uUmF3RXZlbnQgfVxuICAgICAgICBzcGVlY2hHcmFtbWFyTGlzdD17IHByb3BzLnNwZWVjaEdyYW1tYXJMaXN0IH1cbiAgICAgICAgc3BlZWNoUmVjb2duaXRpb249eyBwcm9wcy5zcGVlY2hSZWNvZ25pdGlvbiB9XG4gICAgICAgIHN0YXJ0ZWQ9eyBzdGF0ZS5zdGFydGVkICYmICFwcm9wcy5kaXNhYmxlZCB9XG4gICAgICA+XG4gICAgICAgIHsgY29udGV4dCA9PlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT17IHByb3BzLmNsYXNzTmFtZSB9XG4gICAgICAgICAgICBkaXNhYmxlZD17XG4gICAgICAgICAgICAgIGNvbnRleHQucmVhZHlTdGF0ZSA9PT0gMVxuICAgICAgICAgICAgICB8fCBjb250ZXh0LnJlYWR5U3RhdGUgPT09IDNcbiAgICAgICAgICAgICAgfHwgIWNvbnRleHQuc3VwcG9ydGVkXG4gICAgICAgICAgICAgIHx8IHByb3BzLmRpc2FibGVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvbkNsaWNrPXsgdGhpcy5oYW5kbGVDbGljayB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgP1xuICAgICAgICAgICAgICAgIHByb3BzLmNoaWxkcmVuKHsgcmVhZHlTdGF0ZTogY29udGV4dC5yZWFkeVN0YXRlIH0pXG4gICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICBwcm9wcy5jaGlsZHJlblxuICAgICAgICAgICAgfVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICB9XG4gICAgICA8L0NvbXBvc2VyPlxuICAgICk7XG4gIH1cbn1cblxuRGljdGF0ZUJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICBleHRyYTogUHJvcFR5cGVzLmFueSxcbiAgZ3JhbW1hcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgbGFuZzogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRGljdGF0ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRXJyb3I6IFByb3BUeXBlcy5mdW5jLFxuICBvblByb2dyZXNzOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25SYXdFdmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIHNwZWVjaEdyYW1tYXJMaXN0OiBQcm9wVHlwZXMuYW55LFxuICBzcGVlY2hSZWNvZ25pdGlvbjogUHJvcFR5cGVzLmFueVxufTtcbiJdfQ==