{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _debounce = _interopRequireDefault(require(\"./debounce\"));\n\nvar _memoize = _interopRequireDefault(require(\"./memoize\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar ScrollSpy =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ScrollSpy, _React$Component);\n\n  function ScrollSpy(props, context) {\n    var _this;\n\n    _classCallCheck(this, ScrollSpy);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScrollSpy).call(this, props, context));\n    _this.handlePointerOver = (0, _debounce.default)(_this.handlePointerOver.bind(_assertThisInitialized(_assertThisInitialized(_this))), 300);\n    _this.handleScroll = _this.handleScroll.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.emitScroll = (0, _memoize.default)(function (initial, fraction, width) {\n      _this.props.onScroll && _this.props.onScroll({\n        initial: initial,\n        fraction: fraction,\n        width: width\n      });\n    });\n    return _this;\n  }\n\n  _createClass(ScrollSpy, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props$targetRef = this.props.targetRef;\n      _this$props$targetRef = _this$props$targetRef === void 0 ? {} : _this$props$targetRef;\n      var current = _this$props$targetRef.current;\n\n      if (current) {\n        current.addEventListener('pointerover', this.handlePointerOver, {\n          passive: true\n        });\n        current.addEventListener('scroll', this.handleScroll, {\n          passive: true\n        });\n        this.emitInitialScrollEvent(current);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.targetRef !== this.props.targetRef) {\n        var _prevProps$targetRef = prevProps.targetRef;\n        _prevProps$targetRef = _prevProps$targetRef === void 0 ? {} : _prevProps$targetRef;\n        var prevCurrent = _prevProps$targetRef.current;\n        var _this$props$targetRef2 = this.props.targetRef;\n        _this$props$targetRef2 = _this$props$targetRef2 === void 0 ? {} : _this$props$targetRef2;\n        var current = _this$props$targetRef2.current;\n\n        if (prevCurrent) {\n          prevCurrent.removeEventListener('pointerover', this.handlePointerOver);\n          prevCurrent.removeEventListener('scroll', this.handleScroll);\n        }\n\n        if (current) {\n          current.addEventListener('pointerover', this.handlePointerOver, {\n            passive: true\n          });\n          current.addEventListener('scroll', this.handleScroll, {\n            passive: true\n          });\n          this.emitInitialScrollEvent(current);\n        }\n      }\n    }\n  }, {\n    key: \"emitInitialScrollEvent\",\n    value: function emitInitialScrollEvent(current, waited) {\n      var _this2 = this;\n\n      if (!waited && current.scrollWidth === current.offsetWidth) {\n        // HACK: Chrome 66 will initially say scrollWidth equals to offsetWidth, until some time later\n        setTimeout(function () {\n          return _this2.emitInitialScrollEvent(current, true);\n        });\n      }\n\n      this.handleScroll({\n        target: current\n      }, true);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props$targetRef3 = this.props.targetRef;\n      _this$props$targetRef3 = _this$props$targetRef3 === void 0 ? {} : _this$props$targetRef3;\n      var current = _this$props$targetRef3.current;\n      current && current.removeEventListener('scroll', this.handleScroll);\n    }\n  }, {\n    key: \"handlePointerOver\",\n    value: function handlePointerOver() {\n      // We need to send \"onScroll\" because \"scrollWidth\" might have changed\n      // For example, the container resized, the scroll width will be incorrect\n      // We will debounce to prevent \"pointerOver\" calculating too often\n      // We will memoize to prevent firing unnecessary \"onScroll\"\n      var _this$props$targetRef4 = this.props.targetRef;\n      _this$props$targetRef4 = _this$props$targetRef4 === void 0 ? {} : _this$props$targetRef4;\n      var current = _this$props$targetRef4.current;\n      this.handleScroll({\n        target: current\n      });\n    }\n  }, {\n    key: \"handleScroll\",\n    value: function handleScroll(_ref) {\n      var target = _ref.target;\n      var initial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var offsetWidth = target.offsetWidth,\n          scrollLeft = target.scrollLeft,\n          scrollWidth = target.scrollWidth;\n      this.emitScroll(initial, \"\".concat(scrollWidth === offsetWidth ? 0 : scrollLeft / (scrollWidth - offsetWidth) * 100, \"%\"), \"\".concat(offsetWidth / scrollWidth * 100, \"%\"));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return false;\n    }\n  }]);\n\n  return ScrollSpy;\n}(_react.default.Component);\n\nexports.default = ScrollSpy;","map":null,"metadata":{},"sourceType":"script"}