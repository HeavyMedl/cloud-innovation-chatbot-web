{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connectSpeakActivity = exports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _SayAlt = _interopRequireDefault(require(\"./SayAlt\"));\n\nvar _reactSay = _interopRequireDefault(require(\"react-say\"));\n\nvar _connectToWebChat = _interopRequireDefault(require(\"../connectToWebChat\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // TODO: [P4] Consider moving this feature into BasicActivity\n//       And it has better DOM position for showing visual spoken text\n// TODO: [P3] We should add a \"spoken\" or \"speakState\" flag to indicate whether this activity is going to speak, or spoken\n\n\nvar connectSpeakActivity = function connectSpeakActivity() {\n  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {\n    selectors[_key] = arguments[_key];\n  }\n\n  return _connectToWebChat.default.apply(void 0, [function (_ref, _ref2) {\n    var language = _ref.language,\n        markActivity = _ref.markActivity;\n    var activity = _ref2.activity;\n    return {\n      language: language,\n      markAsSpoken: function markAsSpoken() {\n        markActivity(activity, 'speak', false);\n      },\n      selectVoice: function selectVoice(voices) {\n        return [].find.call(voices, function (voice) {\n          return voice.lang === activity.locale;\n        }) || [].find.call(voices, function (voice) {\n          return voice.lang === language;\n        }) || [].find.call(voices, function (voice) {\n          return voice.lang === window.navigator.language;\n        }) || [].find.call(voices, function (voice) {\n          return voice.lang === 'en-US';\n        }) || voices[0];\n      }\n    };\n  }].concat(selectors));\n};\n\nexports.connectSpeakActivity = connectSpeakActivity;\n\nvar _default = connectSpeakActivity(function (_ref3) {\n  var styleSet = _ref3.styleSet;\n  return {\n    styleSet: styleSet\n  };\n})(function (_ref4) {\n  var activity = _ref4.activity,\n      markAsSpoken = _ref4.markAsSpoken,\n      selectVoice = _ref4.selectVoice,\n      styleSet = _ref4.styleSet;\n\n  if (!activity) {\n    return false;\n  }\n\n  var lines = [activity.speak || activity.text];\n  (activity.attachments || []).forEach(function (_ref5) {\n    var content = _ref5.content,\n        contentType = _ref5.contentType;\n\n    switch (contentType) {\n      case 'application/vnd.microsoft.card.adaptive':\n        lines.push(content.speak);\n        break;\n\n      case 'application/vnd.microsoft.card.animation':\n      case 'application/vnd.microsoft.card.audio':\n      case 'application/vnd.microsoft.card.video':\n      case 'application/vnd.microsoft.card.hero':\n      case 'application/vnd.microsoft.card.thumbnail':\n        lines.push(content.title);\n        lines.push(content.subtitle);\n        lines.push(content.text);\n        break;\n\n      case 'application/vnd.microsoft.card.receipt':\n        lines.push(content.title);\n        break;\n    }\n  });\n  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactSay.default, {\n    onEnd: markAsSpoken,\n    speak: lines.filter(function (line) {\n      return line;\n    }).join('\\r\\n'),\n    voice: selectVoice\n  }), !!styleSet.options.showSpokenText && _react.default.createElement(_SayAlt.default, {\n    speak: lines.filter(function (line) {\n      return line;\n    }).join('\\r\\n'),\n    voice: selectVoice\n  }));\n});\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}