{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Error_1 = require(\"./Error\");\n\nvar List_1 = require(\"./List\");\n\nvar Promise_1 = require(\"./Promise\");\n\nvar SubscriberType;\n\n(function (SubscriberType) {\n  SubscriberType[SubscriberType[\"Dequeue\"] = 0] = \"Dequeue\";\n  SubscriberType[SubscriberType[\"Peek\"] = 1] = \"Peek\";\n})(SubscriberType || (SubscriberType = {}));\n\nvar Queue =\n/** @class */\nfunction () {\n  function Queue(list) {\n    var _this = this;\n\n    this.promiseStore = new List_1.List();\n    this.isDrainInProgress = false;\n    this.isDisposing = false;\n    this.disposeReason = null;\n\n    this.Enqueue = function (item) {\n      _this.ThrowIfDispose();\n\n      _this.EnqueueFromPromise(Promise_1.PromiseHelper.FromResult(item));\n    };\n\n    this.EnqueueFromPromise = function (promise) {\n      _this.ThrowIfDispose();\n\n      _this.promiseStore.Add(promise);\n\n      promise.Finally(function () {\n        while (_this.promiseStore.Length() > 0) {\n          if (!_this.promiseStore.First().Result().IsCompleted) {\n            break;\n          } else {\n            var p = _this.promiseStore.RemoveFirst();\n\n            if (!p.Result().IsError) {\n              _this.list.Add(p.Result().Result);\n            } else {// TODO: Log as warning.\n            }\n          }\n        }\n      });\n    };\n\n    this.Dequeue = function () {\n      _this.ThrowIfDispose();\n\n      var deferredSubscriber = new Promise_1.Deferred();\n\n      _this.subscribers.Add({\n        deferral: deferredSubscriber,\n        type: SubscriberType.Dequeue\n      });\n\n      _this.Drain();\n\n      return deferredSubscriber.Promise();\n    };\n\n    this.Peek = function () {\n      _this.ThrowIfDispose();\n\n      var deferredSubscriber = new Promise_1.Deferred();\n\n      _this.subscribers.Add({\n        deferral: deferredSubscriber,\n        type: SubscriberType.Peek\n      });\n\n      _this.Drain();\n\n      return deferredSubscriber.Promise();\n    };\n\n    this.Length = function () {\n      _this.ThrowIfDispose();\n\n      return _this.list.Length();\n    };\n\n    this.IsDisposed = function () {\n      return _this.subscribers == null;\n    };\n\n    this.DrainAndDispose = function (pendingItemProcessor, reason) {\n      if (!_this.IsDisposed() && !_this.isDisposing) {\n        _this.disposeReason = reason;\n        _this.isDisposing = true;\n\n        while (_this.subscribers.Length() > 0) {\n          var subscriber = _this.subscribers.RemoveFirst(); // TODO: this needs work (Resolve(null) instead?).\n\n\n          subscriber.deferral.Reject(\"Disposed\");\n        }\n\n        for (var _i = 0, _a = _this.detachables; _i < _a.length; _i++) {\n          var detachable = _a[_i];\n          detachable.Detach();\n        }\n\n        if (_this.promiseStore.Length() > 0 && pendingItemProcessor) {\n          return Promise_1.PromiseHelper.WhenAll(_this.promiseStore.ToArray()).ContinueWith(function () {\n            _this.subscribers = null;\n\n            _this.list.ForEach(function (item, index) {\n              pendingItemProcessor(item);\n            });\n\n            _this.list = null;\n            return true;\n          });\n        } else {\n          _this.subscribers = null;\n          _this.list = null;\n        }\n      }\n\n      return Promise_1.PromiseHelper.FromResult(true);\n    };\n\n    this.Dispose = function (reason) {\n      _this.DrainAndDispose(null, reason);\n    };\n\n    this.Drain = function () {\n      if (!_this.isDrainInProgress && !_this.isDisposing) {\n        _this.isDrainInProgress = true;\n\n        while (_this.list.Length() > 0 && _this.subscribers.Length() > 0 && !_this.isDisposing) {\n          var subscriber = _this.subscribers.RemoveFirst();\n\n          if (subscriber.type === SubscriberType.Peek) {\n            subscriber.deferral.Resolve(_this.list.First());\n          } else {\n            var dequeuedItem = _this.list.RemoveFirst();\n\n            subscriber.deferral.Resolve(dequeuedItem);\n          }\n        }\n\n        _this.isDrainInProgress = false;\n      }\n    };\n\n    this.ThrowIfDispose = function () {\n      if (_this.IsDisposed()) {\n        if (_this.disposeReason) {\n          throw new Error_1.InvalidOperationError(_this.disposeReason);\n        }\n\n        throw new Error_1.ObjectDisposedError(\"Queue\");\n      } else if (_this.isDisposing) {\n        throw new Error_1.InvalidOperationError(\"Queue disposing\");\n      }\n    };\n\n    this.list = list ? list : new List_1.List();\n    this.detachables = [];\n    this.subscribers = new List_1.List();\n    this.detachables.push(this.list.OnAdded(this.Drain));\n  }\n\n  return Queue;\n}();\n\nexports.Queue = Queue;","map":null,"metadata":{},"sourceType":"script"}