{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connectSendStatus = exports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _botframeworkWebchatCore = require(\"botframework-webchat-core\");\n\nvar _connectToWebChat = _interopRequireDefault(require(\"../connectToWebChat\"));\n\nvar _Localize = _interopRequireWildcard(require(\"../Localization/Localize\"));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _Constants$ActivityCl = _botframeworkWebchatCore.Constants.ActivityClientState,\n    SEND_FAILED = _Constants$ActivityCl.SEND_FAILED,\n    SENDING = _Constants$ActivityCl.SENDING; // TODO: [P4] Currently, this is the only place which use a templated string\n//       We could refactor this into a general component if there are more templated strings\n\nfunction sendFailed(language, replace) {\n  var text = (0, _Localize.localize)('SEND_FAILED_KEY', language);\n  var retry = (0, _Localize.localize)('Retry', language);\n  var match = /\\{Retry\\}/.exec(text);\n\n  if (match) {\n    return _react.default.createElement(_react.default.Fragment, null, text.substr(0, match.index), replace(retry), text.substr(match.index + match[0].length));\n  } else {\n    return text;\n  }\n}\n\nvar connectSendStatus = function connectSendStatus() {\n  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {\n    selectors[_key] = arguments[_key];\n  }\n\n  return _connectToWebChat.default.apply(void 0, [function (_ref, _ref2) {\n    var focusSendBox = _ref.focusSendBox,\n        language = _ref.language,\n        postActivity = _ref.postActivity;\n    var activity = _ref2.activity;\n    return {\n      language: language,\n      retrySend: function retrySend(evt) {\n        evt.preventDefault();\n        postActivity(activity); // After clicking on \"retry\", the button will be gone and focus will be lost (back to document.body)\n        // We want to make sure the user stay inside Web Chat\n\n        focusSendBox();\n      }\n    };\n  }].concat(selectors));\n};\n\nexports.connectSendStatus = connectSendStatus;\n\nvar _default = connectSendStatus(function (_ref3) {\n  var styleSet = _ref3.styleSet;\n  return {\n    styleSet: styleSet\n  };\n})(function (_ref4) {\n  var _ref4$activity$channe = _ref4.activity.channelData;\n  _ref4$activity$channe = _ref4$activity$channe === void 0 ? {} : _ref4$activity$channe;\n  var state = _ref4$activity$channe.state,\n      language = _ref4.language,\n      retrySend = _ref4.retrySend,\n      styleSet = _ref4.styleSet;\n  return _react.default.createElement(\"span\", {\n    \"aria-live\": \"polite\",\n    className: styleSet.sendStatus\n  }, state === SENDING ? _react.default.createElement(_Localize.default, {\n    text: \"Sending\"\n  }) : state === SEND_FAILED ? sendFailed(language, function (retry) {\n    return _react.default.createElement(\"button\", {\n      onClick: retrySend,\n      type: \"button\"\n    }, retry);\n  }) : false);\n});\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}