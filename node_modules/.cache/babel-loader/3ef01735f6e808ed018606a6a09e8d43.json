{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Error_1 = require(\"./Error\");\n\nvar PromiseState;\n\n(function (PromiseState) {\n  PromiseState[PromiseState[\"None\"] = 0] = \"None\";\n  PromiseState[PromiseState[\"Resolved\"] = 1] = \"Resolved\";\n  PromiseState[PromiseState[\"Rejected\"] = 2] = \"Rejected\";\n})(PromiseState = exports.PromiseState || (exports.PromiseState = {}));\n\nvar PromiseResult =\n/** @class */\nfunction () {\n  function PromiseResult(promiseResultEventSource) {\n    var _this = this;\n\n    this.ThrowIfError = function () {\n      if (_this.IsError) {\n        throw _this.Error;\n      }\n    };\n\n    promiseResultEventSource.On(function (result) {\n      if (!_this.isCompleted) {\n        _this.isCompleted = true;\n        _this.isError = false;\n        _this.result = result;\n      }\n    }, function (error) {\n      if (!_this.isCompleted) {\n        _this.isCompleted = true;\n        _this.isError = true;\n        _this.error = error;\n      }\n    });\n  }\n\n  Object.defineProperty(PromiseResult.prototype, \"IsCompleted\", {\n    get: function () {\n      return this.isCompleted;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PromiseResult.prototype, \"IsError\", {\n    get: function () {\n      return this.isError;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PromiseResult.prototype, \"Error\", {\n    get: function () {\n      return this.error;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PromiseResult.prototype, \"Result\", {\n    get: function () {\n      return this.result;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PromiseResult;\n}();\n\nexports.PromiseResult = PromiseResult; // tslint:disable-next-line:max-classes-per-file\n\nvar PromiseResultEventSource =\n/** @class */\nfunction () {\n  function PromiseResultEventSource() {\n    var _this = this;\n\n    this.SetResult = function (result) {\n      _this.onSetResult(result);\n    };\n\n    this.SetError = function (error) {\n      _this.onSetError(error);\n    };\n\n    this.On = function (onSetResult, onSetError) {\n      _this.onSetResult = onSetResult;\n      _this.onSetError = onSetError;\n    };\n  }\n\n  return PromiseResultEventSource;\n}();\n\nexports.PromiseResultEventSource = PromiseResultEventSource; // tslint:disable-next-line:max-classes-per-file\n\nvar PromiseHelper =\n/** @class */\nfunction () {\n  function PromiseHelper() {}\n\n  PromiseHelper.WhenAll = function (promises) {\n    if (!promises || promises.length === 0) {\n      throw new Error_1.ArgumentNullError(\"promises\");\n    }\n\n    var deferred = new Deferred();\n    var errors = [];\n    var completedPromises = 0;\n\n    var checkForCompletion = function () {\n      completedPromises++;\n\n      if (completedPromises === promises.length) {\n        if (errors.length === 0) {\n          deferred.Resolve(true);\n        } else {\n          deferred.Reject(errors.join(\", \"));\n        }\n      }\n    };\n\n    for (var _i = 0, promises_1 = promises; _i < promises_1.length; _i++) {\n      var promise = promises_1[_i];\n      promise.On(function (r) {\n        checkForCompletion();\n      }, function (e) {\n        errors.push(e);\n        checkForCompletion();\n      });\n    }\n\n    return deferred.Promise();\n  };\n\n  PromiseHelper.FromResult = function (result) {\n    var deferred = new Deferred();\n    deferred.Resolve(result);\n    return deferred.Promise();\n  };\n\n  PromiseHelper.FromError = function (error) {\n    var deferred = new Deferred();\n    deferred.Reject(error);\n    return deferred.Promise();\n  };\n\n  return PromiseHelper;\n}();\n\nexports.PromiseHelper = PromiseHelper; // TODO: replace with ES6 promises\n// tslint:disable-next-line:max-classes-per-file\n\nvar Promise =\n/** @class */\nfunction () {\n  function Promise(sink) {\n    var _this = this;\n\n    this.Result = function () {\n      return _this.sink.Result;\n    };\n\n    this.ContinueWith = function (continuationCallback) {\n      if (!continuationCallback) {\n        throw new Error_1.ArgumentNullError(\"continuationCallback\");\n      }\n\n      var continuationDeferral = new Deferred();\n\n      _this.sink.on(function (r) {\n        try {\n          var continuationResult = continuationCallback(_this.sink.Result);\n          continuationDeferral.Resolve(continuationResult);\n        } catch (e) {\n          continuationDeferral.Reject(\"'Unhandled callback error: \" + e + \"'\");\n        }\n      }, function (error) {\n        try {\n          var continuationResult = continuationCallback(_this.sink.Result);\n          continuationDeferral.Resolve(continuationResult);\n        } catch (e) {\n          continuationDeferral.Reject(\"'Unhandled callback error: \" + e + \". InnerError: \" + error + \"'\");\n        }\n      });\n\n      return continuationDeferral.Promise();\n    };\n\n    this.OnSuccessContinueWith = function (continuationCallback) {\n      if (!continuationCallback) {\n        throw new Error_1.ArgumentNullError(\"continuationCallback\");\n      }\n\n      var continuationDeferral = new Deferred();\n\n      _this.sink.on(function (r) {\n        try {\n          var continuationResult = continuationCallback(r);\n          continuationDeferral.Resolve(continuationResult);\n        } catch (e) {\n          continuationDeferral.Reject(\"'Unhandled callback error: \" + e + \"'\");\n        }\n      }, function (error) {\n        continuationDeferral.Reject(\"'Unhandled callback error: \" + error + \"'\");\n      });\n\n      return continuationDeferral.Promise();\n    };\n\n    this.ContinueWithPromise = function (continuationCallback) {\n      if (!continuationCallback) {\n        throw new Error_1.ArgumentNullError(\"continuationCallback\");\n      }\n\n      var continuationDeferral = new Deferred();\n\n      _this.sink.on(function (r) {\n        try {\n          var continuationPromise = continuationCallback(_this.sink.Result);\n\n          if (!continuationPromise) {\n            throw new Error(\"'Continuation callback did not return promise'\");\n          }\n\n          continuationPromise.On(function (continuationResult) {\n            continuationDeferral.Resolve(continuationResult);\n          }, function (e) {\n            continuationDeferral.Reject(e);\n          });\n        } catch (e) {\n          continuationDeferral.Reject(\"'Unhandled callback error: \" + e + \"'\");\n        }\n      }, function (error) {\n        try {\n          var continuationPromise = continuationCallback(_this.sink.Result);\n\n          if (!continuationPromise) {\n            throw new Error(\"Continuation callback did not return promise\");\n          }\n\n          continuationPromise.On(function (continuationResult) {\n            continuationDeferral.Resolve(continuationResult);\n          }, function (e) {\n            continuationDeferral.Reject(e);\n          });\n        } catch (e) {\n          continuationDeferral.Reject(\"'Unhandled callback error: \" + e + \". InnerError: \" + error + \"'\");\n        }\n      });\n\n      return continuationDeferral.Promise();\n    };\n\n    this.OnSuccessContinueWithPromise = function (continuationCallback) {\n      if (!continuationCallback) {\n        throw new Error_1.ArgumentNullError(\"continuationCallback\");\n      }\n\n      var continuationDeferral = new Deferred();\n\n      _this.sink.on(function (r) {\n        try {\n          var continuationPromise = continuationCallback(r);\n\n          if (!continuationPromise) {\n            throw new Error(\"Continuation callback did not return promise\");\n          }\n\n          continuationPromise.On(function (continuationResult) {\n            continuationDeferral.Resolve(continuationResult);\n          }, function (e) {\n            continuationDeferral.Reject(e);\n          });\n        } catch (e) {\n          continuationDeferral.Reject(\"'Unhandled callback error: \" + e + \"'\");\n        }\n      }, function (error) {\n        continuationDeferral.Reject(\"'Unhandled callback error: \" + error + \".'\");\n      });\n\n      return continuationDeferral.Promise();\n    };\n\n    this.On = function (successCallback, errorCallback) {\n      if (!successCallback) {\n        throw new Error_1.ArgumentNullError(\"successCallback\");\n      }\n\n      if (!errorCallback) {\n        throw new Error_1.ArgumentNullError(\"errorCallback\");\n      }\n\n      _this.sink.on(successCallback, errorCallback);\n\n      return _this;\n    };\n\n    this.Finally = function (callback) {\n      if (!callback) {\n        throw new Error_1.ArgumentNullError(\"callback\");\n      }\n\n      var callbackWrapper = function (_) {\n        callback();\n      };\n\n      return _this.On(callbackWrapper, callbackWrapper);\n    };\n\n    this.sink = sink;\n  }\n\n  return Promise;\n}();\n\nexports.Promise = Promise; // tslint:disable-next-line:max-classes-per-file\n\nvar Deferred =\n/** @class */\nfunction () {\n  function Deferred() {\n    var _this = this;\n\n    this.State = function () {\n      return _this.sink.State;\n    };\n\n    this.Promise = function () {\n      return _this.promise;\n    };\n\n    this.Resolve = function (result) {\n      _this.sink.Resolve(result);\n\n      return _this;\n    };\n\n    this.Reject = function (error) {\n      _this.sink.Reject(error);\n\n      return _this;\n    };\n\n    this.sink = new Sink();\n    this.promise = new Promise(this.sink);\n  }\n\n  return Deferred;\n}();\n\nexports.Deferred = Deferred; // tslint:disable-next-line:max-classes-per-file\n\nvar Sink =\n/** @class */\nfunction () {\n  function Sink() {\n    var _this = this;\n\n    this.state = PromiseState.None;\n    this.promiseResult = null;\n    this.promiseResultEvents = null;\n    this.successHandlers = [];\n    this.errorHandlers = [];\n\n    this.Resolve = function (result) {\n      if (_this.state !== PromiseState.None) {\n        throw new Error(\"'Cannot resolve a completed promise'\");\n      }\n\n      _this.state = PromiseState.Resolved;\n\n      _this.promiseResultEvents.SetResult(result);\n\n      for (var i = 0; i < _this.successHandlers.length; i++) {\n        _this.ExecuteSuccessCallback(result, _this.successHandlers[i], _this.errorHandlers[i]);\n      }\n\n      _this.DetachHandlers();\n    };\n\n    this.Reject = function (error) {\n      if (_this.state !== PromiseState.None) {\n        throw new Error(\"'Cannot reject a completed promise'\");\n      }\n\n      _this.state = PromiseState.Rejected;\n\n      _this.promiseResultEvents.SetError(error);\n\n      for (var _i = 0, _a = _this.errorHandlers; _i < _a.length; _i++) {\n        var errorHandler = _a[_i];\n\n        _this.ExecuteErrorCallback(error, errorHandler);\n      }\n\n      _this.DetachHandlers();\n    };\n\n    this.on = function (successCallback, errorCallback) {\n      if (successCallback == null) {\n        successCallback = function (r) {\n          return;\n        };\n      }\n\n      if (_this.state === PromiseState.None) {\n        _this.successHandlers.push(successCallback);\n\n        _this.errorHandlers.push(errorCallback);\n      } else {\n        if (_this.state === PromiseState.Resolved) {\n          _this.ExecuteSuccessCallback(_this.promiseResult.Result, successCallback, errorCallback);\n        } else if (_this.state === PromiseState.Rejected) {\n          _this.ExecuteErrorCallback(_this.promiseResult.Error, errorCallback);\n        }\n\n        _this.DetachHandlers();\n      }\n    };\n\n    this.ExecuteSuccessCallback = function (result, successCallback, errorCallback) {\n      try {\n        successCallback(result);\n      } catch (e) {\n        _this.ExecuteErrorCallback(\"'Unhandled callback error: \" + e + \"'\", errorCallback);\n      }\n    };\n\n    this.ExecuteErrorCallback = function (error, errorCallback) {\n      if (errorCallback) {\n        try {\n          errorCallback(error);\n        } catch (e) {\n          throw new Error(\"'Unhandled callback error: \" + e + \". InnerError: \" + error + \"'\");\n        }\n      } else {\n        throw new Error(\"'Unhandled error: \" + error + \"'\");\n      }\n    };\n\n    this.DetachHandlers = function () {\n      _this.errorHandlers = [];\n      _this.successHandlers = [];\n    };\n\n    this.promiseResultEvents = new PromiseResultEventSource();\n    this.promiseResult = new PromiseResult(this.promiseResultEvents);\n  }\n\n  Object.defineProperty(Sink.prototype, \"State\", {\n    get: function () {\n      return this.state;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sink.prototype, \"Result\", {\n    get: function () {\n      return this.promiseResult;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Sink;\n}();\n\nexports.Sink = Sink;","map":null,"metadata":{},"sourceType":"script"}