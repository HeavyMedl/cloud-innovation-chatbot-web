{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createSuggestedActionsStyleSet;\n\nvar _glamor = require(\"glamor\");\n\nvar _reactFilm = require(\"react-film\");\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction createSuggestedActionsStyleSet(_ref) {\n  var _hoverScrolling;\n\n  var paddingRegular = _ref.paddingRegular,\n      transcriptOverlayButtonBackground = _ref.transcriptOverlayButtonBackground,\n      transcriptOverlayButtonBackgroundOnDisabled = _ref.transcriptOverlayButtonBackgroundOnDisabled,\n      transcriptOverlayButtonBackgroundOnFocus = _ref.transcriptOverlayButtonBackgroundOnFocus,\n      transcriptOverlayButtonBackgroundOnHover = _ref.transcriptOverlayButtonBackgroundOnHover,\n      transcriptOverlayButtonColor = _ref.transcriptOverlayButtonColor,\n      transcriptOverlayButtonColorOnDisabled = _ref.transcriptOverlayButtonColorOnDisabled,\n      transcriptOverlayButtonColorOnFocus = _ref.transcriptOverlayButtonColorOnFocus,\n      transcriptOverlayButtonColorOnHover = _ref.transcriptOverlayButtonColorOnHover;\n  var originalStyleSet = (0, _reactFilm.createBasicStyleSet)({\n    cursor: null,\n    flipperBoxWidth: 40,\n    flipperSize: 20,\n    scrollBarHeight: 6,\n    scrollBarMargin: 2\n  });\n  var flipper = (0, _glamor.css)({\n    '& > div.slider > div': {\n      background: transcriptOverlayButtonBackground,\n      color: transcriptOverlayButtonColor,\n      outline: 0\n    },\n    '&:disabled > div.slider > div': {\n      backgroundColor: transcriptOverlayButtonBackgroundOnDisabled,\n      color: transcriptOverlayButtonColorOnDisabled\n    },\n    '&:focus > div.slider > div': {\n      backgroundColor: transcriptOverlayButtonBackgroundOnFocus,\n      color: transcriptOverlayButtonColorOnFocus\n    },\n    '&:hover > div.slider > div': {\n      backgroundColor: transcriptOverlayButtonBackgroundOnHover,\n      color: transcriptOverlayButtonColorOnHover\n    }\n  });\n  var leftFlipper = (0, _glamor.css)(originalStyleSet.leftFlipper, flipper);\n  var rightFlipper = (0, _glamor.css)(originalStyleSet.rightFlipper, flipper);\n  var carousel = (0, _glamor.css)(originalStyleSet.carousel, {\n    '&:hover, &.scrolling': (_hoverScrolling = {}, _defineProperty(_hoverScrolling, \"& .\".concat(leftFlipper + '', \" > div.slider, & .\").concat(rightFlipper + '', \" > div.slider\"), {\n      transitionDelay: '0s'\n    }), _defineProperty(_hoverScrolling, \"& .\".concat(leftFlipper + '', \" > div.slider\"), {\n      left: 0\n    }), _defineProperty(_hoverScrolling, \"& .\".concat(rightFlipper + '', \" > div.slider\"), {\n      right: 0\n    }), _hoverScrolling),\n    '& > div': {\n      scrollbarWidth: 'none',\n      '& > ul > li': {\n        '&:first-child': {\n          paddingLeft: paddingRegular / 2\n        },\n        '&:last-child': {\n          paddingRight: paddingRegular / 2\n        }\n      }\n    }\n  }); // This is not CSS, but options to create style set for react-film\n\n  return _objectSpread({}, originalStyleSet, {\n    carousel: carousel,\n    leftFlipper: leftFlipper,\n    rightFlipper: rightFlipper\n  });\n}","map":null,"metadata":{},"sourceType":"script"}