{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _callee;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _sendMessageBack = require(\"../actions/sendMessageBack\");\n\nvar _postActivity = _interopRequireDefault(require(\"../actions/postActivity\"));\n\nvar _marked =\n/*#__PURE__*/\n_regenerator[\"default\"].mark(_callee),\n    _marked2 =\n/*#__PURE__*/\n_regenerator[\"default\"].mark(sendMessageBackToPostActivity),\n    _marked3 =\n/*#__PURE__*/\n_regenerator[\"default\"].mark(postActivityWithMessageBack);\n\nfunction _callee() {\n  return _regenerator[\"default\"].wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return (0, _whileConnected[\"default\"])(sendMessageBackToPostActivity);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction sendMessageBackToPostActivity() {\n  return _regenerator[\"default\"].wrap(function sendMessageBackToPostActivity$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return (0, _effects.takeEvery)(_sendMessageBack.SEND_MESSAGE_BACK, postActivityWithMessageBack);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction postActivityWithMessageBack(_ref) {\n  var _ref$payload, displayText, text, value;\n\n  return _regenerator[\"default\"].wrap(function postActivityWithMessageBack$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _ref$payload = _ref.payload, displayText = _ref$payload.displayText, text = _ref$payload.text, value = _ref$payload.value;\n\n          if (!(text || value)) {\n            _context3.next = 4;\n            break;\n          }\n\n          _context3.next = 4;\n          return (0, _effects.put)((0, _postActivity[\"default\"])({\n            channelData: {\n              messageBack: {\n                displayText: displayText\n              }\n            },\n            text: text,\n            type: 'message',\n            value: value\n          }));\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":null,"metadata":{},"sourceType":"script"}