{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _arrayToMap = _interopRequireDefault(require(\"../../Util/arrayToMap\"));\n\nvar _SpeechSDK = _interopRequireDefault(require(\"../SpeechSDK\"));\n\nvar _SpeechSDK$ResultReas = _SpeechSDK.default.ResultReason,\n    RecognizingSpeech = _SpeechSDK$ResultReas.RecognizingSpeech,\n    RecognizedSpeech = _SpeechSDK$ResultReas.RecognizedSpeech;\n\nfunction _default(result) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$maxAlternatives = _ref.maxAlternatives,\n      maxAlternatives = _ref$maxAlternatives === void 0 ? Infinity : _ref$maxAlternatives,\n      _ref$textNormalizatio = _ref.textNormalization,\n      textNormalization = _ref$textNormalizatio === void 0 ? 'display' : _ref$textNormalizatio;\n\n  if (result.reason === RecognizingSpeech) {\n    return [[{\n      confidence: .5,\n      transcript: result.text\n    }]];\n  } else if (result.reason === RecognizedSpeech) {\n    var resultList = [(0, _arrayToMap.default)((result.json.NBest || []).slice(0, maxAlternatives).map(function (_ref2) {\n      var confidence = _ref2.Confidence,\n          display = _ref2.Display,\n          itn = _ref2.ITN,\n          lexical = _ref2.Lexical,\n          maskedITN = _ref2.MaskedITN;\n      return {\n        confidence: confidence,\n        transcript: textNormalization === 'itn' ? itn : textNormalization === 'lexical' ? lexical : textNormalization === 'maskeditn' ? maskedITN : display\n      };\n    }), {\n      isFinal: true\n    })];\n    return resultList;\n  } else {\n    return [];\n  }\n}","map":null,"metadata":{},"sourceType":"script"}