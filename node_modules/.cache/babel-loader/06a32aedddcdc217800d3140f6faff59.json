{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _simpleUpdateIn = _interopRequireDefault(require(\"simple-update-in\"));\n\nvar _default =\n/*#__PURE__*/\nfunction () {\n  function _default() {\n    (0, _classCallCheck2.default)(this, _default);\n    this._referenceGrammar = null;\n    this._words = [];\n  }\n\n  (0, _createClass2.default)(_default, [{\n    key: \"addFromString\",\n    value: function addFromString() {\n      throw new Error('JSGF is not supported');\n    }\n  }, {\n    key: \"createSpeechContext\",\n    value: function createSpeechContext() {\n      var referenceGrammar = this.referenceGrammar,\n          words = this.words;\n      var speechContext;\n\n      if (referenceGrammar) {\n        speechContext = (0, _simpleUpdateIn.default)(speechContext, ['dgi', 'Groups'], function () {\n          var groups = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n          return (0, _toConsumableArray2.default)(groups).concat([{\n            Type: 'Generic',\n            Hints: {\n              ReferenceGrammar: referenceGrammar\n            }\n          }]);\n        });\n      }\n\n      if (words && words.length) {\n        speechContext = (0, _simpleUpdateIn.default)(speechContext, ['dgi', 'Groups'], function () {\n          var groups = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n          return (0, _toConsumableArray2.default)(groups).concat([{\n            Type: 'Generic',\n            Items: words.map(function (word) {\n              return {\n                Text: word\n              };\n            })\n          }]);\n        });\n      }\n\n      return speechContext;\n    }\n  }, {\n    key: \"referenceGrammar\",\n    get: function get() {\n      return this._referenceGrammar;\n    },\n    set: function set(nextReferenceGrammar) {\n      if (typeof nextReferenceGrammar !== 'string') {\n        throw new Error('referenceGrammar must be a string');\n      }\n\n      this._referenceGrammar = nextReferenceGrammar;\n    }\n  }, {\n    key: \"words\",\n    get: function get() {\n      return this._words;\n    },\n    set: function set(nextWords) {\n      if (!Array.isArray(nextWords)) {\n        throw new Error('words must be an Array');\n      }\n\n      this._words = nextWords;\n    }\n  }]);\n  return _default;\n}();\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}