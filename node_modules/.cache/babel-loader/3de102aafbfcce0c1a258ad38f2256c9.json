{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport isPromise from './isPromise.js';\n/**\n * Note to contributors: Please also remember to check and make sure\n * that `index.d.ts` is also up to date with the implementation when\n * you add new features or modify existing ones.\n */\n// The default async action types\n\nexport var PENDING = 'PENDING';\nexport var FULFILLED = 'FULFILLED';\nexport var REJECTED = 'REJECTED';\nvar defaultTypes = [PENDING, FULFILLED, REJECTED];\n/**\n * Function: promiseMiddleware\n * Description: The main promiseMiddleware accepts a configuration\n * object and returns the middleware.\n */\n\nexport default function promiseMiddleware() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var PROMISE_TYPE_SUFFIXES = config.promiseTypeSuffixes || defaultTypes;\n  var PROMISE_TYPE_DELIMITER = config.promiseTypeDelimiter || '_';\n  return function (ref) {\n    var dispatch = ref.dispatch;\n    return function (next) {\n      return function (action) {\n        /**\n         * Instantiate variables to hold:\n         * (1) the promise\n         * (2) the data for optimistic updates\n         */\n        var promise = void 0;\n        var data = void 0;\n        /**\n         * There are multiple ways to dispatch a promise. The first step is to\n         * determine if the promise is defined:\n         * (a) explicitly (action.payload.promise is the promise)\n         * (b) implicitly (action.payload is the promise)\n         * (c) as an async function (returns a promise when called)\n         *\n         * If the promise is not defined in one of these three ways, we don't do\n         * anything and move on to the next middleware in the middleware chain.\n         */\n        // Step 1a: Is there a payload?\n\n        if (action.payload) {\n          var PAYLOAD = action.payload; // Step 1.1: Is the promise implicitly defined?\n\n          if (isPromise(PAYLOAD)) {\n            promise = PAYLOAD;\n          } // Step 1.2: Is the promise explicitly defined?\n          else if (isPromise(PAYLOAD.promise)) {\n              promise = PAYLOAD.promise;\n              data = PAYLOAD.data;\n            } // Step 1.3: Is the promise returned by an async function?\n            else if (typeof PAYLOAD === 'function' || typeof PAYLOAD.promise === 'function') {\n                promise = PAYLOAD.promise ? PAYLOAD.promise() : PAYLOAD();\n                data = PAYLOAD.promise ? PAYLOAD.data : undefined; // Step 1.3.1: Is the return of action.payload a promise?\n\n                if (!isPromise(promise)) {\n                  // If not, move on to the next middleware.\n                  return next(_extends({}, action, {\n                    payload: promise\n                  }));\n                }\n              } // Step 1.4: If there's no promise, move on to the next middleware.\n              else {\n                  return next(action);\n                } // Step 1b: If there's no payload, move on to the next middleware.\n\n        } else {\n          return next(action);\n        }\n        /**\n         * Instantiate and define constants for:\n         * (1) the action type\n         * (2) the action meta\n         */\n\n\n        var TYPE = action.type;\n        var META = action.meta;\n        /**\n         * Instantiate and define constants for the action type suffixes.\n         * These are appended to the end of the action type.\n         */\n\n        var _PROMISE_TYPE_SUFFIXE = _slicedToArray(PROMISE_TYPE_SUFFIXES, 3),\n            _PENDING = _PROMISE_TYPE_SUFFIXE[0],\n            _FULFILLED = _PROMISE_TYPE_SUFFIXE[1],\n            _REJECTED = _PROMISE_TYPE_SUFFIXE[2];\n        /**\n         * Function: getAction\n         * Description: This function constructs and returns a rejected\n         * or fulfilled action object. The action object is based off the Flux\n         * Standard Action (FSA).\n         *\n         * Given an original action with the type FOO:\n         *\n         * The rejected object model will be:\n         * {\n         *   error: true,\n         *   type: 'FOO_REJECTED',\n         *   payload: ...,\n         *   meta: ... (optional)\n         * }\n         *\n         * The fulfilled object model will be:\n         * {\n         *   type: 'FOO_FULFILLED',\n         *   payload: ...,\n         *   meta: ... (optional)\n         * }\n         */\n\n\n        var getAction = function getAction(newPayload, isRejected) {\n          return _extends({\n            // Concatentate the type string property.\n            type: [TYPE, isRejected ? _REJECTED : _FULFILLED].join(PROMISE_TYPE_DELIMITER)\n          }, newPayload === null || typeof newPayload === 'undefined' ? {} : {\n            payload: newPayload\n          }, META !== undefined ? {\n            meta: META\n          } : {}, isRejected ? {\n            error: true\n          } : {});\n        };\n        /**\n         * Function: handleReject\n         * Calls: getAction to construct the rejected action\n         * Description: This function dispatches the rejected action and returns\n         * the original Error object. Please note the developer is responsible\n         * for constructing and throwing an Error object. The middleware does not\n         * construct any Errors.\n         */\n\n\n        var handleReject = function handleReject(reason) {\n          var rejectedAction = getAction(reason, true);\n          dispatch(rejectedAction);\n          throw reason;\n        };\n        /**\n         * Function: handleFulfill\n         * Calls: getAction to construct the fullfilled action\n         * Description: This function dispatches the fulfilled action and\n         * returns the success object. The success object should\n         * contain the value and the dispatched action.\n         */\n\n\n        var handleFulfill = function handleFulfill() {\n          var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          var resolvedAction = getAction(value, false);\n          dispatch(resolvedAction);\n          return {\n            value: value,\n            action: resolvedAction\n          };\n        };\n        /**\n         * First, dispatch the pending action:\n         * This object describes the pending state of a promise and will include\n         * any data (for optimistic updates) and/or meta from the original action.\n         */\n\n\n        next(_extends({\n          // Concatentate the type string.\n          type: [TYPE, _PENDING].join(PROMISE_TYPE_DELIMITER)\n        }, data !== undefined ? {\n          payload: data\n        } : {}, META !== undefined ? {\n          meta: META\n        } : {}));\n        /**\n         * Second, dispatch a rejected or fulfilled action and move on to the\n         * next middleware.\n         */\n\n        return promise.then(handleFulfill, handleReject);\n      };\n    };\n  };\n}","map":null,"metadata":{},"sourceType":"module"}