{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _callee2;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _forkPut = _interopRequireDefault(require(\"./effects/forkPut\"));\n\nvar _jsonwebtoken = require(\"jsonwebtoken\");\n\nvar _mathRandom = _interopRequireDefault(require(\"math-random\"));\n\nvar _updateConnectionStatus = _interopRequireWildcard(require(\"../actions/updateConnectionStatus\"));\n\nvar _createPromiseQueue = _interopRequireDefault(require(\"../createPromiseQueue\"));\n\nvar _botframeworkDirectlinejs = require(\"botframework-directlinejs\");\n\nvar _connect = require(\"../actions/connect\");\n\nvar _disconnect = require(\"../actions/disconnect\");\n\nvar _reconnect = require(\"../actions/reconnect\");\n\nvar _marked =\n/*#__PURE__*/\n_regenerator[\"default\"].mark(observeAndPutConnectionStatusUpdate),\n    _marked2 =\n/*#__PURE__*/\n_regenerator[\"default\"].mark(connectSaga),\n    _marked3 =\n/*#__PURE__*/\n_regenerator[\"default\"].mark(reconnectSaga),\n    _marked4 =\n/*#__PURE__*/\n_regenerator[\"default\"].mark(runAsyncEffect),\n    _marked5 =\n/*#__PURE__*/\n_regenerator[\"default\"].mark(takeDisconnectAsError),\n    _marked6 =\n/*#__PURE__*/\n_regenerator[\"default\"].mark(_callee2);\n\nvar CONNECTING = _botframeworkDirectlinejs.ConnectionStatus.Connecting,\n    ONLINE = _botframeworkDirectlinejs.ConnectionStatus.Online,\n    UNINITIALIZED = _botframeworkDirectlinejs.ConnectionStatus.Uninitialized;\n\nfunction randomUserID() {\n  return \"r_\".concat((0, _mathRandom[\"default\"])().toString(36).substr(2, 10));\n}\n\nfunction observeAndPutConnectionStatusUpdate(directLine) {\n  var connectionStatusQueue, connectionStatusSubscription, connectionStatus;\n  return _regenerator[\"default\"].wrap(function observeAndPutConnectionStatusUpdate$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          connectionStatusQueue = (0, _createPromiseQueue[\"default\"])();\n          connectionStatusSubscription = directLine.connectionStatus$.subscribe({\n            next: connectionStatusQueue.push\n          });\n          _context.prev = 2;\n\n        case 3:\n          _context.next = 5;\n          return (0, _effects.call)(connectionStatusQueue.shift);\n\n        case 5:\n          connectionStatus = _context.sent;\n          _context.next = 8;\n          return (0, _effects.put)((0, _updateConnectionStatus[\"default\"])(connectionStatus));\n\n        case 8:\n          _context.next = 3;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          connectionStatusSubscription.unsubscribe();\n          return _context.finish(10);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2,, 10, 13]]);\n}\n\nfunction rectifyUserID(directLine, userIDFromAction) {\n  var token = directLine.token;\n\n  var _ref = (0, _jsonwebtoken.decode)(token) || {},\n      userIDFromToken = _ref.user;\n\n  if (userIDFromToken) {\n    if (userIDFromAction && userIDFromAction !== userIDFromToken) {\n      console.warn('Web Chat: user ID is both specified in the Direct Line token and passed in, will use the user ID from the token.');\n    }\n\n    return userIDFromToken;\n  } else if (userIDFromAction) {\n    if (typeof userIDFromAction !== 'string') {\n      console.warn('Web Chat: user ID must be a string.');\n      return randomUserID();\n    } else if (/^dl_/.test(userIDFromAction)) {\n      console.warn('Web Chat: user ID prefixed with \"dl_\" is reserved and must be embedded into the Direct Line token to prevent forgery.');\n      return randomUserID();\n    }\n  } else {\n    return randomUserID();\n  }\n\n  return userIDFromAction;\n} // We could make this a Promise instead of saga (function generator) to make the code cleaner, if:\n// 1. We found a way to cancel Promise\n// 2. subscribe() are shared amongst all subscriptions, e.g. turn Observable into events\n\n\nfunction connectSaga(directLine) {\n  var activitySubscription, unsubscribeActivity, _ref2, connectionStatus;\n\n  return _regenerator[\"default\"].wrap(function connectSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          // DirectLineJS starts the connection only after the first subscriber for activity$, not connectionStatus$\n          activitySubscription = directLine.activity$.subscribe({\n            next: function next() {\n              return 0;\n            }\n          });\n          unsubscribeActivity = activitySubscription.unsubscribe.bind(activitySubscription);\n          _context2.prev = 2;\n\n        case 3:\n          _context2.next = 5;\n          return (0, _effects.take)(_updateConnectionStatus.UPDATE_CONNECTION_STATUS);\n\n        case 5:\n          _ref2 = _context2.sent;\n          connectionStatus = _ref2.payload.connectionStatus;\n\n          if (!(connectionStatus === ONLINE)) {\n            _context2.next = 11;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", function () {\n            unsubscribeActivity();\n            directLine.end();\n          });\n\n        case 11:\n          if (!(connectionStatus !== UNINITIALIZED && connectionStatus !== CONNECTING)) {\n            _context2.next = 13;\n            break;\n          }\n\n          throw new Error(\"Failed to connect, DirectLineJS returned \".concat(connectionStatus, \".\"));\n\n        case 13:\n          _context2.next = 3;\n          break;\n\n        case 15:\n          _context2.next = 21;\n          break;\n\n        case 17:\n          _context2.prev = 17;\n          _context2.t0 = _context2[\"catch\"](2); // We will unsubscribe if we failed to connect or got cancelled only.\n          // We should not unsubscribe in happy case, because DirectLineJS should relying on the subscription to connect/disconnect.\n\n          unsubscribeActivity();\n          throw _context2.t0;\n\n        case 21:\n          _context2.prev = 21;\n          _context2.next = 24;\n          return (0, _effects.cancelled)();\n\n        case 24:\n          if (!_context2.sent) {\n            _context2.next = 26;\n            break;\n          }\n\n          unsubscribeActivity();\n\n        case 26:\n          return _context2.finish(21);\n\n        case 27:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[2, 17, 21, 27]]);\n}\n\nfunction reconnectSaga() {\n  var _ref3, _connectionStatus;\n\n  return _regenerator[\"default\"].wrap(function reconnectSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _effects.take)(_updateConnectionStatus.UPDATE_CONNECTION_STATUS);\n\n        case 2:\n          _ref3 = _context3.sent;\n          _connectionStatus = _ref3.payload.connectionStatus;\n\n          if (!(_connectionStatus === ONLINE)) {\n            _context3.next = 8;\n            break;\n          }\n\n          return _context3.abrupt(\"break\", 12);\n\n        case 8:\n          if (!(_connectionStatus !== CONNECTING)) {\n            _context3.next = 10;\n            break;\n          }\n\n          throw new Error(\"Failed to reconnect. DirectLineJS returned \".concat(_connectionStatus, \".\"));\n\n        case 10:\n          _context3.next = 0;\n          break;\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n} // This is similar to behavior of redux-promise-middleware, but using saga instead of Promise.\n// We guarantee PENDING -> FULFILLING -> FULFILLED, or PENDING -> REJECTED. This will help us simplify logic in other part of code.\n// Note that after the saga is cancelled, subsequent call to put() will be ignored silently.\n\n\nfunction runAsyncEffect(_ref4, callEffectFactory) {\n  var type, meta, payload, result;\n  return _regenerator[\"default\"].wrap(function runAsyncEffect$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          type = _ref4.type, meta = _ref4.meta, payload = _ref4.payload;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return (0, _forkPut[\"default\"])({\n            type: \"\".concat(type, \"_PENDING\"),\n            meta: meta,\n            payload: payload\n          });\n\n        case 4:\n          _context4.next = 6;\n          return callEffectFactory();\n\n        case 6:\n          result = _context4.sent;\n          _context4.next = 9;\n          return (0, _forkPut[\"default\"])({\n            type: \"\".concat(type, \"_FULFILLING\"),\n            meta: meta,\n            payload: payload\n          }, {\n            type: \"\".concat(type, \"_FULFILLED\"),\n            meta: meta,\n            payload: payload\n          });\n\n        case 9:\n          return _context4.abrupt(\"return\", result);\n\n        case 12:\n          _context4.prev = 12;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 16;\n          return (0, _forkPut[\"default\"])({\n            type: \"\".concat(type, \"_REJECTED\"),\n            error: true,\n            meta: meta,\n            payload: _context4.t0\n          });\n\n        case 16:\n          throw _context4.t0;\n\n        case 17:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 12]]);\n}\n\nfunction takeDisconnectAsError() {\n  return _regenerator[\"default\"].wrap(function takeDisconnectAsError$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return (0, _effects.take)(_disconnect.DISCONNECT);\n\n        case 2:\n          throw new Error('disconnected');\n\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction runAsyncEffectUntilDisconnect(baseAction, callEffectFactory) {\n  // We cannot use saga cancel() here, because cancelling saga will prohibit us from sending *_REJECTED.\n  // Without REJECTED, it impacts our assumptions around PENDING/FULFILLED/REJECTED.\n  return runAsyncEffect(baseAction,\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee() {\n    var _ref5, result;\n\n    return _regenerator[\"default\"].wrap(function _callee$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return (0, _effects.race)({\n              _: takeDisconnectAsError(),\n              result: callEffectFactory()\n            });\n\n          case 2:\n            _ref5 = _context6.sent;\n            result = _ref5.result;\n            return _context6.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nfunction _callee2() {\n  var _loop;\n\n  return _regenerator[\"default\"].wrap(function _callee2$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _loop =\n          /*#__PURE__*/\n          _regenerator[\"default\"].mark(function _loop() {\n            var _ref6, _ref6$payload, directLine, userIDFromAction, username, updateConnectionStatusTask, disconnectMeta, meta, endDirectLine, _ref7, _ref7$updateConnectio, _ref7$updateConnectio2, _connectionStatus2;\n\n            return _regenerator[\"default\"].wrap(function _loop$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _context7.next = 2;\n                    return (0, _effects.take)(_connect.CONNECT);\n\n                  case 2:\n                    _ref6 = _context7.sent;\n                    _ref6$payload = _ref6.payload;\n                    directLine = _ref6$payload.directLine;\n                    userIDFromAction = _ref6$payload.userID;\n                    username = _ref6$payload.username;\n                    _context7.next = 9;\n                    return (0, _effects.fork)(observeAndPutConnectionStatusUpdate, directLine);\n\n                  case 9:\n                    updateConnectionStatusTask = _context7.sent;\n                    disconnectMeta = void 0; // TODO: [P2] Checks if this attached subtask will get killed if the parent task is complete (peacefully), errored out, or cancelled.\n\n                    meta = {\n                      userID: rectifyUserID(directLine, userIDFromAction),\n                      username: username\n                    }; // We will dispatch CONNECT_PENDING, wait for connect completed, errored, or cancelled (thru disconnect).\n                    // Then dispatch CONNECT_FULFILLED/CONNECT_REJECTED as needed.\n\n                    _context7.prev = 12;\n                    _context7.next = 15;\n                    return runAsyncEffectUntilDisconnect({\n                      type: _connect.CONNECT,\n                      meta: meta,\n                      payload: {\n                        directLine: directLine\n                      }\n                    }, function () {\n                      return (0, _effects.call)(connectSaga, directLine);\n                    });\n\n                  case 15:\n                    endDirectLine = _context7.sent;\n                    _context7.prev = 16;\n\n                  case 17:\n                    _context7.next = 19;\n                    return (0, _effects.race)({\n                      _: (0, _effects.take)(_disconnect.DISCONNECT),\n                      updateConnectionStatusAction: (0, _effects.take)(_updateConnectionStatus.UPDATE_CONNECTION_STATUS)\n                    });\n\n                  case 19:\n                    _ref7 = _context7.sent;\n                    _ref7$updateConnectio = _ref7.updateConnectionStatusAction;\n                    _ref7$updateConnectio = _ref7$updateConnectio === void 0 ? {} : _ref7$updateConnectio;\n                    _ref7$updateConnectio2 = _ref7$updateConnectio.payload;\n                    _ref7$updateConnectio2 = _ref7$updateConnectio2 === void 0 ? {} : _ref7$updateConnectio2;\n                    _connectionStatus2 = _ref7$updateConnectio2.connectionStatus; // If it is not disconnect action, connectionStatus will not be undefined.\n\n                    if (!(_connectionStatus2 === CONNECTING)) {\n                      _context7.next = 30;\n                      break;\n                    }\n\n                    _context7.next = 28;\n                    return runAsyncEffectUntilDisconnect({\n                      type: _reconnect.RECONNECT,\n                      meta: meta,\n                      payload: {\n                        directLine: directLine\n                      }\n                    }, function () {\n                      return (0, _effects.call)(reconnectSaga);\n                    });\n\n                  case 28:\n                    _context7.next = 36;\n                    break;\n\n                  case 30:\n                    if (!(_connectionStatus2 !== ONLINE)) {\n                      _context7.next = 36;\n                      break;\n                    }\n\n                    if (!(typeof _connectionStatus2 !== 'undefined')) {\n                      _context7.next = 35;\n                      break;\n                    }\n\n                    throw new Error(\"Connection status changed to \".concat(_connectionStatus2));\n\n                  case 35:\n                    return _context7.abrupt(\"break\", 38);\n\n                  case 36:\n                    _context7.next = 17;\n                    break;\n\n                  case 38:\n                    _context7.prev = 38;\n                    endDirectLine();\n                    return _context7.finish(38);\n\n                  case 41:\n                    _context7.next = 46;\n                    break;\n\n                  case 43:\n                    _context7.prev = 43;\n                    _context7.t0 = _context7[\"catch\"](12);\n                    disconnectMeta = {\n                      error: _context7.t0\n                    };\n\n                  case 46:\n                    _context7.prev = 46;\n                    _context7.next = 49;\n                    return (0, _effects.cancel)(updateConnectionStatusTask);\n\n                  case 49:\n                    _context7.next = 51;\n                    return (0, _forkPut[\"default\"])({\n                      type: _disconnect.DISCONNECT_PENDING,\n                      meta: disconnectMeta,\n                      payload: {\n                        directLine: directLine\n                      }\n                    }, {\n                      type: _disconnect.DISCONNECT_FULFILLED,\n                      meta: disconnectMeta,\n                      payload: {\n                        directLine: directLine\n                      }\n                    });\n\n                  case 51:\n                    return _context7.finish(46);\n\n                  case 52:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _loop, null, [[12, 43, 46, 52], [16,, 38, 41]]);\n          });\n\n        case 1:\n          return _context8.delegateYield(_loop(), \"t0\", 2);\n\n        case 2:\n          _context8.next = 1;\n          break;\n\n        case 4:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked6);\n}","map":null,"metadata":{},"sourceType":"script"}