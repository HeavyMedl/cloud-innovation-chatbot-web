{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _HTMLVideoContent = _interopRequireDefault(require(\"./HTMLVideoContent\"));\n\nvar _VimeoContent = _interopRequireDefault(require(\"./VimeoContent\"));\n\nvar _YouTubeContent = _interopRequireDefault(require(\"./YouTubeContent\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar YOUTUBE_DOMAIN = \"youtube.com\";\nvar YOUTUBE_WWW_DOMAIN = \"www.youtube.com\";\nvar YOUTUBE_SHORT_DOMAIN = \"youtu.be\";\nvar YOUTUBE_WWW_SHORT_DOMAIN = \"www.youtu.be\";\nvar VIMEO_DOMAIN = \"vimeo.com\";\nvar VIMEO_WWW_DOMAIN = \"www.vimeo.com\"; // This is a workaround\n// - Today, there is no good URL polyfill for older browser\n// - Instead of writing a URL parser, for older browser, we will use this <a href> trick to parse the URL\n\nfunction parseURL(url) {\n  var urlLike;\n\n  if (typeof URL === 'function') {\n    urlLike = new URL(url);\n  } else {\n    urlLike = document.createElement('a');\n    urlLike.setAttribute('href', url);\n  }\n\n  var _urlLike = urlLike,\n      hostname = _urlLike.hostname,\n      pathname = _urlLike.pathname,\n      search = _urlLike.search;\n  return {\n    hostname: hostname,\n    pathname: pathname,\n    search: search\n  };\n}\n\nvar _default = function _default(_ref) {\n  var alt = _ref.alt,\n      autoPlay = _ref.autoPlay,\n      loop = _ref.loop,\n      poster = _ref.poster,\n      src = _ref.src;\n\n  var _parseURL = parseURL(src),\n      hostname = _parseURL.hostname,\n      pathname = _parseURL.pathname,\n      search = _parseURL.search;\n\n  var lastSegment = pathname.split('/').pop();\n  var searchParams = new URLSearchParams(search);\n\n  switch (hostname) {\n    case VIMEO_DOMAIN:\n    case VIMEO_WWW_DOMAIN:\n      return _react.default.createElement(_VimeoContent.default, {\n        alt: alt,\n        autoPlay: autoPlay,\n        embedID: lastSegment,\n        loop: loop\n      });\n\n    case YOUTUBE_DOMAIN:\n    case YOUTUBE_WWW_DOMAIN:\n      return _react.default.createElement(_YouTubeContent.default, {\n        alt: alt,\n        autoPlay: autoPlay,\n        embedID: searchParams.get('v'),\n        loop: loop\n      });\n\n    case YOUTUBE_SHORT_DOMAIN:\n    case YOUTUBE_WWW_SHORT_DOMAIN:\n      return _react.default.createElement(_YouTubeContent.default, {\n        alt: alt,\n        autoPlay: autoPlay,\n        embedID: lastSegment,\n        loop: loop\n      });\n\n    default:\n      return _react.default.createElement(_HTMLVideoContent.default, {\n        alt: alt,\n        autoPlay: autoPlay,\n        loop: loop,\n        poster: poster,\n        src: src\n      });\n  }\n};\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}