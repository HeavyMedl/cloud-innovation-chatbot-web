{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _callee;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _simpleUpdateIn = _interopRequireDefault(require(\"simple-update-in\"));\n\nvar _incomingActivity = _interopRequireDefault(require(\"../actions/incomingActivity\"));\n\nvar _setSuggestedActions = _interopRequireDefault(require(\"../actions/setSuggestedActions\"));\n\nvar _activityFromBot = _interopRequireDefault(require(\"../definitions/activityFromBot\"));\n\nvar _observeEach = _interopRequireDefault(require(\"./effects/observeEach\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _activities = require(\"../selectors/activities\");\n\nvar _marked =\n/*#__PURE__*/\n_regenerator[\"default\"].mark(_callee),\n    _marked2 =\n/*#__PURE__*/\n_regenerator[\"default\"].mark(observeActivity);\n\nfunction _callee() {\n  return _regenerator[\"default\"].wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return (0, _whileConnected[\"default\"])(observeActivity);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction observeActivity(_ref) {\n  var directLine, userID;\n  return _regenerator[\"default\"].wrap(function observeActivity$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          directLine = _ref.directLine, userID = _ref.userID;\n          _context3.next = 3;\n          return (0, _observeEach[\"default\"])(directLine.activity$,\n          /*#__PURE__*/\n          _regenerator[\"default\"].mark(function _callee2(activity) {\n            var messageActivities, lastMessageActivity, _lastMessageActivity$, actions, to;\n\n            return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    activity = patchActivityWithFromRole(activity, userID);\n                    _context2.next = 3;\n                    return (0, _effects.put)((0, _incomingActivity[\"default\"])(activity));\n\n                  case 3:\n                    _context2.next = 5;\n                    return (0, _effects.select)((0, _activities.ofType)('message'));\n\n                  case 5:\n                    messageActivities = _context2.sent;\n                    lastMessageActivity = messageActivities[messageActivities.length - 1];\n\n                    if (!(0, _activityFromBot[\"default\"])(lastMessageActivity)) {\n                      _context2.next = 13;\n                      break;\n                    }\n\n                    _lastMessageActivity$ = lastMessageActivity.suggestedActions;\n                    _lastMessageActivity$ = _lastMessageActivity$ === void 0 ? {} : _lastMessageActivity$;\n                    actions = _lastMessageActivity$.actions, to = _lastMessageActivity$.to; // If suggested actions is not destined to anyone, or is destined to the user, show it.\n                    // In other words, if suggested actions is destined to someone else, don't show it.\n\n                    _context2.next = 13;\n                    return (0, _effects.put)((0, _setSuggestedActions[\"default\"])(to && to.length && !to.includes(userID) ? null : actions));\n\n                  case 13:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          }));\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction patchActivityWithFromRole(activity, userID) {\n  // Some activities, such as \"ConversationUpdate\", does not have \"from\" defined.\n  // And although \"role\" is defined in Direct Line spec, it was not sent over the wire.\n  // We normalize the activity here to simplify null-check and logic later.\n  // Patch activity.from.role to make sure its either \"bot\", \"user\", or \"channel\"\n  if (!activity.from) {\n    activity = (0, _simpleUpdateIn[\"default\"])(activity, ['from', 'role'], function () {\n      return 'channel';\n    });\n  } else if (!activity.from.role) {\n    if (activity.from.id === userID) {\n      activity = (0, _simpleUpdateIn[\"default\"])(activity, ['from', 'role'], function () {\n        return 'user';\n      });\n    } else if (activity.from.id) {\n      activity = (0, _simpleUpdateIn[\"default\"])(activity, ['from', 'role'], function () {\n        return 'bot';\n      });\n    } else {\n      activity = (0, _simpleUpdateIn[\"default\"])(activity, ['from', 'role'], function () {\n        return 'channel';\n      });\n    }\n  }\n\n  return activity;\n}","map":null,"metadata":{},"sourceType":"script"}