{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Error_1 = require(\"./Error\");\n\nvar Guid_1 = require(\"./Guid\");\n\nvar MessageType;\n\n(function (MessageType) {\n  MessageType[MessageType[\"Text\"] = 0] = \"Text\";\n  MessageType[MessageType[\"Binary\"] = 1] = \"Binary\";\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\n\nvar ConnectionMessage =\n/** @class */\nfunction () {\n  function ConnectionMessage(messageType, body, headers, id) {\n    this.body = null;\n\n    if (messageType === MessageType.Text && body && !(typeof body === \"string\")) {\n      throw new Error_1.InvalidOperationError(\"Payload must be a string\");\n    }\n\n    if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\n      throw new Error_1.InvalidOperationError(\"Payload must be ArrayBuffer\");\n    }\n\n    this.messageType = messageType;\n    this.body = body;\n    this.headers = headers ? headers : {};\n    this.id = id ? id : Guid_1.CreateNoDashGuid();\n  }\n\n  Object.defineProperty(ConnectionMessage.prototype, \"MessageType\", {\n    get: function () {\n      return this.messageType;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ConnectionMessage.prototype, \"Headers\", {\n    get: function () {\n      return this.headers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ConnectionMessage.prototype, \"Body\", {\n    get: function () {\n      return this.body;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ConnectionMessage.prototype, \"TextBody\", {\n    get: function () {\n      if (this.messageType === MessageType.Binary) {\n        throw new Error_1.InvalidOperationError(\"Not supported for binary message\");\n      }\n\n      return this.body;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ConnectionMessage.prototype, \"BinaryBody\", {\n    get: function () {\n      if (this.messageType === MessageType.Text) {\n        throw new Error_1.InvalidOperationError(\"Not supported for text message\");\n      }\n\n      return this.body;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ConnectionMessage.prototype, \"Id\", {\n    get: function () {\n      return this.id;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ConnectionMessage;\n}();\n\nexports.ConnectionMessage = ConnectionMessage;","map":null,"metadata":{},"sourceType":"script"}