{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Error_1 = require(\"./Error\");\n\nvar List =\n/** @class */\nfunction () {\n  function List(list) {\n    var _this = this;\n\n    this.subscriptionIdCounter = 0;\n    this.addSubscriptions = {};\n    this.removeSubscriptions = {};\n    this.disposedSubscriptions = {};\n    this.disposeReason = null;\n\n    this.Get = function (itemIndex) {\n      _this.ThrowIfDisposed();\n\n      return _this.list[itemIndex];\n    };\n\n    this.First = function () {\n      return _this.Get(0);\n    };\n\n    this.Last = function () {\n      return _this.Get(_this.Length() - 1);\n    };\n\n    this.Add = function (item) {\n      _this.ThrowIfDisposed();\n\n      _this.InsertAt(_this.list.length, item);\n    };\n\n    this.InsertAt = function (index, item) {\n      _this.ThrowIfDisposed();\n\n      if (index === 0) {\n        _this.list.unshift(item);\n      } else if (index === _this.list.length) {\n        _this.list.push(item);\n      } else {\n        _this.list.splice(index, 0, item);\n      }\n\n      _this.TriggerSubscriptions(_this.addSubscriptions);\n    };\n\n    this.RemoveFirst = function () {\n      _this.ThrowIfDisposed();\n\n      return _this.RemoveAt(0);\n    };\n\n    this.RemoveLast = function () {\n      _this.ThrowIfDisposed();\n\n      return _this.RemoveAt(_this.Length() - 1);\n    };\n\n    this.RemoveAt = function (index) {\n      _this.ThrowIfDisposed();\n\n      return _this.Remove(index, 1)[0];\n    };\n\n    this.Remove = function (index, count) {\n      _this.ThrowIfDisposed();\n\n      var removedElements = _this.list.splice(index, count);\n\n      _this.TriggerSubscriptions(_this.removeSubscriptions);\n\n      return removedElements;\n    };\n\n    this.Clear = function () {\n      _this.ThrowIfDisposed();\n\n      _this.Remove(0, _this.Length());\n    };\n\n    this.Length = function () {\n      _this.ThrowIfDisposed();\n\n      return _this.list.length;\n    };\n\n    this.OnAdded = function (addedCallback) {\n      _this.ThrowIfDisposed();\n\n      var subscriptionId = _this.subscriptionIdCounter++;\n      _this.addSubscriptions[subscriptionId] = addedCallback;\n      return {\n        Detach: function () {\n          delete _this.addSubscriptions[subscriptionId];\n        }\n      };\n    };\n\n    this.OnRemoved = function (removedCallback) {\n      _this.ThrowIfDisposed();\n\n      var subscriptionId = _this.subscriptionIdCounter++;\n      _this.removeSubscriptions[subscriptionId] = removedCallback;\n      return {\n        Detach: function () {\n          delete _this.removeSubscriptions[subscriptionId];\n        }\n      };\n    };\n\n    this.OnDisposed = function (disposedCallback) {\n      _this.ThrowIfDisposed();\n\n      var subscriptionId = _this.subscriptionIdCounter++;\n      _this.disposedSubscriptions[subscriptionId] = disposedCallback;\n      return {\n        Detach: function () {\n          delete _this.disposedSubscriptions[subscriptionId];\n        }\n      };\n    };\n\n    this.Join = function (seperator) {\n      _this.ThrowIfDisposed();\n\n      return _this.list.join(seperator);\n    };\n\n    this.ToArray = function () {\n      var cloneCopy = Array();\n\n      _this.list.forEach(function (val) {\n        cloneCopy.push(val);\n      });\n\n      return cloneCopy;\n    };\n\n    this.Any = function (callback) {\n      _this.ThrowIfDisposed();\n\n      if (callback) {\n        return _this.Where(callback).Length() > 0;\n      } else {\n        return _this.Length() > 0;\n      }\n    };\n\n    this.All = function (callback) {\n      _this.ThrowIfDisposed();\n\n      return _this.Where(callback).Length() === _this.Length();\n    };\n\n    this.ForEach = function (callback) {\n      _this.ThrowIfDisposed();\n\n      for (var i = 0; i < _this.Length(); i++) {\n        callback(_this.list[i], i);\n      }\n    };\n\n    this.Select = function (callback) {\n      _this.ThrowIfDisposed();\n\n      var selectList = [];\n\n      for (var i = 0; i < _this.list.length; i++) {\n        selectList.push(callback(_this.list[i], i));\n      }\n\n      return new List(selectList);\n    };\n\n    this.Where = function (callback) {\n      _this.ThrowIfDisposed();\n\n      var filteredList = new List();\n\n      for (var i = 0; i < _this.list.length; i++) {\n        if (callback(_this.list[i], i)) {\n          filteredList.Add(_this.list[i]);\n        }\n      }\n\n      return filteredList;\n    };\n\n    this.OrderBy = function (compareFn) {\n      _this.ThrowIfDisposed();\n\n      var clonedArray = _this.ToArray();\n\n      var orderedArray = clonedArray.sort(compareFn);\n      return new List(orderedArray);\n    };\n\n    this.OrderByDesc = function (compareFn) {\n      _this.ThrowIfDisposed();\n\n      return _this.OrderBy(function (a, b) {\n        return compareFn(b, a);\n      });\n    };\n\n    this.Clone = function () {\n      _this.ThrowIfDisposed();\n\n      return new List(_this.ToArray());\n    };\n\n    this.Concat = function (list) {\n      _this.ThrowIfDisposed();\n\n      return new List(_this.list.concat(list.ToArray()));\n    };\n\n    this.ConcatArray = function (array) {\n      _this.ThrowIfDisposed();\n\n      return new List(_this.list.concat(array));\n    };\n\n    this.IsDisposed = function () {\n      return _this.list == null;\n    };\n\n    this.Dispose = function (reason) {\n      if (!_this.IsDisposed()) {\n        _this.disposeReason = reason;\n        _this.list = null;\n        _this.addSubscriptions = null;\n        _this.removeSubscriptions = null;\n\n        _this.TriggerSubscriptions(_this.disposedSubscriptions);\n      }\n    };\n\n    this.ThrowIfDisposed = function () {\n      if (_this.IsDisposed()) {\n        throw new Error_1.ObjectDisposedError(\"List\", _this.disposeReason);\n      }\n    };\n\n    this.TriggerSubscriptions = function (subscriptions) {\n      if (subscriptions) {\n        for (var subscriptionId in subscriptions) {\n          if (subscriptionId) {\n            subscriptions[subscriptionId]();\n          }\n        }\n      }\n    };\n\n    this.list = []; // copy the list rather than taking as is.\n\n    if (list) {\n      for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {\n        var item = list_1[_i];\n        this.list.push(item);\n      }\n    }\n  }\n\n  return List;\n}();\n\nexports.List = List;","map":null,"metadata":{},"sourceType":"script"}