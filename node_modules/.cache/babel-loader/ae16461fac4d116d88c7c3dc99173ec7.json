{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Localize = require(\"../Localization/Localize\");\n\nvar _connectToWebChat = _interopRequireDefault(require(\"../connectToWebChat\"));\n\nvar _ErrorBox = _interopRequireDefault(require(\"../ErrorBox\"));\n\nvar _getTabIndex = _interopRequireDefault(require(\"../Utils/TypeFocusSink/getTabIndex\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar AdaptiveCardRenderer =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(AdaptiveCardRenderer, _React$PureComponent);\n\n  function AdaptiveCardRenderer(props) {\n    var _this;\n\n    _classCallCheck(this, AdaptiveCardRenderer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdaptiveCardRenderer).call(this, props));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    _this.handleExecuteAction = _this.handleExecuteAction.bind(_assertThisInitialized(_this));\n    _this.contentRef = _react.default.createRef();\n    _this.state = {\n      error: null\n    };\n    return _this;\n  }\n\n  _createClass(AdaptiveCardRenderer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.renderCard();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.adaptiveCard !== this.props.adaptiveCard) {\n        this.renderCard();\n      }\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(_ref) {\n      var target = _ref.target; // Some items, e.g. tappable text, cannot be disabled thru DOM attributes\n\n      if (this.props.disabled) {\n        return;\n      }\n\n      var tabIndex = (0, _getTabIndex.default)(target); // If the user is clicking on something that is already clickable, do not allow them to click the card.\n      // E.g. a hero card can be tappable, and image and buttons inside the hero card can also be tappable.\n\n      if (typeof tabIndex !== 'number' || tabIndex < 0) {\n        var _this$props = this.props,\n            onCardAction = _this$props.onCardAction,\n            tapAction = _this$props.tapAction;\n        tapAction && onCardAction(tapAction);\n      }\n    }\n  }, {\n    key: \"handleExecuteAction\",\n    value: function handleExecuteAction(action) {\n      var props = this.props; // Some items, e.g. tappable image, cannot be disabled thru DOM attributes\n\n      if (props.disabled) {\n        return;\n      }\n\n      var actionTypeName = action.getJsonTypeName();\n\n      if (actionTypeName === 'Action.OpenUrl') {\n        props.onCardAction({\n          type: 'openUrl',\n          value: action.url\n        });\n      } else if (actionTypeName === 'Action.Submit') {\n        if (typeof action.data !== 'undefined') {\n          var actionData = action.data;\n\n          if (actionData && actionData.__isBotFrameworkCardAction) {\n            var cardAction = actionData.cardAction;\n            var displayText = cardAction.displayText,\n                type = cardAction.type,\n                value = cardAction.value;\n            props.onCardAction({\n              displayText: displayText,\n              type: type,\n              value: value\n            });\n          } else {\n            props.onCardAction({\n              type: typeof action.data === 'string' ? 'imBack' : 'postBack',\n              value: action.data\n            });\n          }\n        }\n      } else {\n        console.error(\"Web Chat: received unknown action from Adaptive Cards\");\n        console.error(action);\n      }\n    }\n  }, {\n    key: \"renderCard\",\n    value: function renderCard() {\n      var current = this.contentRef.current;\n      var _this$props2 = this.props,\n          adaptiveCard = _this$props2.adaptiveCard,\n          adaptiveCardHostConfig = _this$props2.adaptiveCardHostConfig,\n          renderMarkdown = _this$props2.renderMarkdown;\n\n      if (current && adaptiveCard) {\n        // Currently, the only way to set the Markdown engine is to set it thru static member of AdaptiveCard class\n        // TODO: [P3] Checks if we could make the \"renderMarkdown\" per card\n        //       This could be limitations from Adaptive Cards package\n        //       Because there could be timing difference between .parse and .render, we could be using wrong Markdown engine\n        adaptiveCard.constructor.onProcessMarkdown = function (text, result) {\n          if (renderMarkdown) {\n            result.outputHtml = renderMarkdown(text);\n            result.didProcess = true;\n          }\n        };\n\n        adaptiveCard.hostConfig = adaptiveCardHostConfig;\n        adaptiveCard.onExecuteAction = this.handleExecuteAction;\n        var errors = adaptiveCard.validate();\n\n        if (errors.length) {\n          return this.setState(function () {\n            return {\n              error: errors\n            };\n          });\n        }\n\n        var element;\n\n        try {\n          element = adaptiveCard.render();\n        } catch (err) {\n          return this.setState(function () {\n            return {\n              errors: err\n            };\n          });\n        }\n\n        if (!element) {\n          return this.setState(function () {\n            return {\n              error: 'Adaptive Card rendered as empty element'\n            };\n          });\n        }\n\n        if (this.state.error) {\n          this.setState(function () {\n            return {\n              error: null\n            };\n          });\n        }\n\n        if (this.props.disabled) {\n          var hyperlinks = element.querySelectorAll('a');\n          var inputs = element.querySelectorAll('button, input, select, textarea');\n          [].forEach.call(inputs, function (input) {\n            input.disabled = true;\n          });\n          [].forEach.call(hyperlinks, function (hyperlink) {\n            hyperlink.addEventListener('click', function (event) {\n              event.preventDefault();\n              event.stopImmediatePropagation();\n              event.stopPropagation();\n            });\n          });\n        }\n\n        var firstChild = current.children[0];\n\n        if (firstChild) {\n          current.replaceChild(element, firstChild);\n        } else {\n          current.appendChild(element);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          language = _this$props3.language,\n          styleSet = _this$props3.styleSet,\n          error = this.state.error;\n      return error ? _react.default.createElement(_ErrorBox.default, {\n        message: (0, _Localize.localize)('Adaptive Card render error', language)\n      }, _react.default.createElement(\"pre\", null, JSON.stringify(error, null, 2))) : _react.default.createElement(\"div\", {\n        className: styleSet.adaptiveCardRenderer,\n        onClick: this.handleClick,\n        ref: this.contentRef\n      });\n    }\n  }]);\n\n  return AdaptiveCardRenderer;\n}(_react.default.PureComponent);\n\nvar _default = (0, _connectToWebChat.default)(function (_ref2) {\n  var adaptiveCardHostConfig = _ref2.adaptiveCardHostConfig,\n      disabled = _ref2.disabled,\n      language = _ref2.language,\n      onCardAction = _ref2.onCardAction,\n      renderMarkdown = _ref2.renderMarkdown,\n      styleSet = _ref2.styleSet,\n      tapAction = _ref2.tapAction;\n  return {\n    adaptiveCardHostConfig: adaptiveCardHostConfig,\n    disabled: disabled,\n    language: language,\n    onCardAction: onCardAction,\n    renderMarkdown: renderMarkdown,\n    styleSet: styleSet,\n    tapAction: tapAction\n  };\n})(AdaptiveCardRenderer);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}