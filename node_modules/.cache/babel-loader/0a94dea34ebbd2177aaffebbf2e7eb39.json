{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nObject.defineProperty(exports, \"createSpeechRecognitionPonyfill\", {\n  enumerable: true,\n  get: function get() {\n    return _SpeechToText.default;\n  }\n});\nObject.defineProperty(exports, \"createSpeechSynthesisPonyfill\", {\n  enumerable: true,\n  get: function get() {\n    return _TextToSpeech.default;\n  }\n});\nObject.defineProperty(exports, \"fetchAuthorizationToken\", {\n  enumerable: true,\n  get: function get() {\n    return _fetchAuthorizationToken.default;\n  }\n});\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _SpeechToText = _interopRequireDefault(require(\"./SpeechServices/SpeechToText\"));\n\nvar _TextToSpeech = _interopRequireDefault(require(\"./SpeechServices/TextToSpeech\"));\n\nvar _fetchAuthorizationToken = _interopRequireDefault(require(\"./SpeechServices/fetchAuthorizationToken\"));\n\nfunction _default() {\n  return _ref.apply(this, arguments);\n}\n\nfunction _ref() {\n  _ref = (0, _asyncToGenerator2.default)(\n  /*#__PURE__*/\n  _regenerator.default.mark(function _callee() {\n    var _args = arguments;\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = _objectSpread2.default;\n            _context.t1 = {};\n            _context.next = 4;\n            return _SpeechToText.default.apply(void 0, _args);\n\n          case 4:\n            _context.t2 = _context.sent;\n            _context.next = 7;\n            return _TextToSpeech.default.apply(void 0, _args);\n\n          case 7:\n            _context.t3 = _context.sent;\n            return _context.abrupt(\"return\", (0, _context.t0)(_context.t1, _context.t2, _context.t3));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _ref.apply(this, arguments);\n}\n\n;","map":null,"metadata":{},"sourceType":"script"}