{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AdaptiveCardBuilder = void 0;\n\nvar _adaptivecards = require(\"adaptivecards\");\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction addCardAction(cardAction, includesOAuthButtons) {\n  var type = cardAction.type;\n\n  if (type === 'imBack' || type === 'messageBack' || type === 'postBack' || type === 'signin' && includesOAuthButtons) {\n    var action = new _adaptivecards.SubmitAction();\n    action.data = {\n      __isBotFrameworkCardAction: true,\n      cardAction: cardAction\n    };\n    action.title = cardAction.title;\n    return action;\n  } else {\n    var _action = new _adaptivecards.OpenUrlAction();\n\n    _action.title = cardAction.title;\n    _action.url = cardAction.type === 'call' ? 'tel:' + cardAction.value : cardAction.value;\n    return _action;\n  }\n}\n\nvar AdaptiveCardBuilder =\n/*#__PURE__*/\nfunction () {\n  function AdaptiveCardBuilder(adaptiveCards) {\n    _classCallCheck(this, AdaptiveCardBuilder);\n\n    _defineProperty(this, \"card\", void 0);\n\n    _defineProperty(this, \"container\", void 0);\n\n    this.card = new adaptiveCards.AdaptiveCard();\n    this.container = new _adaptivecards.Container();\n    this.card.addItem(this.container);\n  }\n\n  _createClass(AdaptiveCardBuilder, [{\n    key: \"addColumnSet\",\n    value: function addColumnSet(sizes) {\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n      var columnSet = new _adaptivecards.ColumnSet();\n      container.addItem(columnSet);\n      return sizes.map(function (size) {\n        var column = new _adaptivecards.Column();\n        column.width = _adaptivecards.SizeAndUnit.parse(size);\n        columnSet.addColumn(column);\n        return column;\n      });\n    }\n  }, {\n    key: \"addItems\",\n    value: function addItems(cardElements) {\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n      cardElements.forEach(function (cardElement) {\n        return container.addItem(cardElement);\n      });\n    }\n  }, {\n    key: \"addTextBlock\",\n    value: function addTextBlock(text, template) {\n      var container = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.container;\n\n      if (typeof text !== 'undefined') {\n        var textblock = new _adaptivecards.TextBlock(); // tslint:disable-next-line:forin\n\n        for (var prop in template) {\n          textblock[prop] = template[prop];\n        }\n\n        textblock.speak = text;\n        textblock.text = text;\n        container.addItem(textblock);\n      }\n    }\n  }, {\n    key: \"addButtons\",\n    value: function addButtons(cardActions, includesOAuthButtons) {\n      var _this = this;\n\n      cardActions && cardActions.forEach(function (cardAction) {\n        _this.card.addAction(addCardAction(cardAction, includesOAuthButtons));\n      });\n    }\n  }, {\n    key: \"addCommonHeaders\",\n    value: function addCommonHeaders(content) {\n      this.addTextBlock(content.title, {\n        size: _adaptivecards.TextSize.Medium,\n        weight: _adaptivecards.TextWeight.Bolder\n      });\n      this.addTextBlock(content.subtitle, {\n        isSubtle: true,\n        wrap: true\n      });\n      this.addTextBlock(content.text, {\n        wrap: true\n      });\n    }\n  }, {\n    key: \"addCommon\",\n    value: function addCommon(content) {\n      this.addCommonHeaders(content);\n      this.addButtons(content.buttons);\n    }\n  }, {\n    key: \"addImage\",\n    value: function addImage(url, container, selectAction) {\n      container = container || this.container;\n      var image = new _adaptivecards.Image();\n      image.url = url;\n      image.selectAction = selectAction && addCardAction(selectAction);\n      image.size = _adaptivecards.Size.Stretch;\n      container.addItem(image);\n    }\n  }]);\n\n  return AdaptiveCardBuilder;\n}();\n\nexports.AdaptiveCardBuilder = AdaptiveCardBuilder;","map":null,"metadata":{},"sourceType":"script"}