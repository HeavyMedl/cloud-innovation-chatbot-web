{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Enums = require(\"./enums\");\n/**\r\n * Fast UUID generator, RFC4122 version 4 compliant.\r\n * @author Jeff Ward (jcward.com).\r\n * @license MIT license\r\n * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\n **/\n\n\nvar UUID =\n/** @class */\nfunction () {\n  function UUID() {}\n\n  UUID.generate = function () {\n    var d0 = Math.random() * 0xffffffff | 0;\n    var d1 = Math.random() * 0xffffffff | 0;\n    var d2 = Math.random() * 0xffffffff | 0;\n    var d3 = Math.random() * 0xffffffff | 0;\n    return UUID.lut[d0 & 0xff] + UUID.lut[d0 >> 8 & 0xff] + UUID.lut[d0 >> 16 & 0xff] + UUID.lut[d0 >> 24 & 0xff] + '-' + UUID.lut[d1 & 0xff] + UUID.lut[d1 >> 8 & 0xff] + '-' + UUID.lut[d1 >> 16 & 0x0f | 0x40] + UUID.lut[d1 >> 24 & 0xff] + '-' + UUID.lut[d2 & 0x3f | 0x80] + UUID.lut[d2 >> 8 & 0xff] + '-' + UUID.lut[d2 >> 16 & 0xff] + UUID.lut[d2 >> 24 & 0xff] + UUID.lut[d3 & 0xff] + UUID.lut[d3 >> 8 & 0xff] + UUID.lut[d3 >> 16 & 0xff] + UUID.lut[d3 >> 24 & 0xff];\n  };\n\n  UUID.initialize = function () {\n    for (var i = 0; i < 256; i++) {\n      UUID.lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n    }\n  };\n\n  UUID.lut = [];\n  return UUID;\n}();\n\nexports.UUID = UUID;\nUUID.initialize();\nexports.ContentTypes = {\n  applicationJson: \"application/json\",\n  applicationXWwwFormUrlencoded: \"application/x-www-form-urlencoded\"\n};\n\nfunction getValueOrDefault(obj, defaultValue) {\n  return obj ? obj : defaultValue;\n}\n\nexports.getValueOrDefault = getValueOrDefault;\n\nfunction isNullOrEmpty(value) {\n  return value === undefined || value === null || value === \"\";\n}\n\nexports.isNullOrEmpty = isNullOrEmpty;\n\nfunction appendChild(node, child) {\n  if (child != null && child != undefined) {\n    node.appendChild(child);\n  }\n}\n\nexports.appendChild = appendChild;\n\nfunction setProperty(target, propertyName, propertyValue, defaultValue) {\n  if (defaultValue === void 0) {\n    defaultValue = undefined;\n  }\n\n  if (propertyValue && (!defaultValue || defaultValue !== propertyValue)) {\n    target[propertyName] = propertyValue;\n  }\n}\n\nexports.setProperty = setProperty;\n\nfunction setEnumProperty(enumType, target, propertyName, propertyValue, defaultValue) {\n  if (defaultValue === undefined || defaultValue !== propertyValue) {\n    target[propertyName] = enumType[propertyValue];\n  }\n}\n\nexports.setEnumProperty = setEnumProperty;\n\nfunction getEnumValueOrDefault(targetEnum, name, defaultValue) {\n  if (isNullOrEmpty(name)) {\n    return defaultValue;\n  }\n\n  for (var key in targetEnum) {\n    var isValueProperty = parseInt(key, 10) >= 0;\n\n    if (isValueProperty) {\n      var value = targetEnum[key];\n\n      if (value && typeof value === \"string\") {\n        if (value.toLowerCase() === name.toLowerCase()) {\n          return parseInt(key, 10);\n        }\n      }\n    }\n  }\n\n  return defaultValue;\n}\n\nexports.getEnumValueOrDefault = getEnumValueOrDefault;\n\nfunction parseHostConfigEnum(targetEnum, value, defaultValue) {\n  if (typeof value === \"string\") {\n    return getEnumValueOrDefault(targetEnum, value, defaultValue);\n  } else if (typeof value === \"number\") {\n    return getValueOrDefault(value, defaultValue);\n  } else {\n    return defaultValue;\n  }\n}\n\nexports.parseHostConfigEnum = parseHostConfigEnum;\n\nfunction renderSeparation(separationDefinition, orientation) {\n  if (separationDefinition.spacing > 0 || separationDefinition.lineThickness > 0) {\n    var separator = document.createElement(\"div\");\n\n    if (orientation == Enums.Orientation.Horizontal) {\n      if (separationDefinition.lineThickness) {\n        separator.style.marginTop = separationDefinition.spacing / 2 + \"px\";\n        separator.style.paddingTop = separationDefinition.spacing / 2 + \"px\";\n        separator.style.borderTop = separationDefinition.lineThickness + \"px solid \" + stringToCssColor(separationDefinition.lineColor);\n      } else {\n        separator.style.height = separationDefinition.spacing + \"px\";\n      }\n    } else {\n      if (separationDefinition.lineThickness) {\n        separator.style.marginLeft = separationDefinition.spacing / 2 + \"px\";\n        separator.style.paddingLeft = separationDefinition.spacing / 2 + \"px\";\n        separator.style.borderLeft = separationDefinition.lineThickness + \"px solid \" + stringToCssColor(separationDefinition.lineColor);\n      } else {\n        separator.style.width = separationDefinition.spacing + \"px\";\n      }\n    }\n\n    separator.style.overflow = \"hidden\";\n    return separator;\n  } else {\n    return null;\n  }\n}\n\nexports.renderSeparation = renderSeparation;\n\nfunction stringToCssColor(color) {\n  var regEx = /#([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})?/gi;\n  var matches = regEx.exec(color);\n\n  if (matches && matches[4]) {\n    var a = parseInt(matches[1], 16) / 255;\n    var r = parseInt(matches[2], 16);\n    var g = parseInt(matches[3], 16);\n    var b = parseInt(matches[4], 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\n  } else {\n    return color;\n  }\n}\n\nexports.stringToCssColor = stringToCssColor;\n\nvar StringWithSubstitutions =\n/** @class */\nfunction () {\n  function StringWithSubstitutions() {\n    this._isProcessed = false;\n    this._original = null;\n    this._processed = null;\n  }\n\n  StringWithSubstitutions.prototype.substituteInputValues = function (inputs, contentType) {\n    this._processed = this._original;\n    var regEx = /\\{{2}([a-z0-9_$@]+).value\\}{2}/gi;\n    var matches;\n\n    while ((matches = regEx.exec(this._original)) != null) {\n      var matchedInput = null;\n\n      for (var i = 0; i < inputs.length; i++) {\n        if (inputs[i].id.toLowerCase() == matches[1].toLowerCase()) {\n          matchedInput = inputs[i];\n          break;\n        }\n      }\n\n      if (matchedInput) {\n        var valueForReplace = \"\";\n\n        if (matchedInput.value) {\n          valueForReplace = matchedInput.value;\n        }\n\n        if (contentType === exports.ContentTypes.applicationJson) {\n          valueForReplace = JSON.stringify(valueForReplace);\n          valueForReplace = valueForReplace.slice(1, -1);\n        } else if (contentType === exports.ContentTypes.applicationXWwwFormUrlencoded) {\n          valueForReplace = encodeURIComponent(valueForReplace);\n        }\n\n        this._processed = this._processed.replace(matches[0], valueForReplace);\n      }\n    }\n\n    ;\n    this._isProcessed = true;\n  };\n\n  StringWithSubstitutions.prototype.getOriginal = function () {\n    return this._original;\n  };\n\n  StringWithSubstitutions.prototype.get = function () {\n    if (!this._isProcessed) {\n      return this._original;\n    } else {\n      return this._processed;\n    }\n  };\n\n  StringWithSubstitutions.prototype.set = function (value) {\n    this._original = value;\n    this._isProcessed = false;\n  };\n\n  return StringWithSubstitutions;\n}();\n\nexports.StringWithSubstitutions = StringWithSubstitutions;\n\nvar SizeAndUnit =\n/** @class */\nfunction () {\n  function SizeAndUnit(physicalSize, unit) {\n    this.physicalSize = physicalSize;\n    this.unit = unit;\n  }\n\n  SizeAndUnit.parse = function (input) {\n    var result = new SizeAndUnit(0, Enums.SizeUnit.Weight);\n    var regExp = /^([0-9]+)(px|\\*)?$/g;\n    var matches = regExp.exec(input);\n\n    if (matches && matches.length >= 2) {\n      result.physicalSize = parseInt(matches[1]);\n\n      if (matches.length == 3) {\n        if (matches[2] == \"px\") {\n          result.unit = Enums.SizeUnit.Pixel;\n        }\n      }\n\n      return result;\n    }\n\n    throw new Error(\"Invalid size: \" + input);\n  };\n\n  return SizeAndUnit;\n}();\n\nexports.SizeAndUnit = SizeAndUnit;\n\nfunction truncate(element, maxHeight, lineHeight) {\n  var fits = function () {\n    // Allow a one pixel overflow to account for rounding differences\n    // between browsers\n    return maxHeight - element.scrollHeight >= -1.0;\n  };\n\n  if (fits()) return;\n  var fullText = element.innerHTML;\n\n  var truncateAt = function (idx) {\n    element.innerHTML = fullText.substring(0, idx) + '...';\n  };\n\n  var breakableIndices = findBreakableIndices(fullText);\n  var lo = 0;\n  var hi = breakableIndices.length;\n  var bestBreakIdx = 0; // Do a binary search for the longest string that fits\n\n  while (lo < hi) {\n    var mid = Math.floor((lo + hi) / 2);\n    truncateAt(breakableIndices[mid]);\n\n    if (fits()) {\n      bestBreakIdx = breakableIndices[mid];\n      lo = mid + 1;\n    } else {\n      hi = mid;\n    }\n  }\n\n  truncateAt(bestBreakIdx); // If we have extra room, try to expand the string letter by letter\n  // (covers the case where we have to break in the middle of a long word)\n\n  if (lineHeight && maxHeight - element.scrollHeight >= lineHeight - 1.0) {\n    var idx = findNextCharacter(fullText, bestBreakIdx);\n\n    while (idx < fullText.length) {\n      truncateAt(idx);\n\n      if (fits()) {\n        bestBreakIdx = idx;\n        idx = findNextCharacter(fullText, idx);\n      } else {\n        break;\n      }\n    }\n\n    truncateAt(bestBreakIdx);\n  }\n}\n\nexports.truncate = truncate;\n\nfunction findBreakableIndices(html) {\n  var results = [];\n  var idx = findNextCharacter(html, -1);\n\n  while (idx < html.length) {\n    if (html[idx] == ' ') {\n      results.push(idx);\n    }\n\n    idx = findNextCharacter(html, idx);\n  }\n\n  return results;\n}\n\nfunction findNextCharacter(html, currIdx) {\n  currIdx += 1; // If we found the start of an HTML tag, keep advancing until we get\n  // past it, so we don't end up truncating in the middle of the tag\n\n  while (currIdx < html.length && html[currIdx] == '<') {\n    while (currIdx < html.length && html[currIdx++] != '>');\n  }\n\n  return currIdx;\n}\n\nfunction getFitStatus(element, containerEnd) {\n  var start = element.offsetTop;\n  var end = start + element.clientHeight;\n\n  if (end <= containerEnd) {\n    return Enums.ContainerFitStatus.FullyInContainer;\n  } else if (start < containerEnd) {\n    return Enums.ContainerFitStatus.Overflowing;\n  } else {\n    return Enums.ContainerFitStatus.FullyOutOfContainer;\n  }\n}\n\nexports.getFitStatus = getFitStatus;","map":null,"metadata":{},"sourceType":"script"}