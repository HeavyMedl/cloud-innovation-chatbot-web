{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = forkPut;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\"); // In redux-saga, if we call the following effects in order, we might miss the take('C').\n// 1. take('A')\n// 2. put({ type: 'B' })\n// 3. take('C')\n// We need to modify step 2 to:\n// 2. fork(function* () { yield put({ type: 'B' }) })\n// This is a helper function for this purpose.\n\n\nfunction forkPut() {\n  for (var _len = arguments.length, actions = new Array(_len), _key = 0; _key < _len; _key++) {\n    actions[_key] = arguments[_key];\n  }\n\n  return (0, _effects.fork)(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee() {\n    var _i, _actions, action;\n\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _i = 0, _actions = actions;\n\n          case 1:\n            if (!(_i < _actions.length)) {\n              _context.next = 8;\n              break;\n            }\n\n            action = _actions[_i];\n            _context.next = 5;\n            return (0, _effects.put)(action);\n\n          case 5:\n            _i++;\n            _context.next = 1;\n            break;\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}","map":null,"metadata":{},"sourceType":"script"}