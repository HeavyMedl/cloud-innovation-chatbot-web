{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _callee3;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _observeOnce = _interopRequireDefault(require(\"./effects/observeOnce\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _language = _interopRequireDefault(require(\"../selectors/language\"));\n\nvar _sendTimeout = _interopRequireDefault(require(\"../selectors/sendTimeout\"));\n\nvar _deleteKey = _interopRequireDefault(require(\"../utils/deleteKey\"));\n\nvar _getTimestamp = _interopRequireDefault(require(\"../utils/getTimestamp\"));\n\nvar _sleep = _interopRequireDefault(require(\"../utils/sleep\"));\n\nvar _uniqueID = _interopRequireDefault(require(\"../utils/uniqueID\"));\n\nvar _postActivity = require(\"../actions/postActivity\");\n\nvar _incomingActivity = require(\"../actions/incomingActivity\");\n\nvar _marked =\n/*#__PURE__*/\n_regenerator[\"default\"].mark(_callee3),\n    _marked2 =\n/*#__PURE__*/\n_regenerator[\"default\"].mark(postActivity);\n\nfunction _callee3() {\n  return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _whileConnected[\"default\"])(\n          /*#__PURE__*/\n          _regenerator[\"default\"].mark(function _callee2(_ref) {\n            var directLine, userID, username, numActivitiesPosted;\n            return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    directLine = _ref.directLine, userID = _ref.userID, username = _ref.username;\n                    numActivitiesPosted = 0;\n                    _context2.next = 4;\n                    return (0, _effects.takeEvery)(_postActivity.POST_ACTIVITY,\n                    /*#__PURE__*/\n                    _regenerator[\"default\"].mark(function _callee(action) {\n                      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              return _context.delegateYield(postActivity(directLine, userID, username, numActivitiesPosted++, action), \"t0\", 1);\n\n                            case 1:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee);\n                    }));\n\n                  case 4:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction postActivity(directLine, userID, username, numActivitiesPosted, _ref2) {\n  var method, activity, locale, _activity, attachments, _activity$channelData, _activity$channelData2, clientActivityID, meta, echoBackCall, sendTimeout, _ref5, echoBack;\n\n  return _regenerator[\"default\"].wrap(function postActivity$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          method = _ref2.meta.method, activity = _ref2.payload.activity;\n          _context5.next = 3;\n          return (0, _effects.select)(_language[\"default\"]);\n\n        case 3:\n          locale = _context5.sent;\n          _activity = activity, attachments = _activity.attachments, _activity$channelData = _activity.channelData;\n          _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;\n          _activity$channelData2 = _activity$channelData.clientActivityID, clientActivityID = _activity$channelData2 === void 0 ? (0, _uniqueID[\"default\"])() : _activity$channelData2;\n          activity = (0, _objectSpread2[\"default\"])({}, (0, _deleteKey[\"default\"])(activity, 'id'), {\n            attachments: attachments && attachments.map(function (_ref3) {\n              var contentType = _ref3.contentType,\n                  contentUrl = _ref3.contentUrl,\n                  name = _ref3.name;\n              return {\n                contentType: contentType,\n                contentUrl: contentUrl,\n                name: name\n              };\n            }),\n            channelData: (0, _objectSpread2[\"default\"])({\n              clientActivityID: clientActivityID\n            }, (0, _deleteKey[\"default\"])(activity.channelData, 'state')),\n            channelId: 'webchat',\n            from: {\n              id: userID,\n              name: username,\n              role: 'user'\n            },\n            locale: locale,\n            timestamp: (0, _getTimestamp[\"default\"])()\n          });\n\n          if (!numActivitiesPosted) {\n            activity.entities = [].concat((0, _toConsumableArray2[\"default\"])(activity.entities || []), [{\n              // TODO: [P4] Currently in v3, we send the capabilities although the client might not actually have them\n              //       We need to understand why we need to send these, and only send capabilities the client have\n              requiresBotState: true,\n              supportsListening: true,\n              supportsTts: true,\n              type: 'ClientCapabilities'\n            }]);\n          }\n\n          meta = {\n            clientActivityID: clientActivityID,\n            method: method\n          };\n          _context5.next = 12;\n          return (0, _effects.put)({\n            type: _postActivity.POST_ACTIVITY_PENDING,\n            meta: meta,\n            payload: {\n              activity: activity\n            }\n          });\n\n        case 12:\n          _context5.prev = 12; // Quirks: We might receive INCOMING_ACTIVITY before the postActivity call completed\n          //         So, we setup expectation first, then postActivity afterward\n\n          echoBackCall = (0, _effects.call)(\n          /*#__PURE__*/\n          _regenerator[\"default\"].mark(function _callee4() {\n            var _ref4, _activity2, _activity2$channelDat, channelData, id;\n\n            return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return (0, _effects.take)(_incomingActivity.INCOMING_ACTIVITY);\n\n                  case 2:\n                    _ref4 = _context4.sent;\n                    _activity2 = _ref4.payload.activity;\n                    _activity2$channelDat = _activity2.channelData, channelData = _activity2$channelDat === void 0 ? {} : _activity2$channelDat, id = _activity2.id;\n\n                    if (!(channelData.clientActivityID === clientActivityID && id)) {\n                      _context4.next = 7;\n                      break;\n                    }\n\n                    return _context4.abrupt(\"return\", _activity2);\n\n                  case 7:\n                    _context4.next = 0;\n                    break;\n\n                  case 9:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4);\n          })); // Timeout could be due to either:\n          // - Post activity call may take too long time to complete\n          //   - Direct Line service only respond on HTTP after bot respond to Direct Line\n          // - Activity may take too long time to echo back\n\n          _context5.next = 16;\n          return (0, _effects.select)(_sendTimeout[\"default\"]);\n\n        case 16:\n          sendTimeout = _context5.sent;\n          _context5.next = 19;\n          return (0, _effects.race)({\n            send: (0, _effects.all)({\n              echoBack: echoBackCall,\n              postActivity: (0, _observeOnce[\"default\"])(directLine.postActivity(activity))\n            }),\n            timeout: (0, _effects.call)(function () {\n              return (0, _sleep[\"default\"])(sendTimeout).then(function () {\n                return Promise.reject(new Error('timeout'));\n              });\n            })\n          });\n\n        case 19:\n          _ref5 = _context5.sent;\n          echoBack = _ref5.send.echoBack;\n          _context5.next = 23;\n          return (0, _effects.put)({\n            type: _postActivity.POST_ACTIVITY_FULFILLED,\n            meta: meta,\n            payload: {\n              activity: echoBack\n            }\n          });\n\n        case 23:\n          _context5.next = 29;\n          break;\n\n        case 25:\n          _context5.prev = 25;\n          _context5.t0 = _context5[\"catch\"](12);\n          _context5.next = 29;\n          return (0, _effects.put)({\n            type: _postActivity.POST_ACTIVITY_REJECTED,\n            error: true,\n            meta: meta,\n            payload: _context5.t0\n          });\n\n        case 29:\n          _context5.prev = 29;\n          _context5.next = 32;\n          return (0, _effects.cancelled)();\n\n        case 32:\n          if (!_context5.sent) {\n            _context5.next = 35;\n            break;\n          }\n\n          _context5.next = 35;\n          return (0, _effects.put)({\n            type: _postActivity.POST_ACTIVITY_REJECTED,\n            error: true,\n            meta: meta,\n            payload: new Error('cancelled')\n          });\n\n        case 35:\n          return _context5.finish(29);\n\n        case 36:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked2, null, [[12, 25, 29, 36]]);\n}","map":null,"metadata":{},"sourceType":"script"}