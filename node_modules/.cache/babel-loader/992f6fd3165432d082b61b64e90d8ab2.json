{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar OpusRecorder =\n/** @class */\nfunction () {\n  function OpusRecorder(options) {\n    var _this = this;\n\n    this.Record = function (context, mediaStream, outputStream) {\n      var mediaRecorder = new MediaRecorder(mediaStream, _this.mediaRecorderOptions);\n      var timeslice = 100; // this is in ms - 100 ensures that the chunk doesn't exceed the max size of chunk allowed in WS connection\n\n      mediaRecorder.ondataavailable = function (dataAvailableEvent) {\n        if (outputStream) {\n          var reader_1 = new FileReader();\n          reader_1.readAsArrayBuffer(dataAvailableEvent.data);\n\n          reader_1.onloadend = function (event) {\n            outputStream.Write(reader_1.result);\n          };\n        }\n      };\n\n      _this.mediaResources = {\n        recorder: mediaRecorder,\n        stream: mediaStream\n      };\n      mediaRecorder.start(timeslice);\n    };\n\n    this.ReleaseMediaResources = function (context) {\n      if (_this.mediaResources.recorder.state !== \"inactive\") {\n        _this.mediaResources.recorder.stop();\n      }\n\n      _this.mediaResources.stream.getTracks().forEach(function (track) {\n        return track.stop();\n      });\n    };\n\n    this.mediaRecorderOptions = options;\n  }\n\n  return OpusRecorder;\n}();\n\nexports.OpusRecorder = OpusRecorder;\n/* Declaring this inline to avoid compiler warnings\ndeclare class MediaRecorder {\n    constructor(mediaStream: MediaStream, options: any);\n\r\n    public state: string;\n\r\n    public ondataavailable(dataAvailableEvent: any): void;\n    public stop(): void;\n}*/","map":null,"metadata":{},"sourceType":"script"}