{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar ConsoleLoggingListener =\n/** @class */\nfunction () {\n  function ConsoleLoggingListener(logLevelFilter) {\n    if (logLevelFilter === void 0) {\n      logLevelFilter = Exports_1.EventType.Warning;\n    }\n\n    var _this = this;\n\n    this.OnEvent = function (event) {\n      if (event.EventType >= _this.logLevelFilter) {\n        var log = _this.ToString(event);\n\n        switch (event.EventType) {\n          case Exports_1.EventType.Debug:\n            // tslint:disable-next-line:no-console\n            console.debug(log);\n            break;\n\n          case Exports_1.EventType.Info:\n            // tslint:disable-next-line:no-console\n            console.info(log);\n            break;\n\n          case Exports_1.EventType.Warning:\n            // tslint:disable-next-line:no-console\n            console.warn(log);\n            break;\n\n          case Exports_1.EventType.Error:\n            // tslint:disable-next-line:no-console\n            console.error(log);\n            break;\n\n          default:\n            // tslint:disable-next-line:no-console\n            console.log(log);\n            break;\n        }\n      }\n    };\n\n    this.ToString = function (event) {\n      var logFragments = [\"\" + event.EventTime, \"\" + event.Name];\n\n      for (var prop in event) {\n        if (prop && event.hasOwnProperty(prop) && prop !== \"eventTime\" && prop !== \"eventType\" && prop !== \"eventId\" && prop !== \"name\" && prop !== \"constructor\") {\n          var value = event[prop];\n          var valueToLog = \"<NULL>\";\n\n          if (value !== undefined && value !== null) {\n            if (typeof value === \"number\" || typeof value === \"string\") {\n              valueToLog = value.toString();\n            } else {\n              valueToLog = JSON.stringify(value);\n            }\n          }\n\n          logFragments.push(prop + \": \" + valueToLog);\n        }\n      }\n\n      return logFragments.join(\" | \");\n    };\n\n    this.logLevelFilter = logLevelFilter;\n  }\n\n  return ConsoleLoggingListener;\n}();\n\nexports.ConsoleLoggingListener = ConsoleLoggingListener;","map":null,"metadata":{},"sourceType":"script"}