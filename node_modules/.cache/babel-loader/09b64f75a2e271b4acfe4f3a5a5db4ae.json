{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _default =\n/*#__PURE__*/\nfunction () {\n  function _default() {\n    (0, _classCallCheck2.default)(this, _default);\n  }\n\n  (0, _createClass2.default)(_default, [{\n    key: \"pause\",\n    value: function pause() {\n      this.audioContext && this.audioContext.suspend();\n      this.playingUtterance && this.playingUtterance.emit('pause');\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.audioContext && this.audioContext.resume();\n      this.playingUtterance && this.playingUtterance.emit('resume');\n    }\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(queue, _ref) {\n        var AudioContext, utterance;\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                AudioContext = _ref.AudioContext;\n\n                if (!this.audioContext) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw new Error('already started');\n\n              case 3:\n                _context.prev = 3;\n\n              case 4:\n                if (!(utterance = queue.shift())) {\n                  _context.next = 11;\n                  break;\n                }\n\n                this.playingUtterance = utterance;\n                _context.next = 8;\n                return utterance.play(this.audioContext || (this.audioContext = new AudioContext()));\n\n              case 8:\n                this.playingUtterance = null;\n                _context.next = 4;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.next = 14;\n                return this.audioContext;\n\n              case 14:\n                _context.t0 = _context.sent;\n\n                if (!_context.t0) {\n                  _context.next = 17;\n                  break;\n                }\n\n                this.audioContext.close();\n\n              case 17:\n                return _context.finish(11);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3,, 11, 18]]);\n      }));\n\n      return function start(_x, _x2) {\n        return _start.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.playingUtterance && this.playingUtterance.stop();\n\n      if (this.audioContext) {\n        // Play -> Pause -> Cancel (stop)\n        // This would generate these events: \"start\", \"pause\", \"end\"\n        // Without this code, the \"end\" event will not emit until resume() is called\n        // Cancelling an unstarted utterance will not emit any \"start\" or \"end\" event\n        this.audioContext.close();\n        this.audioContext = null;\n      }\n    }\n  }]);\n  return _default;\n}();\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}