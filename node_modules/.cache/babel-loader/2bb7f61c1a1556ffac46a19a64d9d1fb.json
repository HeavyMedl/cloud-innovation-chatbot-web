{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _simpleUpdateIn = _interopRequireDefault(require(\"simple-update-in\"));\n\nvar _deleteActivity = require(\"../actions/deleteActivity\");\n\nvar _incomingActivity = require(\"../actions/incomingActivity\");\n\nvar _markActivity = require(\"../actions/markActivity\");\n\nvar _postActivity = require(\"../actions/postActivity\");\n\nvar _ActivityClientState = require(\"../constants/ActivityClientState\");\n\nvar DEFAULT_STATE = [];\n\nfunction getClientActivityID(_ref) {\n  var _ref$channelData = _ref.channelData;\n  _ref$channelData = _ref$channelData === void 0 ? {} : _ref$channelData;\n  var clientActivityID = _ref$channelData.clientActivityID;\n  return clientActivityID;\n}\n\nfunction findByClientActivityID(clientActivityID) {\n  return function (activity) {\n    return getClientActivityID(activity) === clientActivityID;\n  };\n}\n\nfunction upsertActivityWithSort(activities, nextActivity) {\n  var _nextActivity$channel = nextActivity.channelData;\n  _nextActivity$channel = _nextActivity$channel === void 0 ? {} : _nextActivity$channel;\n  var nextClientActivityID = _nextActivity$channel.clientActivityID,\n      _nextActivity$from = nextActivity.from;\n  _nextActivity$from = _nextActivity$from === void 0 ? {} : _nextActivity$from;\n  var nextFromID = _nextActivity$from.id,\n      nextFromRole = _nextActivity$from.role,\n      nextType = nextActivity.type;\n\n  if (nextType === 'typing' && nextFromRole === 'user') {\n    return activities;\n  }\n\n  var nextTimestamp = Date.parse(nextActivity.timestamp);\n  var nextActivities = activities.filter(function (_ref2) {\n    var _ref2$channelData = _ref2.channelData;\n    _ref2$channelData = _ref2$channelData === void 0 ? {} : _ref2$channelData;\n    var clientActivityID = _ref2$channelData.clientActivityID,\n        from = _ref2.from,\n        type = _ref2.type;\n    return (// We will remove all \"typing\" and \"sending messages\" activities\n      // \"clientActivityID\" is unique and used to track if the message has been sent and echoed back from the server\n      !(type === 'typing' && from.id === nextFromID || nextClientActivityID && clientActivityID === nextClientActivityID)\n    );\n  }); // Then, find the right (sorted) place to insert the new activity at, based on timestamp, and must be before \"typing\"\n  // Since clockskew might happen, we will ignore timestamp on messages that are sending\n  // If we are inserting \"typing\", we will always append it\n  // TODO: [P4] Move \"typing\" into Constants.ActivityType\n\n  var indexToInsert = nextActivity.type === 'typing' ? -1 : nextActivities.findIndex(function (_ref3) {\n    var _ref3$channelData = _ref3.channelData;\n    _ref3$channelData = _ref3$channelData === void 0 ? {} : _ref3$channelData;\n    var state = _ref3$channelData.state,\n        timestamp = _ref3.timestamp,\n        type = _ref3.type;\n    return Date.parse(timestamp) > nextTimestamp && state !== _ActivityClientState.SENDING && state !== _ActivityClientState.SEND_FAILED || type === 'typing';\n  }); // If no right place are found, append it\n\n  nextActivities.splice(~indexToInsert ? indexToInsert : nextActivities.length, 0, nextActivity);\n  return nextActivities;\n}\n\nfunction _default() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATE;\n\n  var _ref4 = arguments.length > 1 ? arguments[1] : undefined,\n      meta = _ref4.meta,\n      payload = _ref4.payload,\n      type = _ref4.type;\n\n  switch (type) {\n    case _deleteActivity.DELETE_ACTIVITY:\n      state = (0, _simpleUpdateIn[\"default\"])(state, [function (_ref5) {\n        var id = _ref5.id;\n        return id === payload.activityID;\n      }]);\n      break;\n\n    case _markActivity.MARK_ACTIVITY:\n      state = (0, _simpleUpdateIn[\"default\"])(state, [function (_ref6) {\n        var id = _ref6.id;\n        return id === payload.activityID;\n      }, 'channelData', payload.name], function () {\n        return payload.value;\n      });\n      break;\n\n    case _postActivity.POST_ACTIVITY_PENDING:\n      state = upsertActivityWithSort(state, (0, _simpleUpdateIn[\"default\"])(payload.activity, ['channelData', 'state'], function () {\n        return _ActivityClientState.SENDING;\n      }));\n      break;\n\n    case _postActivity.POST_ACTIVITY_REJECTED:\n      state = (0, _simpleUpdateIn[\"default\"])(state, [findByClientActivityID(meta.clientActivityID), 'channelData', 'state'], function () {\n        return _ActivityClientState.SEND_FAILED;\n      });\n      break;\n\n    case _postActivity.POST_ACTIVITY_FULFILLED:\n      state = (0, _simpleUpdateIn[\"default\"])(state, [findByClientActivityID(meta.clientActivityID)], function (activity) {\n        return (// We will replace the activity with the version from the server\n          (0, _simpleUpdateIn[\"default\"])(payload.activity, ['channelData', 'state'], function () {\n            return _ActivityClientState.SENT;\n          })\n        );\n      });\n      break;\n\n    case _incomingActivity.INCOMING_ACTIVITY:\n      // UpdateActivity is not supported right now because we ignore duplicated activity ID\n      if (!~state.findIndex(function (_ref7) {\n        var id = _ref7.id;\n        return id === payload.activity.id;\n      })) {\n        state = upsertActivityWithSort(state, payload.activity);\n      }\n\n      break;\n\n    default:\n      break;\n  }\n\n  return state;\n}","map":null,"metadata":{},"sourceType":"script"}