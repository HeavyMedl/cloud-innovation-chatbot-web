{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar WebsocketMessageAdapter =\n/** @class */\nfunction () {\n  function WebsocketMessageAdapter(uri, connectionId, messageFormatter) {\n    var _this = this;\n\n    this.Open = function () {\n      if (_this.connectionState === Exports_1.ConnectionState.Disconnected) {\n        return Exports_1.PromiseHelper.FromError(\"Cannot open a connection that is in \" + _this.connectionState + \" state\");\n      }\n\n      if (_this.connectionEstablishDeferral) {\n        return _this.connectionEstablishDeferral.Promise();\n      }\n\n      _this.connectionEstablishDeferral = new Exports_1.Deferred();\n      _this.connectionState = Exports_1.ConnectionState.Connecting;\n      _this.websocketClient = new WebSocket(_this.uri);\n      _this.websocketClient.binaryType = \"arraybuffer\";\n      _this.receivingMessageQueue = new Exports_1.Queue();\n      _this.disconnectDeferral = new Exports_1.Deferred();\n      _this.sendMessageQueue = new Exports_1.Queue();\n\n      _this.ProcessSendQueue();\n\n      _this.OnEvent(new Exports_1.ConnectionStartEvent(_this.connectionId, _this.uri));\n\n      _this.websocketClient.onopen = function (e) {\n        _this.connectionState = Exports_1.ConnectionState.Connected;\n\n        _this.OnEvent(new Exports_1.ConnectionEstablishedEvent(_this.connectionId));\n\n        _this.connectionEstablishDeferral.Resolve(new Exports_1.ConnectionOpenResponse(200, \"\"));\n      };\n\n      _this.websocketClient.onerror = function (e) {\n        // TODO: Understand what this is error is. Will we still get onClose ?\n        if (_this.connectionState !== Exports_1.ConnectionState.Connecting) {// TODO: Is this required ?\n          // this.OnEvent(new ConnectionErrorEvent(errorMsg, connectionId));\n        }\n      };\n\n      _this.websocketClient.onclose = function (e) {\n        if (_this.connectionState === Exports_1.ConnectionState.Connecting) {\n          _this.connectionState = Exports_1.ConnectionState.Disconnected;\n\n          _this.OnEvent(new Exports_1.ConnectionEstablishErrorEvent(_this.connectionId, e.code, e.reason));\n\n          _this.connectionEstablishDeferral.Resolve(new Exports_1.ConnectionOpenResponse(e.code, e.reason));\n        } else {\n          _this.OnEvent(new Exports_1.ConnectionClosedEvent(_this.connectionId, e.code, e.reason));\n        }\n\n        _this.OnClose(e.code, e.reason);\n      };\n\n      _this.websocketClient.onmessage = function (e) {\n        var networkReceivedTime = new Date().toISOString();\n\n        if (_this.connectionState === Exports_1.ConnectionState.Connected) {\n          var deferred_1 = new Exports_1.Deferred(); // let id = ++this.idCounter;\n\n          _this.receivingMessageQueue.EnqueueFromPromise(deferred_1.Promise());\n\n          if (e.data instanceof ArrayBuffer) {\n            var rawMessage = new Exports_1.RawWebsocketMessage(Exports_1.MessageType.Binary, e.data);\n\n            _this.messageFormatter.ToConnectionMessage(rawMessage).On(function (connectionMessage) {\n              _this.OnEvent(new Exports_1.ConnectionMessageReceivedEvent(_this.connectionId, networkReceivedTime, connectionMessage));\n\n              deferred_1.Resolve(connectionMessage);\n            }, function (error) {\n              // TODO: Events for these ?\n              deferred_1.Reject(\"Invalid binary message format. Error: \" + error);\n            });\n          } else {\n            var rawMessage = new Exports_1.RawWebsocketMessage(Exports_1.MessageType.Text, e.data);\n\n            _this.messageFormatter.ToConnectionMessage(rawMessage).On(function (connectionMessage) {\n              _this.OnEvent(new Exports_1.ConnectionMessageReceivedEvent(_this.connectionId, networkReceivedTime, connectionMessage));\n\n              deferred_1.Resolve(connectionMessage);\n            }, function (error) {\n              // TODO: Events for these ?\n              deferred_1.Reject(\"Invalid text message format. Error: \" + error);\n            });\n          }\n        }\n      };\n\n      return _this.connectionEstablishDeferral.Promise();\n    };\n\n    this.Send = function (message) {\n      if (_this.connectionState !== Exports_1.ConnectionState.Connected) {\n        return Exports_1.PromiseHelper.FromError(\"Cannot send on connection that is in \" + _this.connectionState + \" state\");\n      }\n\n      var messageSendStatusDeferral = new Exports_1.Deferred();\n      var messageSendDeferral = new Exports_1.Deferred();\n\n      _this.sendMessageQueue.EnqueueFromPromise(messageSendDeferral.Promise());\n\n      _this.messageFormatter.FromConnectionMessage(message).On(function (rawMessage) {\n        messageSendDeferral.Resolve({\n          Message: message,\n          RawWebsocketMessage: rawMessage,\n          SendStatusDeferral: messageSendStatusDeferral\n        });\n      }, function (error) {\n        messageSendDeferral.Reject(\"Error formatting the message. \" + error);\n      });\n\n      return messageSendStatusDeferral.Promise();\n    };\n\n    this.Read = function () {\n      if (_this.connectionState !== Exports_1.ConnectionState.Connected) {\n        return Exports_1.PromiseHelper.FromError(\"Cannot read on connection that is in \" + _this.connectionState + \" state\");\n      }\n\n      return _this.receivingMessageQueue.Dequeue();\n    };\n\n    this.Close = function (reason) {\n      if (_this.websocketClient) {\n        if (_this.connectionState !== Exports_1.ConnectionState.Connected) {\n          _this.websocketClient.close(1000, reason ? reason : \"Normal closure by client\");\n        }\n      } else {\n        var deferral = new Exports_1.Deferred();\n        deferral.Resolve(true);\n        return deferral.Promise();\n      }\n\n      return _this.disconnectDeferral.Promise();\n    };\n\n    this.SendRawMessage = function (sendItem) {\n      try {\n        _this.OnEvent(new Exports_1.ConnectionMessageSentEvent(_this.connectionId, new Date().toISOString(), sendItem.Message));\n\n        _this.websocketClient.send(sendItem.RawWebsocketMessage.Payload);\n\n        return Exports_1.PromiseHelper.FromResult(true);\n      } catch (e) {\n        return Exports_1.PromiseHelper.FromError(\"websocket send error: \" + e);\n      }\n    };\n\n    this.OnClose = function (code, reason) {\n      var closeReason = \"Connection closed. \" + code + \": \" + reason;\n      _this.connectionState = Exports_1.ConnectionState.Disconnected;\n\n      _this.disconnectDeferral.Resolve(true);\n\n      _this.receivingMessageQueue.Dispose(reason);\n\n      _this.receivingMessageQueue.DrainAndDispose(function (pendingReceiveItem) {// TODO: Events for these ?\n        // Logger.Instance.OnEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\n      }, closeReason);\n\n      _this.sendMessageQueue.DrainAndDispose(function (pendingSendItem) {\n        pendingSendItem.SendStatusDeferral.Reject(closeReason);\n      }, closeReason);\n    };\n\n    this.ProcessSendQueue = function () {\n      _this.sendMessageQueue.Dequeue().On(function (sendItem) {\n        _this.SendRawMessage(sendItem).On(function (result) {\n          sendItem.SendStatusDeferral.Resolve(result);\n\n          _this.ProcessSendQueue();\n        }, function (sendError) {\n          sendItem.SendStatusDeferral.Reject(sendError);\n\n          _this.ProcessSendQueue();\n        });\n      }, function (error) {// do nothing\n      });\n    };\n\n    this.OnEvent = function (event) {\n      _this.connectionEvents.OnEvent(event);\n\n      Exports_1.Events.Instance.OnEvent(event);\n    };\n\n    if (!uri) {\n      throw new Exports_1.ArgumentNullError(\"uri\");\n    }\n\n    if (!messageFormatter) {\n      throw new Exports_1.ArgumentNullError(\"messageFormatter\");\n    }\n\n    this.connectionEvents = new Exports_1.EventSource();\n    this.connectionId = connectionId;\n    this.messageFormatter = messageFormatter;\n    this.connectionState = Exports_1.ConnectionState.None;\n    this.uri = uri;\n  }\n\n  Object.defineProperty(WebsocketMessageAdapter.prototype, \"State\", {\n    get: function () {\n      return this.connectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WebsocketMessageAdapter.prototype, \"Events\", {\n    get: function () {\n      return this.connectionEvents;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return WebsocketMessageAdapter;\n}();\n\nexports.WebsocketMessageAdapter = WebsocketMessageAdapter;","map":null,"metadata":{},"sourceType":"script"}