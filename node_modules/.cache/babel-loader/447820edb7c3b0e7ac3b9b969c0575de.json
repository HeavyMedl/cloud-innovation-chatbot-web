{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../../common/Exports\");\n\nvar RecognitionEvents_1 = require(\"./RecognitionEvents\"); // tslint:disable-next-line:max-classes-per-file\n\n\nvar ServiceTelemetryListener =\n/** @class */\nfunction () {\n  function ServiceTelemetryListener(requestId, audioSourceId, audioNodeId) {\n    var _this = this;\n\n    this.isDisposed = false;\n    this.listeningTriggerMetric = null;\n    this.micMetric = null;\n    this.connectionEstablishMetric = null;\n\n    this.OnEvent = function (e) {\n      if (_this.isDisposed) {\n        return;\n      }\n\n      if (e instanceof RecognitionEvents_1.RecognitionTriggeredEvent && e.RequestId === _this.requestId) {\n        _this.listeningTriggerMetric = {\n          End: e.EventTime,\n          Name: \"ListeningTrigger\",\n          Start: e.EventTime\n        };\n      }\n\n      if (e instanceof Exports_1.AudioStreamNodeAttachingEvent && e.AudioSourceId === _this.audioSourceId && e.AudioNodeId === _this.audioNodeId) {\n        _this.micStartTime = e.EventTime;\n      }\n\n      if (e instanceof Exports_1.AudioStreamNodeAttachedEvent && e.AudioSourceId === _this.audioSourceId && e.AudioNodeId === _this.audioNodeId) {\n        _this.micStartTime = e.EventTime;\n      }\n\n      if (e instanceof Exports_1.AudioSourceErrorEvent && e.AudioSourceId === _this.audioSourceId) {\n        if (!_this.micMetric) {\n          _this.micMetric = {\n            End: e.EventTime,\n            Error: e.Error,\n            Name: \"Microphone\",\n            Start: _this.micStartTime\n          };\n        }\n      }\n\n      if (e instanceof Exports_1.AudioStreamNodeErrorEvent && e.AudioSourceId === _this.audioSourceId && e.AudioNodeId === _this.audioNodeId) {\n        if (!_this.micMetric) {\n          _this.micMetric = {\n            End: e.EventTime,\n            Error: e.Error,\n            Name: \"Microphone\",\n            Start: _this.micStartTime\n          };\n        }\n      }\n\n      if (e instanceof Exports_1.AudioStreamNodeDetachedEvent && e.AudioSourceId === _this.audioSourceId && e.AudioNodeId === _this.audioNodeId) {\n        if (!_this.micMetric) {\n          _this.micMetric = {\n            End: e.EventTime,\n            Name: \"Microphone\",\n            Start: _this.micStartTime\n          };\n        }\n      }\n\n      if (e instanceof RecognitionEvents_1.ConnectingToServiceEvent && e.RequestId === _this.requestId) {\n        _this.connectionId = e.ConnectionId;\n      }\n\n      if (e instanceof Exports_1.ConnectionStartEvent && e.ConnectionId === _this.connectionId) {\n        _this.connectionStartTime = e.EventTime;\n      }\n\n      if (e instanceof Exports_1.ConnectionEstablishedEvent && e.ConnectionId === _this.connectionId) {\n        if (!_this.connectionEstablishMetric) {\n          _this.connectionEstablishMetric = {\n            End: e.EventTime,\n            Id: _this.connectionId,\n            Name: \"Connection\",\n            Start: _this.connectionStartTime\n          };\n        }\n      }\n\n      if (e instanceof Exports_1.ConnectionEstablishErrorEvent && e.ConnectionId === _this.connectionId) {\n        if (!_this.connectionEstablishMetric) {\n          _this.connectionEstablishMetric = {\n            End: e.EventTime,\n            Error: _this.GetConnectionError(e.StatusCode),\n            Id: _this.connectionId,\n            Name: \"Connection\",\n            Start: _this.connectionStartTime\n          };\n        }\n      }\n\n      if (e instanceof Exports_1.ConnectionMessageReceivedEvent && e.ConnectionId === _this.connectionId) {\n        if (e.Message && e.Message.Headers && e.Message.Headers.path) {\n          if (!_this.receivedMessages[e.Message.Headers.path]) {\n            _this.receivedMessages[e.Message.Headers.path] = new Array();\n          }\n\n          _this.receivedMessages[e.Message.Headers.path].push(e.NetworkReceivedTime);\n        }\n      }\n    };\n\n    this.GetTelemetry = function () {\n      var metrics = new Array();\n\n      if (_this.listeningTriggerMetric) {\n        metrics.push(_this.listeningTriggerMetric);\n      }\n\n      if (_this.micMetric) {\n        metrics.push(_this.micMetric);\n      }\n\n      if (_this.connectionEstablishMetric) {\n        metrics.push(_this.connectionEstablishMetric);\n      }\n\n      var telemetry = {\n        Metrics: metrics,\n        ReceivedMessages: _this.receivedMessages\n      };\n      var json = JSON.stringify(telemetry); // We dont want to send the same telemetry again. So clean those out.\n\n      _this.receivedMessages = {};\n      _this.listeningTriggerMetric = null;\n      _this.micMetric = null;\n      _this.connectionEstablishMetric = null;\n      return json;\n    };\n\n    this.Dispose = function () {\n      _this.isDisposed = true;\n    };\n\n    this.GetConnectionError = function (statusCode) {\n      /*\n      -- Websocket status codes --\n      NormalClosure = 1000,\n      EndpointUnavailable = 1001,\n      ProtocolError = 1002,\n      InvalidMessageType = 1003,\n      Empty = 1005,\n      InvalidPayloadData = 1007,\n      PolicyViolation = 1008,\n      MessageTooBig = 1009,\n      MandatoryExtension = 1010,\n      InternalServerError = 1011\n      */\n      switch (statusCode) {\n        case 400:\n        case 1002:\n        case 1003:\n        case 1005:\n        case 1007:\n        case 1008:\n        case 1009:\n          return \"BadRequest\";\n\n        case 401:\n          return \"Unauthorized\";\n\n        case 403:\n          return \"Forbidden\";\n\n        case 503:\n        case 1001:\n          return \"ServerUnavailable\";\n\n        case 500:\n        case 1011:\n          return \"ServerError\";\n\n        case 408:\n        case 504:\n          return \"Timeout\";\n\n        default:\n          return \"statuscode:\" + statusCode.toString();\n      }\n    };\n\n    this.requestId = requestId;\n    this.audioSourceId = audioSourceId;\n    this.audioNodeId = audioNodeId;\n    this.receivedMessages = {};\n  }\n\n  return ServiceTelemetryListener;\n}();\n\nexports.ServiceTelemetryListener = ServiceTelemetryListener;","map":null,"metadata":{},"sourceType":"script"}