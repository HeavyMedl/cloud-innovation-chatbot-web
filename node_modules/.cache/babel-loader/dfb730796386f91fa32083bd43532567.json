{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _DOMEventEmitter2 = _interopRequireDefault(require(\"../Util/DOMEventEmitter\"));\n\nvar _eventAsPromise = _interopRequireDefault(require(\"event-as-promise\"));\n\nvar _fetchSpeechData = _interopRequireDefault(require(\"./fetchSpeechData\"));\n\nvar _subscribeEvent = _interopRequireDefault(require(\"./subscribeEvent\"));\n\nfunction asyncDecodeAudioData(audioContext, arrayBuffer) {\n  return new Promise(function (resolve, reject) {\n    var promise = audioContext.decodeAudioData(arrayBuffer, resolve, reject); // Newer implementation of \"decodeAudioData\" will return a Promise\n\n    promise && typeof promise.then === 'function' && resolve(promise);\n  });\n}\n\nfunction playDecoded(audioContext, audioBuffer, source) {\n  return new Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee(resolve, reject) {\n      var audioContextClosed, sourceEnded, unsubscribe;\n      return _regenerator.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              audioContextClosed = new _eventAsPromise.default();\n              sourceEnded = new _eventAsPromise.default();\n              unsubscribe = (0, _subscribeEvent.default)(audioContext, 'statechange', function (_ref2) {\n                var state = _ref2.target.state;\n                return state === 'closed' && audioContextClosed.eventListener();\n              });\n              _context.prev = 3;\n              source.buffer = audioBuffer; // \"ended\" may not fire if the underlying AudioContext is closed prematurely\n\n              source.onended = sourceEnded.eventListener;\n              source.connect(audioContext.destination);\n              source.start(0);\n              _context.next = 10;\n              return Promise.race([audioContextClosed.upcoming(), sourceEnded.upcoming()]);\n\n            case 10:\n              resolve();\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](3);\n              reject(_context.t0);\n\n            case 16:\n              _context.prev = 16;\n              unsubscribe();\n              return _context.finish(16);\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[3, 13, 16, 19]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n}\n\nvar _default =\n/*#__PURE__*/\nfunction (_DOMEventEmitter) {\n  (0, _inherits2.default)(_default, _DOMEventEmitter);\n\n  function _default(text) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, _default);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(_default).call(this, ['boundary', 'end', 'error', 'mark', 'pause', 'resume', 'start']));\n    _this._lang = null;\n    _this._pitch = 1;\n    _this._rate = 1;\n    _this._voice = null;\n    _this._volume = 1;\n    _this.text = text;\n    _this.onboundary = null;\n    _this.onend = null;\n    _this.onerror = null;\n    _this.onmark = null;\n    _this.onpause = null;\n    _this.onresume = null;\n    _this.onstart = null;\n    return _this;\n  }\n\n  (0, _createClass2.default)(_default, [{\n    key: \"preload\",\n    value: function () {\n      var _preload = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2() {\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.arrayBufferPromise = (0, _fetchSpeechData.default)({\n                  authorizationToken: this.authorizationToken,\n                  lang: this.lang || window.navigator.language,\n                  outputFormat: this.outputFormat,\n                  pitch: this.pitch,\n                  rate: this.rate,\n                  text: this.text,\n                  voice: this.voice && this.voice.voiceURI,\n                  volume: this.volume\n                });\n                _context2.next = 3;\n                return this.arrayBufferPromise;\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function preload() {\n        return _preload.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"play\",\n    value: function () {\n      var _play = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee3(audioContext) {\n        var source, audioBuffer;\n        return _regenerator.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0; // HACK: iOS requires bufferSourceNode to be constructed before decoding data\n\n                source = audioContext.createBufferSource();\n                _context3.t0 = asyncDecodeAudioData;\n                _context3.t1 = audioContext;\n                _context3.next = 6;\n                return this.arrayBufferPromise;\n\n              case 6:\n                _context3.t2 = _context3.sent;\n                _context3.next = 9;\n                return (0, _context3.t0)(_context3.t1, _context3.t2);\n\n              case 9:\n                audioBuffer = _context3.sent;\n                this.emit('start');\n                this._playingSource = source;\n                _context3.next = 14;\n                return playDecoded(audioContext, audioBuffer, source);\n\n              case 14:\n                this._playingSource = null;\n                this.emit('end');\n                _context3.next = 21;\n                break;\n\n              case 18:\n                _context3.prev = 18;\n                _context3.t3 = _context3[\"catch\"](0);\n                this.emit('error', {\n                  error: _context3.t3,\n                  type: 'error'\n                });\n\n              case 21:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 18]]);\n      }));\n\n      return function play(_x3) {\n        return _play.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this._playingSource && this._playingSource.stop();\n    }\n  }, {\n    key: \"lang\",\n    get: function get() {\n      return this._lang;\n    },\n    set: function set(value) {\n      this._lang = value;\n    }\n  }, {\n    key: \"pitch\",\n    get: function get() {\n      return this._pitch;\n    },\n    set: function set(value) {\n      this._pitch = value;\n    }\n  }, {\n    key: \"rate\",\n    get: function get() {\n      return this._rate;\n    },\n    set: function set(value) {\n      this._rate = value;\n    }\n  }, {\n    key: \"voice\",\n    get: function get() {\n      return this._voice;\n    },\n    set: function set(value) {\n      this._voice = value;\n    }\n  }, {\n    key: \"volume\",\n    get: function get() {\n      return this._volume;\n    },\n    set: function set(value) {\n      this._volume = value;\n    }\n  }]);\n  return _default;\n}(_DOMEventEmitter2.default);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}