{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _callee;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _setSendBox = require(\"../actions/setSendBox\");\n\nvar _setSendTyping = require(\"../actions/setSendTyping\");\n\nvar _setSendTypingIndicator = require(\"../actions/setSendTypingIndicator\");\n\nvar _postActivity = _interopRequireWildcard(require(\"../actions/postActivity\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _sendTypingIndicator = _interopRequireDefault(require(\"../selectors/sendTypingIndicator\"));\n\nvar _sleep = _interopRequireDefault(require(\"../utils/sleep\"));\n\nvar _marked =\n/*#__PURE__*/\n_regenerator[\"default\"].mark(_callee),\n    _marked2 =\n/*#__PURE__*/\n_regenerator[\"default\"].mark(sendTypingIndicatorOnSetSendBox);\n\nvar SEND_INTERVAL = 3000;\n\nfunction takeSendTypingIndicator(value) {\n  return (0, _effects.take)(function (_ref) {\n    var payload = _ref.payload,\n        type = _ref.type;\n    return type === _setSendTypingIndicator.SET_SEND_TYPING_INDICATOR && !payload.sendTypingIndicator === !value || // TODO: [P3] Take this deprecation code out when releasing on or after January 13 2020\n    type === _setSendTyping.SET_SEND_TYPING && !payload.sendTyping === !value;\n  });\n}\n\nfunction _callee() {\n  return _regenerator[\"default\"].wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return (0, _whileConnected[\"default\"])(sendTypingIndicatorOnSetSendBox);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction sendTypingIndicatorOnSetSendBox() {\n  var sendTypingIndicator, _loop;\n\n  return _regenerator[\"default\"].wrap(function sendTypingIndicatorOnSetSendBox$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return (0, _effects.select)(_sendTypingIndicator[\"default\"]);\n\n        case 2:\n          sendTypingIndicator = _context4.sent;\n\n          if (sendTypingIndicator) {\n            _context4.next = 6;\n            break;\n          }\n\n          _context4.next = 6;\n          return takeSendTypingIndicator(true);\n\n        case 6:\n          _loop =\n          /*#__PURE__*/\n          _regenerator[\"default\"].mark(function _loop() {\n            var lastSend, task;\n            return _regenerator[\"default\"].wrap(function _loop$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    lastSend = 0;\n                    _context3.next = 3;\n                    return (0, _effects.takeLatest)(function (_ref2) {\n                      var payload = _ref2.payload,\n                          type = _ref2.type;\n                      return type === _setSendBox.SET_SEND_BOX && payload.text || // Stop sending pending typing indicator if the user has posted anything.\n                      // We send typing indicator in a debounce way (t = 0, t = 3000, t = 6000).\n                      // When the user type, and then post the activity at t = 1500, we still have a pending typing indicator at t = 3000.\n                      // This code is to cancel the typing indicator at t = 3000.\n                      type === _postActivity.POST_ACTIVITY && payload.activity.type !== 'typing';\n                    },\n                    /*#__PURE__*/\n                    _regenerator[\"default\"].mark(function _callee2(_ref3) {\n                      var type, interval;\n                      return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              type = _ref3.type;\n\n                              if (!(type === _setSendBox.SET_SEND_BOX)) {\n                                _context2.next = 9;\n                                break;\n                              }\n\n                              interval = SEND_INTERVAL - Date.now() + lastSend;\n\n                              if (!(interval > 0)) {\n                                _context2.next = 6;\n                                break;\n                              }\n\n                              _context2.next = 6;\n                              return (0, _effects.call)(_sleep[\"default\"], interval);\n\n                            case 6:\n                              _context2.next = 8;\n                              return (0, _effects.put)((0, _postActivity[\"default\"])({\n                                type: 'typing'\n                              }));\n\n                            case 8:\n                              lastSend = Date.now();\n\n                            case 9:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n\n                  case 3:\n                    task = _context3.sent;\n                    _context3.next = 6;\n                    return takeSendTypingIndicator(false);\n\n                  case 6:\n                    _context3.next = 8;\n                    return (0, _effects.cancel)(task);\n\n                  case 8:\n                    _context3.next = 10;\n                    return takeSendTypingIndicator(true);\n\n                  case 10:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _loop);\n          });\n\n        case 7:\n          return _context4.delegateYield(_loop(), \"t0\", 8);\n\n        case 8:\n          _context4.next = 7;\n          break;\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n}","map":null,"metadata":{},"sourceType":"script"}