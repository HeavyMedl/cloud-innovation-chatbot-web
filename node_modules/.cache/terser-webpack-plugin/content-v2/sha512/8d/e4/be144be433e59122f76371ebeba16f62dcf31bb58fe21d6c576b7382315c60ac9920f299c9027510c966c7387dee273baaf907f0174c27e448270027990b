{"map":"{\"version\":3,\"sources\":[\"/Users/kmedley/cloud-innovation-chatbot-web/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-4-0!/Users/kmedley/cloud-innovation-chatbot-web/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-4-1!/Users/kmedley/cloud-innovation-chatbot-web/node_modules/postcss-loader/src/index.js??postcss!/Users/kmedley/cloud-innovation-chatbot-web/src/components/IphoneWrapper/IphoneWrapper.module.css\",\"/Users/kmedley/cloud-innovation-chatbot-web/src/components/WebChat/WebChat.js\",\"/Users/kmedley/cloud-innovation-chatbot-web/src/components/IphoneWrapper/IphoneWrapper.js\",\"/Users/kmedley/cloud-innovation-chatbot-web/src/App.js\",\"/Users/kmedley/cloud-innovation-chatbot-web/src/serviceWorker.js\",\"/Users/kmedley/cloud-innovation-chatbot-web/src/index.js\"],\"names\":[\"module\",\"exports\",\"Phone\",\"Phone-screen\",\"Phone-content\",\"_default\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"directLine\",\"DirectLine\",\"token\",\"react_default\",\"a\",\"createElement\",\"lib_default\",\"React\",\"Component\",\"IphoneWrapper\",\"_ref\",\"children\",\"className\",\"styles\",\"App\",\"WebChat_default\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"6EACAA,EAAAC,QAAA,CAAkBC,MAAA,6BAAAC,eAAA,oCAAAC,gBAAA,ieCIhB,SAAAC,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,WAAa,IAAIC,EAAAA,WAAW,CAC/BC,MAAO,4DAHQT,wEAQjB,OAAOU,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAcJ,WAAYJ,KAAKI,oBATbO,EAAAA,EAAMC,6BCDpBC,EAAA,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAChB,OACER,EAAAC,EAAAC,cAAA,MAAA,CAAKO,UAAWC,EAAAA,EAAOzB,OACrBe,EAAAC,EAAAC,cAAA,MAAA,CAAKO,UAAWC,EAAAA,EAAO,iBACrBV,EAAAC,EAAAC,cAAA,MAAA,CAAKO,UAAWC,EAAAA,EAAO,kBAAmBF,MCUnCG,IAAAA,EAZf,WACE,OACEX,EAAAC,EAAAC,cAAA,MAAA,CAAKO,UAAU,OACbT,EAAAC,EAAAC,cAAA,SAAA,CAAQO,UAAU,cAChBT,EAAAC,EAAAC,cAACI,EAAD,KACEN,EAAAC,EAAAC,cAACU,EAAD,UCEUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"// extracted by mini-css-extract-plugin\\nmodule.exports = {\\\"Phone\\\":\\\"IphoneWrapper_Phone__BnpKn\\\",\\\"Phone-screen\\\":\\\"IphoneWrapper_Phone-screen__iuTiR\\\",\\\"Phone-content\\\":\\\"IphoneWrapper_Phone-content__ibnsx\\\"};\",\"import { DirectLine } from 'botframework-directlinejs';\\nimport React from 'react';\\nimport ReactWebChat from 'botframework-webchat';\\n\\nexport default class extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.directLine = new DirectLine({\\n      token: '4AWpL9lhMYw.lzxO8vAJwXBIvTEhVbuI-sEA45eGk67Px04tzn9bWcU'\\n    });\\n  }\\n\\n  render() {\\n    return <ReactWebChat directLine={this.directLine} />;\\n  }\\n}\\n\",\"import React from 'react';\\nimport styles from './IphoneWrapper.module.css';\\n\\nexport default ({ children }) => {\\n  return (\\n    <div className={styles.Phone}>\\n      <div className={styles['Phone-screen']}>\\n        <div className={styles['Phone-content']}>{children}</div>\\n      </div>\\n    </div>\\n  );\\n};\\n\",\"import React from 'react';\\nimport './App.css';\\nimport WebChat from './components/WebChat/WebChat';\\nimport IphoneWrapper from './components/IphoneWrapper/IphoneWrapper';\\n\\nfunction App() {\\n  return (\\n    <div className='App'>\\n      <header className='App-header'>\\n        <IphoneWrapper>\\n          <WebChat />\\n        </IphoneWrapper>\\n      </header>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{106:function(e,n,t){e.exports={Phone:\"IphoneWrapper_Phone__BnpKn\",\"Phone-screen\":\"IphoneWrapper_Phone-screen__iuTiR\",\"Phone-content\":\"IphoneWrapper_Phone-content__ibnsx\"}},344:function(e,n,t){e.exports=t(928)},349:function(e,n,t){},350:function(e,n,t){},447:function(e,n){},449:function(e,n){},485:function(e,n){},486:function(e,n){},893:function(e,n){},904:function(e,n){},905:function(e,n){},906:function(e,n){},921:function(e,n){},928:function(e,n,t){\"use strict\";t.r(n);var o=t(1),a=t.n(o),c=t(176),r=t.n(c),i=(t(349),t(350),t(336)),u=t(337),l=t(342),s=t(338),h=t(343),p=t(103),m=t(339),d=t.n(m),f=function(e){function n(e){var t;return Object(i.a)(this,n),(t=Object(l.a)(this,Object(s.a)(n).call(this,e))).directLine=new p.DirectLine({token:\"4AWpL9lhMYw.lzxO8vAJwXBIvTEhVbuI-sEA45eGk67Px04tzn9bWcU\"}),t}return Object(h.a)(n,e),Object(u.a)(n,[{key:\"render\",value:function(){return a.a.createElement(d.a,{directLine:this.directLine})}}]),n}(a.a.Component),v=t(106),w=t.n(v),E=function(e){var n=e.children;return a.a.createElement(\"div\",{className:w.a.Phone},a.a.createElement(\"div\",{className:w.a[\"Phone-screen\"]},a.a.createElement(\"div\",{className:w.a[\"Phone-content\"]},n)))};var b=function(){return a.a.createElement(\"div\",{className:\"App\"},a.a.createElement(\"header\",{className:\"App-header\"},a.a.createElement(E,null,a.a.createElement(f,null))))};Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(a.a.createElement(b,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[344,1,2]]]);","extractedComments":[]}