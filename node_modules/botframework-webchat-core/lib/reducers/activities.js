"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

var _deleteActivity = require("../actions/deleteActivity");

var _incomingActivity = require("../actions/incomingActivity");

var _markActivity = require("../actions/markActivity");

var _postActivity = require("../actions/postActivity");

var _ActivityClientState = require("../constants/ActivityClientState");

var DEFAULT_STATE = [];

function getClientActivityID(_ref) {
  var _ref$channelData = _ref.channelData;
  _ref$channelData = _ref$channelData === void 0 ? {} : _ref$channelData;
  var clientActivityID = _ref$channelData.clientActivityID;
  return clientActivityID;
}

function findByClientActivityID(clientActivityID) {
  return function (activity) {
    return getClientActivityID(activity) === clientActivityID;
  };
}

function upsertActivityWithSort(activities, nextActivity) {
  var _nextActivity$channel = nextActivity.channelData;
  _nextActivity$channel = _nextActivity$channel === void 0 ? {} : _nextActivity$channel;
  var nextClientActivityID = _nextActivity$channel.clientActivityID,
      _nextActivity$from = nextActivity.from;
  _nextActivity$from = _nextActivity$from === void 0 ? {} : _nextActivity$from;
  var nextFromID = _nextActivity$from.id,
      nextFromRole = _nextActivity$from.role,
      nextType = nextActivity.type;

  if (nextType === 'typing' && nextFromRole === 'user') {
    return activities;
  }

  var nextTimestamp = Date.parse(nextActivity.timestamp);
  var nextActivities = activities.filter(function (_ref2) {
    var _ref2$channelData = _ref2.channelData;
    _ref2$channelData = _ref2$channelData === void 0 ? {} : _ref2$channelData;
    var clientActivityID = _ref2$channelData.clientActivityID,
        from = _ref2.from,
        type = _ref2.type;
    return (// We will remove all "typing" and "sending messages" activities
      // "clientActivityID" is unique and used to track if the message has been sent and echoed back from the server
      !(type === 'typing' && from.id === nextFromID || nextClientActivityID && clientActivityID === nextClientActivityID)
    );
  }); // Then, find the right (sorted) place to insert the new activity at, based on timestamp, and must be before "typing"
  // Since clockskew might happen, we will ignore timestamp on messages that are sending
  // If we are inserting "typing", we will always append it
  // TODO: [P4] Move "typing" into Constants.ActivityType

  var indexToInsert = nextActivity.type === 'typing' ? -1 : nextActivities.findIndex(function (_ref3) {
    var _ref3$channelData = _ref3.channelData;
    _ref3$channelData = _ref3$channelData === void 0 ? {} : _ref3$channelData;
    var state = _ref3$channelData.state,
        timestamp = _ref3.timestamp,
        type = _ref3.type;
    return Date.parse(timestamp) > nextTimestamp && state !== _ActivityClientState.SENDING && state !== _ActivityClientState.SEND_FAILED || type === 'typing';
  }); // If no right place are found, append it

  nextActivities.splice(~indexToInsert ? indexToInsert : nextActivities.length, 0, nextActivity);
  return nextActivities;
}

function _default() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATE;

  var _ref4 = arguments.length > 1 ? arguments[1] : undefined,
      meta = _ref4.meta,
      payload = _ref4.payload,
      type = _ref4.type;

  switch (type) {
    case _deleteActivity.DELETE_ACTIVITY:
      state = (0, _simpleUpdateIn["default"])(state, [function (_ref5) {
        var id = _ref5.id;
        return id === payload.activityID;
      }]);
      break;

    case _markActivity.MARK_ACTIVITY:
      state = (0, _simpleUpdateIn["default"])(state, [function (_ref6) {
        var id = _ref6.id;
        return id === payload.activityID;
      }, 'channelData', payload.name], function () {
        return payload.value;
      });
      break;

    case _postActivity.POST_ACTIVITY_PENDING:
      state = upsertActivityWithSort(state, (0, _simpleUpdateIn["default"])(payload.activity, ['channelData', 'state'], function () {
        return _ActivityClientState.SENDING;
      }));
      break;

    case _postActivity.POST_ACTIVITY_REJECTED:
      state = (0, _simpleUpdateIn["default"])(state, [findByClientActivityID(meta.clientActivityID), 'channelData', 'state'], function () {
        return _ActivityClientState.SEND_FAILED;
      });
      break;

    case _postActivity.POST_ACTIVITY_FULFILLED:
      state = (0, _simpleUpdateIn["default"])(state, [findByClientActivityID(meta.clientActivityID)], function (activity) {
        return (// We will replace the activity with the version from the server
          (0, _simpleUpdateIn["default"])(payload.activity, ['channelData', 'state'], function () {
            return _ActivityClientState.SENT;
          })
        );
      });
      break;

    case _incomingActivity.INCOMING_ACTIVITY:
      // UpdateActivity is not supported right now because we ignore duplicated activity ID
      if (!~state.findIndex(function (_ref7) {
        var id = _ref7.id;
        return id === payload.activity.id;
      })) {
        state = upsertActivityWithSort(state, payload.activity);
      }

      break;

    default:
      break;
  }

  return state;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,