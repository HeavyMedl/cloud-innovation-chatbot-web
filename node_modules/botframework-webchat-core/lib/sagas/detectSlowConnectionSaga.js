"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = detectSlowConnectionSaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _connect = require("../actions/connect");

var _reconnect = require("../actions/reconnect");

var _sleep = _interopRequireDefault(require("../utils/sleep"));

var _marked =
/*#__PURE__*/
_regenerator["default"].mark(detectSlowConnectionSaga);

function detectSlowConnectionSaga() {
  var connectivityRace;
  return _regenerator["default"].wrap(function detectSlowConnectionSaga$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _effects.take)([_connect.CONNECT_PENDING, _reconnect.RECONNECT_PENDING]);

        case 2:
          _context.next = 4;
          return (0, _effects.race)({
            fulfilled: (0, _effects.take)(_connect.CONNECT_FULFILLED),
            rejected: (0, _effects.take)(_connect.CONNECT_REJECTED),
            slow: (0, _effects.call)(function () {
              return (0, _sleep["default"])(15000);
            })
          });

        case 4:
          connectivityRace = _context.sent;

          if (!('slow' in connectivityRace)) {
            _context.next = 8;
            break;
          }

          _context.next = 8;
          return (0, _effects.put)({
            type: _connect.CONNECT_STILL_PENDING
          });

        case 8:
          _context.next = 0;
          break;

        case 10:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9kZXRlY3RTbG93Q29ubmVjdGlvblNhZ2EuanMiXSwibmFtZXMiOlsiZGV0ZWN0U2xvd0Nvbm5lY3Rpb25TYWdhIiwiQ09OTkVDVF9QRU5ESU5HIiwiUkVDT05ORUNUX1BFTkRJTkciLCJmdWxmaWxsZWQiLCJDT05ORUNUX0ZVTEZJTExFRCIsInJlamVjdGVkIiwiQ09OTkVDVF9SRUpFQ1RFRCIsInNsb3ciLCJjb25uZWN0aXZpdHlSYWNlIiwidHlwZSIsIkNPTk5FQ1RfU1RJTExfUEVORElORyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFNQTs7QUFDQTs7Ozs2QkFFeUJBLHdCOztBQUFWLFNBQVVBLHdCQUFWO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBR1gsaUJBQU0sbUJBQUssQ0FBQ0Msd0JBQUQsRUFBa0JDLDRCQUFsQixDQUFMLENBQU47O0FBSFc7QUFBQTtBQUtjLGlCQUFNLG1CQUFLO0FBQ2xDQyxZQUFBQSxTQUFTLEVBQUUsbUJBQUtDLDBCQUFMLENBRHVCO0FBRWxDQyxZQUFBQSxRQUFRLEVBQUUsbUJBQUtDLHlCQUFMLENBRndCO0FBR2xDQyxZQUFBQSxJQUFJLEVBQUUsbUJBQUssWUFBTTtBQUNmLHFCQUFPLHVCQUFNLEtBQU4sQ0FBUDtBQUNELGFBRks7QUFINEIsV0FBTCxDQUFOOztBQUxkO0FBS0xDLFVBQUFBLGdCQUxLOztBQUFBLGdCQWFQLFVBQVVBLGdCQWJIO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBY1QsaUJBQU0sa0JBQUk7QUFBRUMsWUFBQUEsSUFBSSxFQUFFQztBQUFSLFdBQUosQ0FBTjs7QUFkUztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWxsLCBwdXQsIHJhY2UsIHRha2UgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xuXG5pbXBvcnQge1xuICBDT05ORUNUX0ZVTEZJTExFRCxcbiAgQ09OTkVDVF9QRU5ESU5HLFxuICBDT05ORUNUX1JFSkVDVEVELFxuICBDT05ORUNUX1NUSUxMX1BFTkRJTkdcbn0gZnJvbSAnLi4vYWN0aW9ucy9jb25uZWN0JztcbmltcG9ydCB7IFJFQ09OTkVDVF9QRU5ESU5HIH0gZnJvbSAnLi4vYWN0aW9ucy9yZWNvbm5lY3QnO1xuaW1wb3J0IHNsZWVwIGZyb20gJy4uL3V0aWxzL3NsZWVwJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qIGRldGVjdFNsb3dDb25uZWN0aW9uU2FnYSgpIHtcbiAgZm9yICg7Oykge1xuXG4gICAgeWllbGQgdGFrZShbQ09OTkVDVF9QRU5ESU5HLCBSRUNPTk5FQ1RfUEVORElOR10pO1xuXG4gICAgY29uc3QgY29ubmVjdGl2aXR5UmFjZSA9IHlpZWxkIHJhY2Uoe1xuICAgICAgZnVsZmlsbGVkOiB0YWtlKENPTk5FQ1RfRlVMRklMTEVEKSxcbiAgICAgIHJlamVjdGVkOiB0YWtlKENPTk5FQ1RfUkVKRUNURUQpLFxuICAgICAgc2xvdzogY2FsbCgoKSA9PiB7XG4gICAgICAgIHJldHVybiBzbGVlcCgxNTAwMCk7XG4gICAgICB9KVxuICAgIH0pO1xuXG4gICAgaWYgKCdzbG93JyBpbiBjb25uZWN0aXZpdHlSYWNlKSB7XG4gICAgICB5aWVsZCBwdXQoeyB0eXBlOiBDT05ORUNUX1NUSUxMX1BFTkRJTkcgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=