"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _callee3;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _observeOnce = _interopRequireDefault(require("./effects/observeOnce"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _language = _interopRequireDefault(require("../selectors/language"));

var _sendTimeout = _interopRequireDefault(require("../selectors/sendTimeout"));

var _deleteKey = _interopRequireDefault(require("../utils/deleteKey"));

var _getTimestamp = _interopRequireDefault(require("../utils/getTimestamp"));

var _sleep = _interopRequireDefault(require("../utils/sleep"));

var _uniqueID = _interopRequireDefault(require("../utils/uniqueID"));

var _postActivity = require("../actions/postActivity");

var _incomingActivity = require("../actions/incomingActivity");

var _marked =
/*#__PURE__*/
_regenerator["default"].mark(_callee3),
    _marked2 =
/*#__PURE__*/
_regenerator["default"].mark(postActivity);

function _callee3() {
  return _regenerator["default"].wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _whileConnected["default"])(
          /*#__PURE__*/
          _regenerator["default"].mark(function _callee2(_ref) {
            var directLine, userID, username, numActivitiesPosted;
            return _regenerator["default"].wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    directLine = _ref.directLine, userID = _ref.userID, username = _ref.username;
                    numActivitiesPosted = 0;
                    _context2.next = 4;
                    return (0, _effects.takeEvery)(_postActivity.POST_ACTIVITY,
                    /*#__PURE__*/
                    _regenerator["default"].mark(function _callee(action) {
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              return _context.delegateYield(postActivity(directLine, userID, username, numActivitiesPosted++, action), "t0", 1);

                            case 1:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));

                  case 4:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));

        case 2:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked);
}

function postActivity(directLine, userID, username, numActivitiesPosted, _ref2) {
  var method, activity, locale, _activity, attachments, _activity$channelData, _activity$channelData2, clientActivityID, meta, echoBackCall, sendTimeout, _ref5, echoBack;

  return _regenerator["default"].wrap(function postActivity$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          method = _ref2.meta.method, activity = _ref2.payload.activity;
          _context5.next = 3;
          return (0, _effects.select)(_language["default"]);

        case 3:
          locale = _context5.sent;
          _activity = activity, attachments = _activity.attachments, _activity$channelData = _activity.channelData;
          _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;
          _activity$channelData2 = _activity$channelData.clientActivityID, clientActivityID = _activity$channelData2 === void 0 ? (0, _uniqueID["default"])() : _activity$channelData2;
          activity = (0, _objectSpread2["default"])({}, (0, _deleteKey["default"])(activity, 'id'), {
            attachments: attachments && attachments.map(function (_ref3) {
              var contentType = _ref3.contentType,
                  contentUrl = _ref3.contentUrl,
                  name = _ref3.name;
              return {
                contentType: contentType,
                contentUrl: contentUrl,
                name: name
              };
            }),
            channelData: (0, _objectSpread2["default"])({
              clientActivityID: clientActivityID
            }, (0, _deleteKey["default"])(activity.channelData, 'state')),
            channelId: 'webchat',
            from: {
              id: userID,
              name: username,
              role: 'user'
            },
            locale: locale,
            timestamp: (0, _getTimestamp["default"])()
          });

          if (!numActivitiesPosted) {
            activity.entities = [].concat((0, _toConsumableArray2["default"])(activity.entities || []), [{
              // TODO: [P4] Currently in v3, we send the capabilities although the client might not actually have them
              //       We need to understand why we need to send these, and only send capabilities the client have
              requiresBotState: true,
              supportsListening: true,
              supportsTts: true,
              type: 'ClientCapabilities'
            }]);
          }

          meta = {
            clientActivityID: clientActivityID,
            method: method
          };
          _context5.next = 12;
          return (0, _effects.put)({
            type: _postActivity.POST_ACTIVITY_PENDING,
            meta: meta,
            payload: {
              activity: activity
            }
          });

        case 12:
          _context5.prev = 12;
          // Quirks: We might receive INCOMING_ACTIVITY before the postActivity call completed
          //         So, we setup expectation first, then postActivity afterward
          echoBackCall = (0, _effects.call)(
          /*#__PURE__*/
          _regenerator["default"].mark(function _callee4() {
            var _ref4, _activity2, _activity2$channelDat, channelData, id;

            return _regenerator["default"].wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return (0, _effects.take)(_incomingActivity.INCOMING_ACTIVITY);

                  case 2:
                    _ref4 = _context4.sent;
                    _activity2 = _ref4.payload.activity;
                    _activity2$channelDat = _activity2.channelData, channelData = _activity2$channelDat === void 0 ? {} : _activity2$channelDat, id = _activity2.id;

                    if (!(channelData.clientActivityID === clientActivityID && id)) {
                      _context4.next = 7;
                      break;
                    }

                    return _context4.abrupt("return", _activity2);

                  case 7:
                    _context4.next = 0;
                    break;

                  case 9:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          })); // Timeout could be due to either:
          // - Post activity call may take too long time to complete
          //   - Direct Line service only respond on HTTP after bot respond to Direct Line
          // - Activity may take too long time to echo back

          _context5.next = 16;
          return (0, _effects.select)(_sendTimeout["default"]);

        case 16:
          sendTimeout = _context5.sent;
          _context5.next = 19;
          return (0, _effects.race)({
            send: (0, _effects.all)({
              echoBack: echoBackCall,
              postActivity: (0, _observeOnce["default"])(directLine.postActivity(activity))
            }),
            timeout: (0, _effects.call)(function () {
              return (0, _sleep["default"])(sendTimeout).then(function () {
                return Promise.reject(new Error('timeout'));
              });
            })
          });

        case 19:
          _ref5 = _context5.sent;
          echoBack = _ref5.send.echoBack;
          _context5.next = 23;
          return (0, _effects.put)({
            type: _postActivity.POST_ACTIVITY_FULFILLED,
            meta: meta,
            payload: {
              activity: echoBack
            }
          });

        case 23:
          _context5.next = 29;
          break;

        case 25:
          _context5.prev = 25;
          _context5.t0 = _context5["catch"](12);
          _context5.next = 29;
          return (0, _effects.put)({
            type: _postActivity.POST_ACTIVITY_REJECTED,
            error: true,
            meta: meta,
            payload: _context5.t0
          });

        case 29:
          _context5.prev = 29;
          _context5.next = 32;
          return (0, _effects.cancelled)();

        case 32:
          if (!_context5.sent) {
            _context5.next = 35;
            break;
          }

          _context5.next = 35;
          return (0, _effects.put)({
            type: _postActivity.POST_ACTIVITY_REJECTED,
            error: true,
            meta: meta,
            payload: new Error('cancelled')
          });

        case 35:
          return _context5.finish(29);

        case 36:
        case "end":
          return _context5.stop();
      }
    }
  }, _marked2, null, [[12, 25, 29, 36]]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,