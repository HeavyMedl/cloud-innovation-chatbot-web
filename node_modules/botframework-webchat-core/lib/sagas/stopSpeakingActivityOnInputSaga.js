"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _callee;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _postActivity = require("../actions/postActivity");

var _setSendBox = require("../actions/setSendBox");

var _startDictate = require("../actions/startDictate");

var _stopSpeakingActivity = _interopRequireDefault(require("../actions/stopSpeakingActivity"));

var _marked =
/*#__PURE__*/
_regenerator["default"].mark(_callee),
    _marked2 =
/*#__PURE__*/
_regenerator["default"].mark(stopSpeakingActivityOnInput);

function _callee() {
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _whileConnected["default"])(stopSpeakingActivityOnInput);

        case 2:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

function stopSpeakingActivityOnInput() {
  return _regenerator["default"].wrap(function stopSpeakingActivityOnInput$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _effects.takeEvery)(function (_ref) {
            var meta = _ref.meta,
                payload = _ref.payload,
                type = _ref.type;
            return type === _startDictate.START_DICTATE || type === _setSendBox.SET_SEND_BOX && payload.text // We want to stop speaking activity when the user click on a card action
            // But currently there are no actions generated out of a card action
            // So, right now, we are using best-effort by listening to POST_ACTIVITY_PENDING with a "message" event
            // We filter out speech because we will call startSpeakingActivity() for POST_ACTIVITY_PENDING dispatched by speech
            || type === _postActivity.POST_ACTIVITY_PENDING && meta.method !== 'speech' && payload.activity.type === 'message';
          },
          /*#__PURE__*/
          _regenerator["default"].mark(function _callee2() {
            return _regenerator["default"].wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return (0, _effects.put)((0, _stopSpeakingActivity["default"])());

                  case 2:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));

        case 2:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9zdG9wU3BlYWtpbmdBY3Rpdml0eU9uSW5wdXRTYWdhLmpzIl0sIm5hbWVzIjpbInN0b3BTcGVha2luZ0FjdGl2aXR5T25JbnB1dCIsIm1ldGEiLCJwYXlsb2FkIiwidHlwZSIsIlNUQVJUX0RJQ1RBVEUiLCJTRVRfU0VORF9CT1giLCJ0ZXh0IiwiUE9TVF9BQ1RJVklUWV9QRU5ESU5HIiwibWV0aG9kIiwiYWN0aXZpdHkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBS0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7NkJBTVVBLDJCOztBQUpLO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNiLGlCQUFNLGdDQUFlQSwyQkFBZixDQUFOOztBQURhO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUlmLFNBQVVBLDJCQUFWO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNFLGlCQUFNLHdCQUNKO0FBQUEsZ0JBQUdDLElBQUgsUUFBR0EsSUFBSDtBQUFBLGdCQUFTQyxPQUFULFFBQVNBLE9BQVQ7QUFBQSxnQkFBa0JDLElBQWxCLFFBQWtCQSxJQUFsQjtBQUFBLG1CQUNFQSxJQUFJLEtBQUtDLDJCQUFULElBR0VELElBQUksS0FBS0Usd0JBQVQsSUFDR0gsT0FBTyxDQUFDSSxJQUpiLENBT0E7QUFDQTtBQUNBO0FBQ0E7QUFWQSxlQVlFSCxJQUFJLEtBQUtJLG1DQUFULElBQ0dOLElBQUksQ0FBQ08sTUFBTCxLQUFnQixRQURuQixJQUVHTixPQUFPLENBQUNPLFFBQVIsQ0FBaUJOLElBQWpCLEtBQTBCLFNBZmpDO0FBQUEsV0FESTtBQUFBO0FBQUEsdUNBbUJKO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNFLDJCQUFNLGtCQUFJLHVDQUFKLENBQU47O0FBREY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsV0FuQkksRUFBTjs7QUFERjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHB1dCxcbiAgdGFrZUV2ZXJ5XG59IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XG5cbmltcG9ydCB3aGlsZUNvbm5lY3RlZCBmcm9tICcuL2VmZmVjdHMvd2hpbGVDb25uZWN0ZWQnO1xuXG5pbXBvcnQgeyBQT1NUX0FDVElWSVRZX1BFTkRJTkcgfSBmcm9tICcuLi9hY3Rpb25zL3Bvc3RBY3Rpdml0eSc7XG5pbXBvcnQgeyBTRVRfU0VORF9CT1ggfSBmcm9tICcuLi9hY3Rpb25zL3NldFNlbmRCb3gnO1xuaW1wb3J0IHsgU1RBUlRfRElDVEFURSB9IGZyb20gJy4uL2FjdGlvbnMvc3RhcnREaWN0YXRlJztcbmltcG9ydCBzdG9wU3BlYWtpbmdBY3Rpdml0eSBmcm9tICcuLi9hY3Rpb25zL3N0b3BTcGVha2luZ0FjdGl2aXR5JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qICgpIHtcbiAgeWllbGQgd2hpbGVDb25uZWN0ZWQoc3RvcFNwZWFraW5nQWN0aXZpdHlPbklucHV0KTtcbn1cblxuZnVuY3Rpb24qIHN0b3BTcGVha2luZ0FjdGl2aXR5T25JbnB1dCgpIHtcbiAgeWllbGQgdGFrZUV2ZXJ5KFxuICAgICh7IG1ldGEsIHBheWxvYWQsIHR5cGUgfSkgPT4gKFxuICAgICAgdHlwZSA9PT0gU1RBUlRfRElDVEFURVxuXG4gICAgICB8fCAoXG4gICAgICAgIHR5cGUgPT09IFNFVF9TRU5EX0JPWFxuICAgICAgICAmJiBwYXlsb2FkLnRleHRcbiAgICAgIClcblxuICAgICAgLy8gV2Ugd2FudCB0byBzdG9wIHNwZWFraW5nIGFjdGl2aXR5IHdoZW4gdGhlIHVzZXIgY2xpY2sgb24gYSBjYXJkIGFjdGlvblxuICAgICAgLy8gQnV0IGN1cnJlbnRseSB0aGVyZSBhcmUgbm8gYWN0aW9ucyBnZW5lcmF0ZWQgb3V0IG9mIGEgY2FyZCBhY3Rpb25cbiAgICAgIC8vIFNvLCByaWdodCBub3csIHdlIGFyZSB1c2luZyBiZXN0LWVmZm9ydCBieSBsaXN0ZW5pbmcgdG8gUE9TVF9BQ1RJVklUWV9QRU5ESU5HIHdpdGggYSBcIm1lc3NhZ2VcIiBldmVudFxuICAgICAgLy8gV2UgZmlsdGVyIG91dCBzcGVlY2ggYmVjYXVzZSB3ZSB3aWxsIGNhbGwgc3RhcnRTcGVha2luZ0FjdGl2aXR5KCkgZm9yIFBPU1RfQUNUSVZJVFlfUEVORElORyBkaXNwYXRjaGVkIGJ5IHNwZWVjaFxuICAgICAgfHwgKFxuICAgICAgICB0eXBlID09PSBQT1NUX0FDVElWSVRZX1BFTkRJTkdcbiAgICAgICAgJiYgbWV0YS5tZXRob2QgIT09ICdzcGVlY2gnXG4gICAgICAgICYmIHBheWxvYWQuYWN0aXZpdHkudHlwZSA9PT0gJ21lc3NhZ2UnXG4gICAgICApXG4gICAgKSxcbiAgICBmdW5jdGlvbiogKCkge1xuICAgICAgeWllbGQgcHV0KHN0b3BTcGVha2luZ0FjdGl2aXR5KCkpO1xuICAgIH1cbiAgKTtcbn1cbiJdfQ==