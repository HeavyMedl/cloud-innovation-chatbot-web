"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _callee;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

var _incomingActivity = _interopRequireDefault(require("../actions/incomingActivity"));

var _setSuggestedActions = _interopRequireDefault(require("../actions/setSuggestedActions"));

var _activityFromBot = _interopRequireDefault(require("../definitions/activityFromBot"));

var _observeEach = _interopRequireDefault(require("./effects/observeEach"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _activities = require("../selectors/activities");

var _marked =
/*#__PURE__*/
_regenerator["default"].mark(_callee),
    _marked2 =
/*#__PURE__*/
_regenerator["default"].mark(observeActivity);

function _callee() {
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _whileConnected["default"])(observeActivity);

        case 2:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

function observeActivity(_ref) {
  var directLine, userID;
  return _regenerator["default"].wrap(function observeActivity$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          directLine = _ref.directLine, userID = _ref.userID;
          _context3.next = 3;
          return (0, _observeEach["default"])(directLine.activity$,
          /*#__PURE__*/
          _regenerator["default"].mark(function _callee2(activity) {
            var messageActivities, lastMessageActivity, _lastMessageActivity$, actions, to;

            return _regenerator["default"].wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    activity = patchActivityWithFromRole(activity, userID);
                    _context2.next = 3;
                    return (0, _effects.put)((0, _incomingActivity["default"])(activity));

                  case 3:
                    _context2.next = 5;
                    return (0, _effects.select)((0, _activities.ofType)('message'));

                  case 5:
                    messageActivities = _context2.sent;
                    lastMessageActivity = messageActivities[messageActivities.length - 1];

                    if (!(0, _activityFromBot["default"])(lastMessageActivity)) {
                      _context2.next = 13;
                      break;
                    }

                    _lastMessageActivity$ = lastMessageActivity.suggestedActions;
                    _lastMessageActivity$ = _lastMessageActivity$ === void 0 ? {} : _lastMessageActivity$;
                    actions = _lastMessageActivity$.actions, to = _lastMessageActivity$.to; // If suggested actions is not destined to anyone, or is destined to the user, show it.
                    // In other words, if suggested actions is destined to someone else, don't show it.

                    _context2.next = 13;
                    return (0, _effects.put)((0, _setSuggestedActions["default"])(to && to.length && !to.includes(userID) ? null : actions));

                  case 13:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));

        case 3:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked2);
}

function patchActivityWithFromRole(activity, userID) {
  // Some activities, such as "ConversationUpdate", does not have "from" defined.
  // And although "role" is defined in Direct Line spec, it was not sent over the wire.
  // We normalize the activity here to simplify null-check and logic later.
  // Patch activity.from.role to make sure its either "bot", "user", or "channel"
  if (!activity.from) {
    activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
      return 'channel';
    });
  } else if (!activity.from.role) {
    if (activity.from.id === userID) {
      activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
        return 'user';
      });
    } else if (activity.from.id) {
      activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
        return 'bot';
      });
    } else {
      activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
        return 'channel';
      });
    }
  }

  return activity;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9pbmNvbWluZ0FjdGl2aXR5U2FnYS5qcyJdLCJuYW1lcyI6WyJvYnNlcnZlQWN0aXZpdHkiLCJkaXJlY3RMaW5lIiwidXNlcklEIiwiYWN0aXZpdHkkIiwiYWN0aXZpdHkiLCJwYXRjaEFjdGl2aXR5V2l0aEZyb21Sb2xlIiwibWVzc2FnZUFjdGl2aXRpZXMiLCJsYXN0TWVzc2FnZUFjdGl2aXR5IiwibGVuZ3RoIiwic3VnZ2VzdGVkQWN0aW9ucyIsImFjdGlvbnMiLCJ0byIsImluY2x1ZGVzIiwiZnJvbSIsInJvbGUiLCJpZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFLQTs7QUFFQTs7QUFDQTs7QUFFQTs7QUFFQTs7QUFDQTs7QUFFQTs7Ozs7Ozs2QkFNVUEsZTs7QUFKSztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDYixpQkFBTSxnQ0FBZUEsZUFBZixDQUFOOztBQURhO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUlmLFNBQVVBLGVBQVY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQTRCQyxVQUFBQSxVQUE1QixRQUE0QkEsVUFBNUIsRUFBd0NDLE1BQXhDLFFBQXdDQSxNQUF4QztBQUFBO0FBQ0UsaUJBQU0sNkJBQVlELFVBQVUsQ0FBQ0UsU0FBdkI7QUFBQTtBQUFBLHVDQUFrQyxrQkFBV0MsUUFBWDtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ3RDQSxvQkFBQUEsUUFBUSxHQUFHQyx5QkFBeUIsQ0FBQ0QsUUFBRCxFQUFXRixNQUFYLENBQXBDO0FBRHNDO0FBR3RDLDJCQUFNLGtCQUFJLGtDQUFpQkUsUUFBakIsQ0FBSixDQUFOOztBQUhzQztBQUFBO0FBT1osMkJBQU0scUJBQU8sd0JBQWlCLFNBQWpCLENBQVAsQ0FBTjs7QUFQWTtBQU9oQ0Usb0JBQUFBLGlCQVBnQztBQVFoQ0Msb0JBQUFBLG1CQVJnQyxHQVFWRCxpQkFBaUIsQ0FBQ0EsaUJBQWlCLENBQUNFLE1BQWxCLEdBQTJCLENBQTVCLENBUlA7O0FBQUEseUJBVWxDLGlDQUFnQkQsbUJBQWhCLENBVmtDO0FBQUE7QUFBQTtBQUFBOztBQUFBLDRDQVdlQSxtQkFYZixDQVc1QkUsZ0JBWDRCO0FBQUEsK0VBV1EsRUFYUjtBQVdSQyxvQkFBQUEsT0FYUSx5QkFXUkEsT0FYUSxFQVdDQyxFQVhELHlCQVdDQSxFQVhELEVBYXBDO0FBQ0E7O0FBZG9DO0FBZXBDLDJCQUFNLGtCQUFJLHFDQUFvQkEsRUFBRSxJQUFJQSxFQUFFLENBQUNILE1BQVQsSUFBbUIsQ0FBQ0csRUFBRSxDQUFDQyxRQUFILENBQVlWLE1BQVosQ0FBcEIsR0FBMEMsSUFBMUMsR0FBaURRLE9BQXJFLENBQUosQ0FBTjs7QUFmb0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsV0FBbEMsRUFBTjs7QUFERjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFxQkEsU0FBU0wseUJBQVQsQ0FBbUNELFFBQW5DLEVBQTZDRixNQUE3QyxFQUFxRDtBQUNuRDtBQUNBO0FBQ0E7QUFFQTtBQUNBLE1BQUksQ0FBQ0UsUUFBUSxDQUFDUyxJQUFkLEVBQW9CO0FBQ2xCVCxJQUFBQSxRQUFRLEdBQUcsZ0NBQVNBLFFBQVQsRUFBbUIsQ0FBQyxNQUFELEVBQVMsTUFBVCxDQUFuQixFQUFxQztBQUFBLGFBQU0sU0FBTjtBQUFBLEtBQXJDLENBQVg7QUFDRCxHQUZELE1BRU8sSUFBSSxDQUFDQSxRQUFRLENBQUNTLElBQVQsQ0FBY0MsSUFBbkIsRUFBeUI7QUFDOUIsUUFBSVYsUUFBUSxDQUFDUyxJQUFULENBQWNFLEVBQWQsS0FBcUJiLE1BQXpCLEVBQWlDO0FBQy9CRSxNQUFBQSxRQUFRLEdBQUcsZ0NBQVNBLFFBQVQsRUFBbUIsQ0FBQyxNQUFELEVBQVMsTUFBVCxDQUFuQixFQUFxQztBQUFBLGVBQU0sTUFBTjtBQUFBLE9BQXJDLENBQVg7QUFDRCxLQUZELE1BRU8sSUFBSUEsUUFBUSxDQUFDUyxJQUFULENBQWNFLEVBQWxCLEVBQXNCO0FBQzNCWCxNQUFBQSxRQUFRLEdBQUcsZ0NBQVNBLFFBQVQsRUFBbUIsQ0FBQyxNQUFELEVBQVMsTUFBVCxDQUFuQixFQUFxQztBQUFBLGVBQU0sS0FBTjtBQUFBLE9BQXJDLENBQVg7QUFDRCxLQUZNLE1BRUE7QUFDTEEsTUFBQUEsUUFBUSxHQUFHLGdDQUFTQSxRQUFULEVBQW1CLENBQUMsTUFBRCxFQUFTLE1BQVQsQ0FBbkIsRUFBcUM7QUFBQSxlQUFNLFNBQU47QUFBQSxPQUFyQyxDQUFYO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPQSxRQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBwdXQsXG4gIHNlbGVjdFxufSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xuXG5pbXBvcnQgdXBkYXRlSW4gZnJvbSAnc2ltcGxlLXVwZGF0ZS1pbic7XG5cbmltcG9ydCBpbmNvbWluZ0FjdGl2aXR5IGZyb20gJy4uL2FjdGlvbnMvaW5jb21pbmdBY3Rpdml0eSc7XG5pbXBvcnQgc2V0U3VnZ2VzdGVkQWN0aW9ucyBmcm9tICcuLi9hY3Rpb25zL3NldFN1Z2dlc3RlZEFjdGlvbnMnO1xuXG5pbXBvcnQgYWN0aXZpdHlGcm9tQm90IGZyb20gJy4uL2RlZmluaXRpb25zL2FjdGl2aXR5RnJvbUJvdCc7XG5cbmltcG9ydCBvYnNlcnZlRWFjaCBmcm9tICcuL2VmZmVjdHMvb2JzZXJ2ZUVhY2gnO1xuaW1wb3J0IHdoaWxlQ29ubmVjdGVkIGZyb20gJy4vZWZmZWN0cy93aGlsZUNvbm5lY3RlZCc7XG5cbmltcG9ydCB7IG9mVHlwZSBhcyBhY3Rpdml0aWVzT2ZUeXBlIH0gZnJvbSAnLi4vc2VsZWN0b3JzL2FjdGl2aXRpZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiogKCkge1xuICB5aWVsZCB3aGlsZUNvbm5lY3RlZChvYnNlcnZlQWN0aXZpdHkpO1xufVxuXG5mdW5jdGlvbiogb2JzZXJ2ZUFjdGl2aXR5KHsgZGlyZWN0TGluZSwgdXNlcklEIH0pIHtcbiAgeWllbGQgb2JzZXJ2ZUVhY2goZGlyZWN0TGluZS5hY3Rpdml0eSQsIGZ1bmN0aW9uKiAoYWN0aXZpdHkpIHtcbiAgICBhY3Rpdml0eSA9IHBhdGNoQWN0aXZpdHlXaXRoRnJvbVJvbGUoYWN0aXZpdHksIHVzZXJJRCk7XG5cbiAgICB5aWVsZCBwdXQoaW5jb21pbmdBY3Rpdml0eShhY3Rpdml0eSkpO1xuXG4gICAgLy8gVXBkYXRlIHN1Z2dlc3RlZCBhY3Rpb25zXG4gICAgLy8gVE9ETzogW1AzXSBXZSBjb3VsZCBwdXQgdGhpcyBsb2dpYyBpbnNpZGUgcmVkdWNlciB0byBtaW5pbWl6ZSBudW1iZXIgb2YgYWN0aW9ucyBkaXNwYXRjaGVkLlxuICAgIGNvbnN0IG1lc3NhZ2VBY3Rpdml0aWVzID0geWllbGQgc2VsZWN0KGFjdGl2aXRpZXNPZlR5cGUoJ21lc3NhZ2UnKSk7XG4gICAgY29uc3QgbGFzdE1lc3NhZ2VBY3Rpdml0eSA9IG1lc3NhZ2VBY3Rpdml0aWVzW21lc3NhZ2VBY3Rpdml0aWVzLmxlbmd0aCAtIDFdO1xuXG4gICAgaWYgKGFjdGl2aXR5RnJvbUJvdChsYXN0TWVzc2FnZUFjdGl2aXR5KSkge1xuICAgICAgY29uc3QgeyBzdWdnZXN0ZWRBY3Rpb25zOiB7IGFjdGlvbnMsIHRvIH0gPSB7fSB9ID0gbGFzdE1lc3NhZ2VBY3Rpdml0eTtcblxuICAgICAgLy8gSWYgc3VnZ2VzdGVkIGFjdGlvbnMgaXMgbm90IGRlc3RpbmVkIHRvIGFueW9uZSwgb3IgaXMgZGVzdGluZWQgdG8gdGhlIHVzZXIsIHNob3cgaXQuXG4gICAgICAvLyBJbiBvdGhlciB3b3JkcywgaWYgc3VnZ2VzdGVkIGFjdGlvbnMgaXMgZGVzdGluZWQgdG8gc29tZW9uZSBlbHNlLCBkb24ndCBzaG93IGl0LlxuICAgICAgeWllbGQgcHV0KHNldFN1Z2dlc3RlZEFjdGlvbnModG8gJiYgdG8ubGVuZ3RoICYmICF0by5pbmNsdWRlcyh1c2VySUQpID8gbnVsbCA6IGFjdGlvbnMpKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwYXRjaEFjdGl2aXR5V2l0aEZyb21Sb2xlKGFjdGl2aXR5LCB1c2VySUQpIHtcbiAgLy8gU29tZSBhY3Rpdml0aWVzLCBzdWNoIGFzIFwiQ29udmVyc2F0aW9uVXBkYXRlXCIsIGRvZXMgbm90IGhhdmUgXCJmcm9tXCIgZGVmaW5lZC5cbiAgLy8gQW5kIGFsdGhvdWdoIFwicm9sZVwiIGlzIGRlZmluZWQgaW4gRGlyZWN0IExpbmUgc3BlYywgaXQgd2FzIG5vdCBzZW50IG92ZXIgdGhlIHdpcmUuXG4gIC8vIFdlIG5vcm1hbGl6ZSB0aGUgYWN0aXZpdHkgaGVyZSB0byBzaW1wbGlmeSBudWxsLWNoZWNrIGFuZCBsb2dpYyBsYXRlci5cblxuICAvLyBQYXRjaCBhY3Rpdml0eS5mcm9tLnJvbGUgdG8gbWFrZSBzdXJlIGl0cyBlaXRoZXIgXCJib3RcIiwgXCJ1c2VyXCIsIG9yIFwiY2hhbm5lbFwiXG4gIGlmICghYWN0aXZpdHkuZnJvbSkge1xuICAgIGFjdGl2aXR5ID0gdXBkYXRlSW4oYWN0aXZpdHksIFsnZnJvbScsICdyb2xlJ10sICgpID0+ICdjaGFubmVsJyk7XG4gIH0gZWxzZSBpZiAoIWFjdGl2aXR5LmZyb20ucm9sZSkge1xuICAgIGlmIChhY3Rpdml0eS5mcm9tLmlkID09PSB1c2VySUQpIHtcbiAgICAgIGFjdGl2aXR5ID0gdXBkYXRlSW4oYWN0aXZpdHksIFsnZnJvbScsICdyb2xlJ10sICgpID0+ICd1c2VyJyk7XG4gICAgfSBlbHNlIGlmIChhY3Rpdml0eS5mcm9tLmlkKSB7XG4gICAgICBhY3Rpdml0eSA9IHVwZGF0ZUluKGFjdGl2aXR5LCBbJ2Zyb20nLCAncm9sZSddLCAoKSA9PiAnYm90Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2aXR5ID0gdXBkYXRlSW4oYWN0aXZpdHksIFsnZnJvbScsICdyb2xlJ10sICgpID0+ICdjaGFubmVsJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFjdGl2aXR5O1xufVxuIl19