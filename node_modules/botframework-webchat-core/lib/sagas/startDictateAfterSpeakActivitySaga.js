"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _callee2;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _markActivity = require("../actions/markActivity");

var _startDictate = _interopRequireDefault(require("../actions/startDictate"));

var _speakingActivity = _interopRequireDefault(require("../definitions/speakingActivity"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _whileSpeakIncomingActivity = _interopRequireDefault(require("./effects/whileSpeakIncomingActivity"));

var _activities2 = require("../selectors/activities");

var _marked =
/*#__PURE__*/
_regenerator["default"].mark(_callee2),
    _marked2 =
/*#__PURE__*/
_regenerator["default"].mark(startDictateAfterSpeakActivity),
    _marked3 =
/*#__PURE__*/
_regenerator["default"].mark(startDictateAfterAllActivitiesSpoken);

function _callee2() {
  return _regenerator["default"].wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return (0, _whileConnected["default"])(
          /*#__PURE__*/
          _regenerator["default"].mark(function _callee() {
            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return (0, _whileSpeakIncomingActivity["default"])(startDictateAfterSpeakActivity);

                  case 2:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked);
}

function startDictateAfterSpeakActivity() {
  return _regenerator["default"].wrap(function startDictateAfterSpeakActivity$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _effects.takeEvery)(function (_ref) {
            var payload = _ref.payload,
                type = _ref.type;
            return type === _markActivity.MARK_ACTIVITY && payload.name === 'speak' && payload.value === false;
          }, startDictateAfterAllActivitiesSpoken);

        case 2:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked2);
}

function startDictateAfterAllActivitiesSpoken(_ref2) {
  var activityID, activities, _activities, spokenActivity;

  return _regenerator["default"].wrap(function startDictateAfterAllActivitiesSpoken$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          activityID = _ref2.payload.activityID;
          _context4.next = 3;
          return (0, _effects.select)((0, _activities2.ofID)(activityID));

        case 3:
          activities = _context4.sent;
          _activities = (0, _slicedToArray2["default"])(activities, 1), spokenActivity = _activities[0];

          if (!(spokenActivity && spokenActivity.inputHint !== 'ignoringInput' // Checks if there are no more activities that will be synthesis
          && !activities.some(function (activity) {
            return activity.id !== activityID && (0, _speakingActivity["default"])(activity);
          }))) {
            _context4.next = 8;
            break;
          }

          _context4.next = 8;
          return (0, _effects.put)((0, _startDictate["default"])());

        case 8:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked3);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9zdGFydERpY3RhdGVBZnRlclNwZWFrQWN0aXZpdHlTYWdhLmpzIl0sIm5hbWVzIjpbInN0YXJ0RGljdGF0ZUFmdGVyU3BlYWtBY3Rpdml0eSIsInN0YXJ0RGljdGF0ZUFmdGVyQWxsQWN0aXZpdGllc1Nwb2tlbiIsInBheWxvYWQiLCJ0eXBlIiwiTUFSS19BQ1RJVklUWSIsIm5hbWUiLCJ2YWx1ZSIsImFjdGl2aXR5SUQiLCJhY3Rpdml0aWVzIiwic3Bva2VuQWN0aXZpdHkiLCJpbnB1dEhpbnQiLCJzb21lIiwiYWN0aXZpdHkiLCJpZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQU1BOztBQUNBOztBQUVBOztBQUVBOztBQUNBOztBQUVBOzs7Ozs7OzZCQVFVQSw4Qjs7OzZCQVdBQyxvQzs7QUFqQks7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2IsaUJBQU07QUFBQTtBQUFBLHVDQUFlO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNuQiwyQkFBTSw0Q0FBMkJELDhCQUEzQixDQUFOOztBQURtQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxXQUFmLEVBQU47O0FBRGE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTWYsU0FBVUEsOEJBQVY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0UsaUJBQU0sd0JBQ0o7QUFBQSxnQkFBR0UsT0FBSCxRQUFHQSxPQUFIO0FBQUEsZ0JBQVlDLElBQVosUUFBWUEsSUFBWjtBQUFBLG1CQUNFQSxJQUFJLEtBQUtDLDJCQUFULElBQ0dGLE9BQU8sQ0FBQ0csSUFBUixLQUFpQixPQURwQixJQUVHSCxPQUFPLENBQUNJLEtBQVIsS0FBa0IsS0FIdkI7QUFBQSxXQURJLEVBTUpMLG9DQU5JLENBQU47O0FBREY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBV0EsU0FBVUEsb0NBQVY7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUE0RE0sVUFBQUEsVUFBNUQsU0FBaURMLE9BQWpELENBQTRESyxVQUE1RDtBQUFBO0FBQ3FCLGlCQUFNLHFCQUFPLHVCQUFlQSxVQUFmLENBQVAsQ0FBTjs7QUFEckI7QUFDUUMsVUFBQUEsVUFEUjtBQUFBLHdEQUUyQkEsVUFGM0IsTUFFU0MsY0FGVDs7QUFBQSxnQkFLSUEsY0FBYyxJQUNYQSxjQUFjLENBQUNDLFNBQWYsS0FBNkIsZUFEaEMsQ0FFQTtBQUZBLGFBR0csQ0FBQ0YsVUFBVSxDQUFDRyxJQUFYLENBQ0YsVUFBQUMsUUFBUTtBQUFBLG1CQUFJQSxRQUFRLENBQUNDLEVBQVQsS0FBZ0JOLFVBQWhCLElBQThCLGtDQUFpQkssUUFBakIsQ0FBbEM7QUFBQSxXQUROLENBUlI7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFjSSxpQkFBTSxrQkFBSSwrQkFBSixDQUFOOztBQWRKO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgcHV0LFxuICBzZWxlY3QsXG4gIHRha2VFdmVyeVxufSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xuXG5pbXBvcnQgeyBNQVJLX0FDVElWSVRZIH0gZnJvbSAnLi4vYWN0aW9ucy9tYXJrQWN0aXZpdHknO1xuaW1wb3J0IHN0YXJ0RGljdGF0ZSBmcm9tICcuLi9hY3Rpb25zL3N0YXJ0RGljdGF0ZSc7XG5cbmltcG9ydCBzcGVha2luZ0FjdGl2aXR5IGZyb20gJy4uL2RlZmluaXRpb25zL3NwZWFraW5nQWN0aXZpdHknO1xuXG5pbXBvcnQgd2hpbGVDb25uZWN0ZWQgZnJvbSAnLi9lZmZlY3RzL3doaWxlQ29ubmVjdGVkJztcbmltcG9ydCB3aGlsZVNwZWFrSW5jb21pbmdBY3Rpdml0eSBmcm9tICcuL2VmZmVjdHMvd2hpbGVTcGVha0luY29taW5nQWN0aXZpdHknO1xuXG5pbXBvcnQgeyBvZklEIGFzIGFjdGl2aXRpZXNPZklEIH0gZnJvbSAnLi4vc2VsZWN0b3JzL2FjdGl2aXRpZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiogKCkge1xuICB5aWVsZCB3aGlsZUNvbm5lY3RlZChmdW5jdGlvbiogKCkge1xuICAgIHlpZWxkIHdoaWxlU3BlYWtJbmNvbWluZ0FjdGl2aXR5KHN0YXJ0RGljdGF0ZUFmdGVyU3BlYWtBY3Rpdml0eSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiogc3RhcnREaWN0YXRlQWZ0ZXJTcGVha0FjdGl2aXR5KCkge1xuICB5aWVsZCB0YWtlRXZlcnkoXG4gICAgKHsgcGF5bG9hZCwgdHlwZSB9KSA9PiAoXG4gICAgICB0eXBlID09PSBNQVJLX0FDVElWSVRZXG4gICAgICAmJiBwYXlsb2FkLm5hbWUgPT09ICdzcGVhaydcbiAgICAgICYmIHBheWxvYWQudmFsdWUgPT09IGZhbHNlXG4gICAgKSxcbiAgICBzdGFydERpY3RhdGVBZnRlckFsbEFjdGl2aXRpZXNTcG9rZW5cbiAgKTtcbn1cblxuZnVuY3Rpb24qIHN0YXJ0RGljdGF0ZUFmdGVyQWxsQWN0aXZpdGllc1Nwb2tlbih7IHBheWxvYWQ6IHsgYWN0aXZpdHlJRCB9IH0pIHtcbiAgY29uc3QgYWN0aXZpdGllcyA9IHlpZWxkIHNlbGVjdChhY3Rpdml0aWVzT2ZJRChhY3Rpdml0eUlEKSk7XG4gIGNvbnN0IFtzcG9rZW5BY3Rpdml0eV0gPSBhY3Rpdml0aWVzO1xuXG4gIGlmIChcbiAgICBzcG9rZW5BY3Rpdml0eVxuICAgICYmIHNwb2tlbkFjdGl2aXR5LmlucHV0SGludCAhPT0gJ2lnbm9yaW5nSW5wdXQnXG4gICAgLy8gQ2hlY2tzIGlmIHRoZXJlIGFyZSBubyBtb3JlIGFjdGl2aXRpZXMgdGhhdCB3aWxsIGJlIHN5bnRoZXNpc1xuICAgICYmICFhY3Rpdml0aWVzLnNvbWUoXG4gICAgICBhY3Rpdml0eSA9PiBhY3Rpdml0eS5pZCAhPT0gYWN0aXZpdHlJRCAmJiBzcGVha2luZ0FjdGl2aXR5KGFjdGl2aXR5KVxuICAgIClcbiAgKSB7XG4gICAgLy8gV2UgaG9ub3IgaW5wdXQgaGludCBiYXNlZCBvbiB0aGlzIGFydGljbGVcbiAgICAvLyBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9ib3Qtc2VydmljZS9ib3QtYnVpbGRlci1ob3d0by1hZGQtaW5wdXQtaGludHM/dmlldz1henVyZS1ib3Qtc2VydmljZS00LjAmdGFicz1jc1xuICAgIHlpZWxkIHB1dChzdGFydERpY3RhdGUoKSk7XG4gIH1cbn1cbiJdfQ==